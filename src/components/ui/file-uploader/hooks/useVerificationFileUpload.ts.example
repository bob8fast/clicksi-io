// hooks/useVerificationFileUpload.ts
// Verification-specific file upload integration - Files uploaded during form submission

import { useCallback } from 'react';
import { FileWithId } from '../types/file-uploader.types';
import { 
    useAddVerificationDocument,
    useSubmitVerificationApplication,
    useGetVerificationDocument
} from '@/gen/api/hooks/user_management/verification';
import type {
    UserManagementDomainDTOsVerificationDocumentDto
} from '@/gen/api/types';

/**
 * Verification file upload hooks for form-based submission
 * Files are selected but NOT uploaded until form submission
 * Reuses existing verification hooks and form submission logic
 */
export const useVerificationFileUpload = () => {
    
    /**
     * Get signed URLs for existing verification documents (display only)
     * Uses actual verification hooks for displaying uploaded documents
     */
    const { mutateAsync: getVerificationDocument } = useGetVerificationDocument();
    
    const getSignedUrls = useCallback(async (imageIds: string[]) => {
        try {
            // For verification documents, we get signed URLs through the document endpoint
            // This might need to be adjusted based on your actual API structure
            const promises = imageIds.map(id => 
                getVerificationDocument({ pathParams: { documentId: id } })
            );
            
            const documents = await Promise.all(promises);
            
            return {
                ttl_seconds: 1800, // 30 minutes default TTL
                expires_at: new Date(Date.now() + 1800000).toISOString(),
                urls: documents.map((doc, index) => ({
                    media_id: imageIds[index],
                    url: doc.download_url || `https://verification-doc-${imageIds[index]}`
                }))
            };
        } catch (error) {
            console.error('Failed to get verification document signed URLs:', error);
            // Fallback to mock URLs if API fails
            return {
                ttl_seconds: 1800,
                expires_at: new Date(Date.now() + 1800000).toISOString(),
                urls: imageIds.map(id => ({
                    media_id: id,
                    url: `https://verification-fallback-${id}`
                }))
            };
        }
    }, [getVerificationDocument]);

    /**
     * Prepares files for form submission without uploading
     * Returns files ready to be included in form submission
     */
    const prepareFilesForSubmission = useCallback((selectedFiles: FileWithId[]) => {
        return selectedFiles.map(fileWithId => ({
            fileId: fileWithId.fileId,
            file: fileWithId.file,
            name: fileWithId.name,
            size: fileWithId.size,
            type: fileWithId.type
        }));
    }, []);

    /**
     * Converts existing verification documents to FileWithId format for display
     */
    const convertExistingDocumentsToFileWithId = useCallback((existingDocuments: any[]) => {
        return existingDocuments.map(doc => ({
            fileId: `existing-${doc.id}`,
            file: new File([], doc.file_name || 'document'), // Placeholder file
            name: doc.file_name || 'Verification Document',
            size: doc.file_size || 0,
            type: doc.mime_type || 'application/pdf',
            lastModified: new Date(doc.created_at || Date.now()).getTime(),
            // Additional verification-specific data
            isExisting: true,
            documentId: doc.id,
            documentType: doc.document_type,
            verificationStatus: doc.verification_status
        }));
    }, []);

    /**
     * Creates form data that includes files for submission
     * This integrates with existing form submission logic
     */
    const createFormDataWithFiles = useCallback((
        formData: Record<string, any>,
        filesByDocumentType: Record<string, FileWithId[]>
    ) => {
        const formDataObj = new FormData();
        
        // Add regular form fields
        Object.keys(formData).forEach(key => {
            if (formData[key] !== null && formData[key] !== undefined) {
                formDataObj.append(key, formData[key]);
            }
        });
        
        // Add files by document type
        Object.entries(filesByDocumentType).forEach(([documentType, files]) => {
            files.forEach((fileWithId, index) => {
                // Use existing form field naming convention
                formDataObj.append(`${documentType}_file_${index}`, fileWithId.file);
                formDataObj.append(`${documentType}_name_${index}`, fileWithId.name);
            });
        });
        
        return formDataObj;
    }, []);

    /**
     * Validates files before form submission
     */
    const validateFilesForSubmission = useCallback((
        filesByDocumentType: Record<string, FileWithId[]>,
        requiredDocumentTypes: string[]
    ) => {
        const errors: string[] = [];
        
        requiredDocumentTypes.forEach(docType => {
            const files = filesByDocumentType[docType] || [];
            if (files.length === 0) {
                errors.push(`${docType} document is required`);
            }
        });
        
        // Additional validation
        Object.entries(filesByDocumentType).forEach(([docType, files]) => {
            files.forEach(fileWithId => {
                if (fileWithId.size > 10 * 1024 * 1024) { // 10MB limit
                    errors.push(`${docType} file "${fileWithId.name}" exceeds 10MB limit`);
                }
                
                if (!['application/pdf', 'image/jpeg', 'image/png'].includes(fileWithId.type)) {
                    errors.push(`${docType} file "${fileWithId.name}" must be PDF or image`);
                }
            });
        });
        
        return errors;
    }, []);

    // Get the mutation hooks
    const { mutateAsync: addVerificationDocument } = useAddVerificationDocument();
    const { mutateAsync: submitVerificationApplication } = useSubmitVerificationApplication();
    
    const verificationFileHooks = {
        /**
         * Get signed URLs for displaying existing documents
         */
        getSignedUrls,
        
        /**
         * Prepare files for form submission (no upload)
         */
        prepareFilesForSubmission,
        
        /**
         * Convert existing documents for display
         */
        convertExistingDocumentsToFileWithId,
        
        /**
         * Create form data with files for submission
         */
        createFormDataWithFiles,
        
        /**
         * Validate files before submission
         */
        validateFilesForSubmission,
        
        /**
         * Helper to organize files by document type
         */
        organizeFilesByDocumentType: useCallback((
            selectedFilesByUploader: Record<string, FileWithId[]>
        ) => {
            // Organize files by document type for form submission
            // This would depend on your specific document type mapping
            return selectedFilesByUploader;
        }, []),

        /**
         * Integration with existing verification form submission
         * This would be called during form onSubmit
         */
        submitVerificationForm: useCallback(async (
            formData: Record<string, any>,
            filesByDocumentType: Record<string, FileWithId[]>
        ) => {
            // Validate files first
            const requiredDocTypes = Object.keys(filesByDocumentType);
            const validationErrors = validateFilesForSubmission(filesByDocumentType, requiredDocTypes);
            
            if (validationErrors.length > 0) {
                throw new Error(`Validation failed: ${validationErrors.join(', ')}`);
            }
            
            try {
                // For each file, add as verification document
                const { mutateAsync: addVerificationDocument } = useAddVerificationDocument();
                const { mutateAsync: submitVerificationApplication } = useSubmitVerificationApplication();
                
                // First add all documents
                const documentPromises = Object.entries(filesByDocumentType).flatMap(([docType, files]) =>
                    files.filter(f => !f.isExisting).map(fileWithId => {
                        const formData = new FormData();
                        formData.append('file', fileWithId.file);
                        formData.append('document_type', docType);
                        formData.append('user_notes', formData.user_notes || '');
                        
                        return addVerificationDocument({
                            pathParams: { userId: formData.user_id || 'current' },
                            data: formData as any
                        });
                    })
                );
                
                const uploadedDocuments = await Promise.all(documentPromises);
                
                // Then submit the verification application
                const submissionResult = await submitVerificationApplication({
                    pathParams: { applicationId: formData.application_id || 'current' }
                });
                
                return {
                    success: true,
                    verificationId: submissionResult.id || 'verification-' + Date.now(),
                    status: submissionResult.status || 'pending_review',
                    documents: uploadedDocuments
                };
            } catch (error) {
                console.error('Verification form submission failed:', error);
                throw error;
            }
        }, [validateFilesForSubmission, createFormDataWithFiles])
    };

    return verificationFileHooks;
};