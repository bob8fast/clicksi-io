/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ContentManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsCommentResponse,
  ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsContentResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ContentManagementAPIModelsContentCreateRequest,
  ContentManagementAPIModelsContentResponse,
  ContentManagementAPIModelsContentUpdateRequest,
  ContentManagementAPIModelsProductTagRequest,
  ContentManagementAPIModelsProductTagResponse,
  ContentManagementAPIModelsScheduleRequest,
  DeleteContentPathParameters,
  GetCommentsParams,
  GetCommentsPathParameters,
  GetContentByIdPathParameters,
  GetContentsParams,
  RemoveProductTagPathParameters,
  ScheduleContentPathParameters,
  SearchContentsParams,
  TagProductPathParameters,
  UpdateContentPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [Content] Create Content
 */
export const getCreateContentUrl = () => {
  return `/content-management/api/v1/contents`;
};

export const createContent = async (
  contentManagementAPIModelsContentCreateRequest: ContentManagementAPIModelsContentCreateRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsContentResponse>(
    getCreateContentUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsContentCreateRequest),
    },
  );
};

export const getCreateContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createContent>>,
    TError,
    { data: ContentManagementAPIModelsContentCreateRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createContent>>,
  TError,
  { data: ContentManagementAPIModelsContentCreateRequest },
  TContext
> => {
  const mutationKey = ["createContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createContent>>,
    { data: ContentManagementAPIModelsContentCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createContent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createContent>>
>;
export type CreateContentMutationBody =
  ContentManagementAPIModelsContentCreateRequest;
export type CreateContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Content] Create Content
 */
export const useCreateContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createContent>>,
      TError,
      { data: ContentManagementAPIModelsContentCreateRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createContent>>,
  TError,
  { data: ContentManagementAPIModelsContentCreateRequest },
  TContext
> => {
  const mutationOptions = getCreateContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Content] Get Contents
 */
export const getGetContentsUrl = (params?: GetContentsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/content-management/api/v1/contents?${stringifiedParams}`
    : `/content-management/api/v1/contents`;
};

export const getContents = async (
  params?: GetContentsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsContentResponse>(
    getGetContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetContentsQueryKey = (params?: GetContentsParams) => {
  return [
    "content-management",
    "api",
    "v1",
    "contents",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetContentsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContents>>> = ({
    signal,
  }) => getContents(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getContents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContentsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContents>>
>;
export type GetContentsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetContentsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContents>>,
          TError,
          Awaited<ReturnType<typeof getContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContents>>,
          TError,
          Awaited<ReturnType<typeof getContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Get Contents
 */

export function useGetContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetContentsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Get Contents
 */
export const prefetchGetContentsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetContentsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetContentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContents>>> = ({
    signal,
  }) => getContents(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getContents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContents>>
>;
export type GetContentsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetContents<
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetContentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContents>>,
          TError,
          Awaited<ReturnType<typeof getContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContents<
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContents>>,
          TError,
          Awaited<ReturnType<typeof getContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContents<
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Get Contents
 */

export function useGetContents<
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetContentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Get Contents
 */
export const prefetchGetContentsQuery = async <
  TData = Awaited<ReturnType<typeof getContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetContentsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Content] Get Content By Id
 */
export const getGetContentByIdUrl = ({
  contentId,
}: GetContentByIdPathParameters) => {
  return `/content-management/api/v1/contents/${contentId}`;
};

export const getContentById = async (
  { contentId }: GetContentByIdPathParameters,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsContentResponse>(
    getGetContentByIdUrl({ contentId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetContentByIdQueryKey = ({
  contentId,
}: GetContentByIdPathParameters) => {
  return ["content-management", "api", "v1", "contents", contentId] as const;
};

export const useGetContentByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getContentById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContentById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetContentByIdQueryKey({ contentId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentById>>> = ({
    signal,
  }) => getContentById({ contentId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getContentById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContentByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContentById>>
>;
export type GetContentByIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetContentByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContentById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetContentByIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContentById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentById>>,
          TError,
          Awaited<ReturnType<typeof getContentById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContentByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContentById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContentById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentById>>,
          TError,
          Awaited<ReturnType<typeof getContentById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContentByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContentById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContentById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Get Content By Id
 */

export function useGetContentByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getContentById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContentById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetContentByIdInfiniteQueryOptions(
    { contentId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Get Content By Id
 */
export const prefetchGetContentByIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { contentId }: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getContentById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetContentByIdInfiniteQueryOptions(
    { contentId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetContentByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetContentByIdQueryKey({ contentId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentById>>> = ({
    signal,
  }) => getContentById({ contentId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getContentById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContentByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContentById>>
>;
export type GetContentByIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetContentById<
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetContentByIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentById>>,
          TError,
          Awaited<ReturnType<typeof getContentById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContentById<
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentById>>,
          TError,
          Awaited<ReturnType<typeof getContentById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetContentById<
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Get Content By Id
 */

export function useGetContentById<
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetContentByIdQueryOptions({ contentId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Get Content By Id
 */
export const prefetchGetContentByIdQuery = async <
  TData = Awaited<ReturnType<typeof getContentById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { contentId }: GetContentByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetContentByIdQueryOptions({ contentId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Content] Update Content
 */
export const getUpdateContentUrl = ({
  contentId,
}: UpdateContentPathParameters) => {
  return `/content-management/api/v1/contents/${contentId}`;
};

export const updateContent = async (
  { contentId }: UpdateContentPathParameters,
  contentManagementAPIModelsContentUpdateRequest: ContentManagementAPIModelsContentUpdateRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsContentResponse>(
    getUpdateContentUrl({ contentId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsContentUpdateRequest),
    },
  );
};

export const getUpdateContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateContent>>,
    TError,
    {
      pathParams: UpdateContentPathParameters;
      data: ContentManagementAPIModelsContentUpdateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateContent>>,
  TError,
  {
    pathParams: UpdateContentPathParameters;
    data: ContentManagementAPIModelsContentUpdateRequest;
  },
  TContext
> => {
  const mutationKey = ["updateContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateContent>>,
    {
      pathParams: UpdateContentPathParameters;
      data: ContentManagementAPIModelsContentUpdateRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateContent(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateContent>>
>;
export type UpdateContentMutationBody =
  ContentManagementAPIModelsContentUpdateRequest;
export type UpdateContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Content] Update Content
 */
export const useUpdateContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateContent>>,
      TError,
      {
        pathParams: UpdateContentPathParameters;
        data: ContentManagementAPIModelsContentUpdateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateContent>>,
  TError,
  {
    pathParams: UpdateContentPathParameters;
    data: ContentManagementAPIModelsContentUpdateRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Content] Delete Content
 */
export const getDeleteContentUrl = ({
  contentId,
}: DeleteContentPathParameters) => {
  return `/content-management/api/v1/contents/${contentId}`;
};

export const deleteContent = async (
  { contentId }: DeleteContentPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteContentUrl({ contentId }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContent>>,
    TError,
    { pathParams: DeleteContentPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteContent>>,
  TError,
  { pathParams: DeleteContentPathParameters },
  TContext
> => {
  const mutationKey = ["deleteContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteContent>>,
    { pathParams: DeleteContentPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteContent(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteContent>>
>;

export type DeleteContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Content] Delete Content
 */
export const useDeleteContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteContent>>,
      TError,
      { pathParams: DeleteContentPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteContent>>,
  TError,
  { pathParams: DeleteContentPathParameters },
  TContext
> => {
  const mutationOptions = getDeleteContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Content] Get Comments
 */
export const getGetCommentsUrl = (
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/content-management/api/v1/contents/${contentId}/comments?${stringifiedParams}`
    : `/content-management/api/v1/contents/${contentId}/comments`;
};

export const getComments = async (
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsCommentResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsCommentResponse>(
    getGetCommentsUrl({ contentId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCommentsQueryKey = (
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
) => {
  return [
    "content-management",
    "api",
    "v1",
    "contents",
    contentId,
    "comments",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetCommentsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getComments>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCommentsQueryKey({ contentId }, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getComments>>> = ({
    signal,
  }) => getComments({ contentId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComments>>
>;
export type GetCommentsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCommentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getComments>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCommentsPathParameters,
  params: undefined | GetCommentsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getComments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getComments>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getComments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getComments>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Get Comments
 */

export function useGetCommentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getComments>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCommentsInfiniteQueryOptions(
    { contentId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Get Comments
 */
export const prefetchGetCommentsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCommentsInfiniteQueryOptions(
    { contentId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCommentsQueryKey({ contentId }, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getComments>>> = ({
    signal,
  }) => getComments({ contentId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComments>>
>;
export type GetCommentsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCommentsPathParameters,
  params: undefined | GetCommentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Get Comments
 */

export function useGetComments<
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCommentsQueryOptions(
    { contentId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Get Comments
 */
export const prefetchGetCommentsQuery = async <
  TData = Awaited<ReturnType<typeof getComments>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { contentId }: GetCommentsPathParameters,
  params?: GetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCommentsQueryOptions(
    { contentId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Content] Tag Product
 */
export const getTagProductUrl = ({ contentId }: TagProductPathParameters) => {
  return `/content-management/api/v1/contents/${contentId}/product-tags`;
};

export const tagProduct = async (
  { contentId }: TagProductPathParameters,
  contentManagementAPIModelsProductTagRequest: ContentManagementAPIModelsProductTagRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsProductTagResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsProductTagResponse>(
    getTagProductUrl({ contentId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsProductTagRequest),
    },
  );
};

export const getTagProductMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tagProduct>>,
    TError,
    {
      pathParams: TagProductPathParameters;
      data: ContentManagementAPIModelsProductTagRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tagProduct>>,
  TError,
  {
    pathParams: TagProductPathParameters;
    data: ContentManagementAPIModelsProductTagRequest;
  },
  TContext
> => {
  const mutationKey = ["tagProduct"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tagProduct>>,
    {
      pathParams: TagProductPathParameters;
      data: ContentManagementAPIModelsProductTagRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return tagProduct(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TagProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof tagProduct>>
>;
export type TagProductMutationBody =
  ContentManagementAPIModelsProductTagRequest;
export type TagProductMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Content] Tag Product
 */
export const useTagProduct = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tagProduct>>,
      TError,
      {
        pathParams: TagProductPathParameters;
        data: ContentManagementAPIModelsProductTagRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tagProduct>>,
  TError,
  {
    pathParams: TagProductPathParameters;
    data: ContentManagementAPIModelsProductTagRequest;
  },
  TContext
> => {
  const mutationOptions = getTagProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Content] Remove Product Tag
 */
export const getRemoveProductTagUrl = ({
  contentId,
  tagId,
}: RemoveProductTagPathParameters) => {
  return `/content-management/api/v1/contents/${contentId}/product-tags/${tagId}`;
};

export const removeProductTag = async (
  { contentId, tagId }: RemoveProductTagPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getRemoveProductTagUrl({ contentId, tagId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRemoveProductTagMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeProductTag>>,
    TError,
    { pathParams: RemoveProductTagPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeProductTag>>,
  TError,
  { pathParams: RemoveProductTagPathParameters },
  TContext
> => {
  const mutationKey = ["removeProductTag"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeProductTag>>,
    { pathParams: RemoveProductTagPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return removeProductTag(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveProductTagMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeProductTag>>
>;

export type RemoveProductTagMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Content] Remove Product Tag
 */
export const useRemoveProductTag = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeProductTag>>,
      TError,
      { pathParams: RemoveProductTagPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeProductTag>>,
  TError,
  { pathParams: RemoveProductTagPathParameters },
  TContext
> => {
  const mutationOptions = getRemoveProductTagMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Content] Schedule Content
 */
export const getScheduleContentUrl = ({
  contentId,
}: ScheduleContentPathParameters) => {
  return `/content-management/api/v1/contents/${contentId}/schedule`;
};

export const scheduleContent = async (
  { contentId }: ScheduleContentPathParameters,
  contentManagementAPIModelsScheduleRequest: ContentManagementAPIModelsScheduleRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsContentResponse>(
    getScheduleContentUrl({ contentId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsScheduleRequest),
    },
  );
};

export const getScheduleContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleContent>>,
    TError,
    {
      pathParams: ScheduleContentPathParameters;
      data: ContentManagementAPIModelsScheduleRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleContent>>,
  TError,
  {
    pathParams: ScheduleContentPathParameters;
    data: ContentManagementAPIModelsScheduleRequest;
  },
  TContext
> => {
  const mutationKey = ["scheduleContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleContent>>,
    {
      pathParams: ScheduleContentPathParameters;
      data: ContentManagementAPIModelsScheduleRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return scheduleContent(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleContent>>
>;
export type ScheduleContentMutationBody =
  ContentManagementAPIModelsScheduleRequest;
export type ScheduleContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Content] Schedule Content
 */
export const useScheduleContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scheduleContent>>,
      TError,
      {
        pathParams: ScheduleContentPathParameters;
        data: ContentManagementAPIModelsScheduleRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scheduleContent>>,
  TError,
  {
    pathParams: ScheduleContentPathParameters;
    data: ContentManagementAPIModelsScheduleRequest;
  },
  TContext
> => {
  const mutationOptions = getScheduleContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Content] Search Contents
 */
export const getSearchContentsUrl = (params?: SearchContentsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/content-management/api/v1/contents/search?${stringifiedParams}`
    : `/content-management/api/v1/contents/search`;
};

export const searchContents = async (
  params?: SearchContentsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsContentResponse>(
    getSearchContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSearchContentsQueryKey = (params?: SearchContentsParams) => {
  return [
    "content-management",
    "api",
    "v1",
    "contents",
    "search",
    ...(params ? [params] : []),
  ] as const;
};

export const useSearchContentsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof searchContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchContentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchContents>>> = ({
    signal,
  }) => searchContents(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchContents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchContentsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchContents>>
>;
export type SearchContentsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useSearchContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | SearchContentsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchContents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchContents>>,
          TError,
          Awaited<ReturnType<typeof searchContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchContents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchContents>>,
          TError,
          Awaited<ReturnType<typeof searchContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Search Contents
 */

export function useSearchContentsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchContents>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useSearchContentsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Search Contents
 */
export const prefetchSearchContentsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchContents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useSearchContentsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useSearchContentsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchContentsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchContents>>> = ({
    signal,
  }) => searchContents(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof searchContents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchContentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchContents>>
>;
export type SearchContentsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useSearchContents<
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | SearchContentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchContents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchContents>>,
          TError,
          Awaited<ReturnType<typeof searchContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchContents<
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchContents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchContents>>,
          TError,
          Awaited<ReturnType<typeof searchContents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchContents<
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Content] Search Contents
 */

export function useSearchContents<
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useSearchContentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Content] Search Contents
 */
export const prefetchSearchContentsQuery = async <
  TData = Awaited<ReturnType<typeof searchContents>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: SearchContentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchContents>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useSearchContentsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
