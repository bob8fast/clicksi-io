/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ContentManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsSocialContentResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ContentManagementAPIModelsContentResponse,
  ContentManagementAPIModelsImportSocialContentRequest,
  ContentManagementAPIModelsSocialAccountConnectRequest,
  ContentManagementAPIModelsSocialAccountResponse,
  DisconnectSocialAccountPathParameters,
  GetAvailableSocialContentParams,
  GetAvailableSocialContentPathParameters,
  ImportSocialContentPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [Social Account] Connect Social Account
 */
export const getConnectSocialAccountUrl = () => {
  return `/content-management/api/v1/social-accounts`;
};

export const connectSocialAccount = async (
  contentManagementAPIModelsSocialAccountConnectRequest: ContentManagementAPIModelsSocialAccountConnectRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsSocialAccountResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsSocialAccountResponse>(
    getConnectSocialAccountUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        contentManagementAPIModelsSocialAccountConnectRequest,
      ),
    },
  );
};

export const getConnectSocialAccountMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof connectSocialAccount>>,
    TError,
    { data: ContentManagementAPIModelsSocialAccountConnectRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof connectSocialAccount>>,
  TError,
  { data: ContentManagementAPIModelsSocialAccountConnectRequest },
  TContext
> => {
  const mutationKey = ["connectSocialAccount"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof connectSocialAccount>>,
    { data: ContentManagementAPIModelsSocialAccountConnectRequest }
  > = (props) => {
    const { data } = props ?? {};

    return connectSocialAccount(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConnectSocialAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof connectSocialAccount>>
>;
export type ConnectSocialAccountMutationBody =
  ContentManagementAPIModelsSocialAccountConnectRequest;
export type ConnectSocialAccountMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Social Account] Connect Social Account
 */
export const useConnectSocialAccount = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof connectSocialAccount>>,
      TError,
      { data: ContentManagementAPIModelsSocialAccountConnectRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof connectSocialAccount>>,
  TError,
  { data: ContentManagementAPIModelsSocialAccountConnectRequest },
  TContext
> => {
  const mutationOptions = getConnectSocialAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Social Account] Get Connected Accounts
 */
export const getGetConnectedAccountsUrl = () => {
  return `/content-management/api/v1/social-accounts`;
};

export const getConnectedAccounts = async (
  options?: RequestInit,
): Promise<ContentManagementAPIModelsSocialAccountResponse[]> => {
  return gatewayServiceCustomFetch<
    ContentManagementAPIModelsSocialAccountResponse[]
  >(getGetConnectedAccountsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetConnectedAccountsQueryKey = () => {
  return ["content-management", "api", "v1", "social-accounts"] as const;
};

export const useGetConnectedAccountsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectedAccounts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getConnectedAccounts>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConnectedAccountsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConnectedAccounts>>
  > = ({ signal }) => getConnectedAccounts({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConnectedAccounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConnectedAccountsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConnectedAccounts>>
>;
export type GetConnectedAccountsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConnectedAccountsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectedAccounts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectedAccounts>>,
          TError,
          Awaited<ReturnType<typeof getConnectedAccounts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectedAccountsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectedAccounts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectedAccounts>>,
          TError,
          Awaited<ReturnType<typeof getConnectedAccounts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectedAccountsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectedAccounts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Social Account] Get Connected Accounts
 */

export function useGetConnectedAccountsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectedAccounts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConnectedAccountsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Social Account] Get Connected Accounts
 */
export const prefetchGetConnectedAccountsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConnectedAccountsInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConnectedAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getConnectedAccounts>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConnectedAccountsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConnectedAccounts>>
  > = ({ signal }) => getConnectedAccounts({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConnectedAccounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConnectedAccountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConnectedAccounts>>
>;
export type GetConnectedAccountsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConnectedAccounts<
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectedAccounts>>,
          TError,
          Awaited<ReturnType<typeof getConnectedAccounts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectedAccounts<
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectedAccounts>>,
          TError,
          Awaited<ReturnType<typeof getConnectedAccounts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectedAccounts<
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Social Account] Get Connected Accounts
 */

export function useGetConnectedAccounts<
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConnectedAccountsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Social Account] Get Connected Accounts
 */
export const prefetchGetConnectedAccountsQuery = async <
  TData = Awaited<ReturnType<typeof getConnectedAccounts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectedAccounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConnectedAccountsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Social Account] Disconnect Social Account
 */
export const getDisconnectSocialAccountUrl = ({
  accountId,
}: DisconnectSocialAccountPathParameters) => {
  return `/content-management/api/v1/social-accounts/${accountId}`;
};

export const disconnectSocialAccount = async (
  { accountId }: DisconnectSocialAccountPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getDisconnectSocialAccountUrl({ accountId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDisconnectSocialAccountMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof disconnectSocialAccount>>,
    TError,
    { pathParams: DisconnectSocialAccountPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof disconnectSocialAccount>>,
  TError,
  { pathParams: DisconnectSocialAccountPathParameters },
  TContext
> => {
  const mutationKey = ["disconnectSocialAccount"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof disconnectSocialAccount>>,
    { pathParams: DisconnectSocialAccountPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return disconnectSocialAccount(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DisconnectSocialAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof disconnectSocialAccount>>
>;

export type DisconnectSocialAccountMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Social Account] Disconnect Social Account
 */
export const useDisconnectSocialAccount = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof disconnectSocialAccount>>,
      TError,
      { pathParams: DisconnectSocialAccountPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof disconnectSocialAccount>>,
  TError,
  { pathParams: DisconnectSocialAccountPathParameters },
  TContext
> => {
  const mutationOptions = getDisconnectSocialAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Social Account] Get Available Social Content
 */
export const getGetAvailableSocialContentUrl = (
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/content-management/api/v1/social-accounts/${accountId}/available-content?${stringifiedParams}`
    : `/content-management/api/v1/social-accounts/${accountId}/available-content`;
};

export const getAvailableSocialContent = async (
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsSocialContentResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsSocialContentResponse>(
    getGetAvailableSocialContentUrl({ accountId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetAvailableSocialContentQueryKey = (
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
) => {
  return [
    "content-management",
    "api",
    "v1",
    "social-accounts",
    accountId,
    "available-content",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetAvailableSocialContentInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAvailableSocialContent>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAvailableSocialContentQueryKey({ accountId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAvailableSocialContent>>
  > = ({ signal }) =>
    getAvailableSocialContent({ accountId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAvailableSocialContent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAvailableSocialContentInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAvailableSocialContent>>
>;
export type GetAvailableSocialContentInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAvailableSocialContentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAvailableSocialContent>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAvailableSocialContentPathParameters,
  params: undefined | GetAvailableSocialContentParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableSocialContent>>,
          TError,
          Awaited<ReturnType<typeof getAvailableSocialContent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAvailableSocialContentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAvailableSocialContent>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableSocialContent>>,
          TError,
          Awaited<ReturnType<typeof getAvailableSocialContent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAvailableSocialContentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAvailableSocialContent>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Social Account] Get Available Social Content
 */

export function useGetAvailableSocialContentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAvailableSocialContent>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAvailableSocialContentInfiniteQueryOptions(
    { accountId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Social Account] Get Available Social Content
 */
export const prefetchGetAvailableSocialContentInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAvailableSocialContentInfiniteQueryOptions(
    { accountId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetAvailableSocialContentQueryOptions = <
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAvailableSocialContentQueryKey({ accountId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAvailableSocialContent>>
  > = ({ signal }) =>
    getAvailableSocialContent({ accountId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getAvailableSocialContent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAvailableSocialContentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAvailableSocialContent>>
>;
export type GetAvailableSocialContentQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAvailableSocialContent<
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAvailableSocialContentPathParameters,
  params: undefined | GetAvailableSocialContentParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableSocialContent>>,
          TError,
          Awaited<ReturnType<typeof getAvailableSocialContent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAvailableSocialContent<
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableSocialContent>>,
          TError,
          Awaited<ReturnType<typeof getAvailableSocialContent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAvailableSocialContent<
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Social Account] Get Available Social Content
 */

export function useGetAvailableSocialContent<
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAvailableSocialContentQueryOptions(
    { accountId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Social Account] Get Available Social Content
 */
export const prefetchGetAvailableSocialContentQuery = async <
  TData = Awaited<ReturnType<typeof getAvailableSocialContent>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { accountId }: GetAvailableSocialContentPathParameters,
  params?: GetAvailableSocialContentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableSocialContent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAvailableSocialContentQueryOptions(
    { accountId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Social Account] Import Social Content
 */
export const getImportSocialContentUrl = ({
  accountId,
}: ImportSocialContentPathParameters) => {
  return `/content-management/api/v1/social-accounts/${accountId}/import`;
};

export const importSocialContent = async (
  { accountId }: ImportSocialContentPathParameters,
  contentManagementAPIModelsImportSocialContentRequest: ContentManagementAPIModelsImportSocialContentRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsContentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsContentResponse>(
    getImportSocialContentUrl({ accountId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        contentManagementAPIModelsImportSocialContentRequest,
      ),
    },
  );
};

export const getImportSocialContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importSocialContent>>,
    TError,
    {
      pathParams: ImportSocialContentPathParameters;
      data: ContentManagementAPIModelsImportSocialContentRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof importSocialContent>>,
  TError,
  {
    pathParams: ImportSocialContentPathParameters;
    data: ContentManagementAPIModelsImportSocialContentRequest;
  },
  TContext
> => {
  const mutationKey = ["importSocialContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof importSocialContent>>,
    {
      pathParams: ImportSocialContentPathParameters;
      data: ContentManagementAPIModelsImportSocialContentRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return importSocialContent(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImportSocialContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof importSocialContent>>
>;
export type ImportSocialContentMutationBody =
  ContentManagementAPIModelsImportSocialContentRequest;
export type ImportSocialContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Social Account] Import Social Content
 */
export const useImportSocialContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof importSocialContent>>,
      TError,
      {
        pathParams: ImportSocialContentPathParameters;
        data: ContentManagementAPIModelsImportSocialContentRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof importSocialContent>>,
  TError,
  {
    pathParams: ImportSocialContentPathParameters;
    data: ContentManagementAPIModelsImportSocialContentRequest;
  },
  TContext
> => {
  const mutationOptions = getImportSocialContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
