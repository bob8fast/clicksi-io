/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ContentManagement.API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  AddCommentPathParameters,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ContentManagementAPIModelsCommentCreateRequest,
  ContentManagementAPIModelsCommentResponse,
  ContentManagementAPIModelsCommentUpdateRequest,
  ContentManagementAPIModelsContentReportResponse,
  ContentManagementAPIModelsReportContentRequest,
  ContentManagementAPIModelsSaveContentRequest,
  DeleteCommentPathParameters,
  LikeContentPathParameters,
  ReportContentPathParameters,
  SaveContentPathParameters,
  UnlikeContentPathParameters,
  UnsaveContentPathParameters,
  UpdateCommentPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [Engagement] Update Comment
 */
export const getUpdateCommentUrl = ({
  commentId,
}: UpdateCommentPathParameters) => {
  return `/content-management/api/v1/engagement/comments/${commentId}`;
};

export const updateComment = async (
  { commentId }: UpdateCommentPathParameters,
  contentManagementAPIModelsCommentUpdateRequest: ContentManagementAPIModelsCommentUpdateRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsCommentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsCommentResponse>(
    getUpdateCommentUrl({ commentId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsCommentUpdateRequest),
    },
  );
};

export const getUpdateCommentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComment>>,
    TError,
    {
      pathParams: UpdateCommentPathParameters;
      data: ContentManagementAPIModelsCommentUpdateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  {
    pathParams: UpdateCommentPathParameters;
    data: ContentManagementAPIModelsCommentUpdateRequest;
  },
  TContext
> => {
  const mutationKey = ["updateComment"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateComment>>,
    {
      pathParams: UpdateCommentPathParameters;
      data: ContentManagementAPIModelsCommentUpdateRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateComment(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateComment>>
>;
export type UpdateCommentMutationBody =
  ContentManagementAPIModelsCommentUpdateRequest;
export type UpdateCommentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Update Comment
 */
export const useUpdateComment = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateComment>>,
      TError,
      {
        pathParams: UpdateCommentPathParameters;
        data: ContentManagementAPIModelsCommentUpdateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateComment>>,
  TError,
  {
    pathParams: UpdateCommentPathParameters;
    data: ContentManagementAPIModelsCommentUpdateRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Delete Comment
 */
export const getDeleteCommentUrl = ({
  commentId,
}: DeleteCommentPathParameters) => {
  return `/content-management/api/v1/engagement/comments/${commentId}`;
};

export const deleteComment = async (
  { commentId }: DeleteCommentPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteCommentUrl({ commentId }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteCommentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteComment>>,
    TError,
    { pathParams: DeleteCommentPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteComment>>,
  TError,
  { pathParams: DeleteCommentPathParameters },
  TContext
> => {
  const mutationKey = ["deleteComment"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteComment>>,
    { pathParams: DeleteCommentPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteComment(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteComment>>
>;

export type DeleteCommentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Delete Comment
 */
export const useDeleteComment = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteComment>>,
      TError,
      { pathParams: DeleteCommentPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteComment>>,
  TError,
  { pathParams: DeleteCommentPathParameters },
  TContext
> => {
  const mutationOptions = getDeleteCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Add Comment
 */
export const getAddCommentUrl = ({ contentId }: AddCommentPathParameters) => {
  return `/content-management/api/v1/engagement/contents/${contentId}/comments`;
};

export const addComment = async (
  { contentId }: AddCommentPathParameters,
  contentManagementAPIModelsCommentCreateRequest: ContentManagementAPIModelsCommentCreateRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsCommentResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsCommentResponse>(
    getAddCommentUrl({ contentId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsCommentCreateRequest),
    },
  );
};

export const getAddCommentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addComment>>,
    TError,
    {
      pathParams: AddCommentPathParameters;
      data: ContentManagementAPIModelsCommentCreateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addComment>>,
  TError,
  {
    pathParams: AddCommentPathParameters;
    data: ContentManagementAPIModelsCommentCreateRequest;
  },
  TContext
> => {
  const mutationKey = ["addComment"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addComment>>,
    {
      pathParams: AddCommentPathParameters;
      data: ContentManagementAPIModelsCommentCreateRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return addComment(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof addComment>>
>;
export type AddCommentMutationBody =
  ContentManagementAPIModelsCommentCreateRequest;
export type AddCommentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Add Comment
 */
export const useAddComment = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addComment>>,
      TError,
      {
        pathParams: AddCommentPathParameters;
        data: ContentManagementAPIModelsCommentCreateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addComment>>,
  TError,
  {
    pathParams: AddCommentPathParameters;
    data: ContentManagementAPIModelsCommentCreateRequest;
  },
  TContext
> => {
  const mutationOptions = getAddCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Like Content
 */
export const getLikeContentUrl = ({ contentId }: LikeContentPathParameters) => {
  return `/content-management/api/v1/engagement/contents/${contentId}/like`;
};

export const likeContent = async (
  { contentId }: LikeContentPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getLikeContentUrl({ contentId }), {
    ...options,
    method: "POST",
  });
};

export const getLikeContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof likeContent>>,
    TError,
    { pathParams: LikeContentPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof likeContent>>,
  TError,
  { pathParams: LikeContentPathParameters },
  TContext
> => {
  const mutationKey = ["likeContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof likeContent>>,
    { pathParams: LikeContentPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return likeContent(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LikeContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof likeContent>>
>;

export type LikeContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Like Content
 */
export const useLikeContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof likeContent>>,
      TError,
      { pathParams: LikeContentPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof likeContent>>,
  TError,
  { pathParams: LikeContentPathParameters },
  TContext
> => {
  const mutationOptions = getLikeContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Unlike Content
 */
export const getUnlikeContentUrl = ({
  contentId,
}: UnlikeContentPathParameters) => {
  return `/content-management/api/v1/engagement/contents/${contentId}/like`;
};

export const unlikeContent = async (
  { contentId }: UnlikeContentPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getUnlikeContentUrl({ contentId }), {
    ...options,
    method: "DELETE",
  });
};

export const getUnlikeContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlikeContent>>,
    TError,
    { pathParams: UnlikeContentPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unlikeContent>>,
  TError,
  { pathParams: UnlikeContentPathParameters },
  TContext
> => {
  const mutationKey = ["unlikeContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unlikeContent>>,
    { pathParams: UnlikeContentPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return unlikeContent(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnlikeContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof unlikeContent>>
>;

export type UnlikeContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Unlike Content
 */
export const useUnlikeContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof unlikeContent>>,
      TError,
      { pathParams: UnlikeContentPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof unlikeContent>>,
  TError,
  { pathParams: UnlikeContentPathParameters },
  TContext
> => {
  const mutationOptions = getUnlikeContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Report Content
 */
export const getReportContentUrl = ({
  contentId,
}: ReportContentPathParameters) => {
  return `/content-management/api/v1/engagement/contents/${contentId}/report`;
};

export const reportContent = async (
  { contentId }: ReportContentPathParameters,
  contentManagementAPIModelsReportContentRequest: ContentManagementAPIModelsReportContentRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsContentReportResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsContentReportResponse>(
    getReportContentUrl({ contentId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsReportContentRequest),
    },
  );
};

export const getReportContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reportContent>>,
    TError,
    {
      pathParams: ReportContentPathParameters;
      data: ContentManagementAPIModelsReportContentRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reportContent>>,
  TError,
  {
    pathParams: ReportContentPathParameters;
    data: ContentManagementAPIModelsReportContentRequest;
  },
  TContext
> => {
  const mutationKey = ["reportContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reportContent>>,
    {
      pathParams: ReportContentPathParameters;
      data: ContentManagementAPIModelsReportContentRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return reportContent(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReportContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof reportContent>>
>;
export type ReportContentMutationBody =
  ContentManagementAPIModelsReportContentRequest;
export type ReportContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Report Content
 */
export const useReportContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reportContent>>,
      TError,
      {
        pathParams: ReportContentPathParameters;
        data: ContentManagementAPIModelsReportContentRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof reportContent>>,
  TError,
  {
    pathParams: ReportContentPathParameters;
    data: ContentManagementAPIModelsReportContentRequest;
  },
  TContext
> => {
  const mutationOptions = getReportContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Save Content
 */
export const getSaveContentUrl = ({ contentId }: SaveContentPathParameters) => {
  return `/content-management/api/v1/engagement/contents/${contentId}/save`;
};

export const saveContent = async (
  { contentId }: SaveContentPathParameters,
  contentManagementAPIModelsSaveContentRequest: ContentManagementAPIModelsSaveContentRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getSaveContentUrl({ contentId }), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(contentManagementAPIModelsSaveContentRequest),
  });
};

export const getSaveContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveContent>>,
    TError,
    {
      pathParams: SaveContentPathParameters;
      data: ContentManagementAPIModelsSaveContentRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveContent>>,
  TError,
  {
    pathParams: SaveContentPathParameters;
    data: ContentManagementAPIModelsSaveContentRequest;
  },
  TContext
> => {
  const mutationKey = ["saveContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveContent>>,
    {
      pathParams: SaveContentPathParameters;
      data: ContentManagementAPIModelsSaveContentRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return saveContent(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SaveContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveContent>>
>;
export type SaveContentMutationBody =
  ContentManagementAPIModelsSaveContentRequest;
export type SaveContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Save Content
 */
export const useSaveContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof saveContent>>,
      TError,
      {
        pathParams: SaveContentPathParameters;
        data: ContentManagementAPIModelsSaveContentRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof saveContent>>,
  TError,
  {
    pathParams: SaveContentPathParameters;
    data: ContentManagementAPIModelsSaveContentRequest;
  },
  TContext
> => {
  const mutationOptions = getSaveContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Engagement] Unsave Content
 */
export const getUnsaveContentUrl = ({
  contentId,
}: UnsaveContentPathParameters) => {
  return `/content-management/api/v1/engagement/contents/${contentId}/save`;
};

export const unsaveContent = async (
  { contentId }: UnsaveContentPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getUnsaveContentUrl({ contentId }), {
    ...options,
    method: "DELETE",
  });
};

export const getUnsaveContentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unsaveContent>>,
    TError,
    { pathParams: UnsaveContentPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unsaveContent>>,
  TError,
  { pathParams: UnsaveContentPathParameters },
  TContext
> => {
  const mutationKey = ["unsaveContent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unsaveContent>>,
    { pathParams: UnsaveContentPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return unsaveContent(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnsaveContentMutationResult = NonNullable<
  Awaited<ReturnType<typeof unsaveContent>>
>;

export type UnsaveContentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Engagement] Unsave Content
 */
export const useUnsaveContent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof unsaveContent>>,
      TError,
      { pathParams: UnsaveContentPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof unsaveContent>>,
  TError,
  { pathParams: UnsaveContentPathParameters },
  TContext
> => {
  const mutationOptions = getUnsaveContentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
