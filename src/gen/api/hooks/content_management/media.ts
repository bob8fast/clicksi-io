/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ContentManagement.API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ContentManagementAPIModelsMediaUploadResponse,
  UploadMediaBody,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [Media] Upload Media
 */
export const getUploadMediaUrl = () => {
  return `/content-management/api/v1/media`;
};

export const uploadMedia = async (
  uploadMediaBody: UploadMediaBody,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsMediaUploadResponse> => {
  const formData = new FormData();
  if (uploadMediaBody.file !== undefined) {
    formData.append(`file`, uploadMediaBody.file);
  }

  return gatewayServiceCustomFetch<ContentManagementAPIModelsMediaUploadResponse>(
    getUploadMediaUrl(),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getUploadMediaMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadMedia>>,
    TError,
    { data: UploadMediaBody },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadMedia>>,
  TError,
  { data: UploadMediaBody },
  TContext
> => {
  const mutationKey = ["uploadMedia"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadMedia>>,
    { data: UploadMediaBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadMedia(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadMediaMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadMedia>>
>;
export type UploadMediaMutationBody = UploadMediaBody;
export type UploadMediaMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Media] Upload Media
 */
export const useUploadMedia = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadMedia>>,
      TError,
      { data: UploadMediaBody },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadMedia>>,
  TError,
  { data: UploadMediaBody },
  TContext
> => {
  const mutationOptions = getUploadMediaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
