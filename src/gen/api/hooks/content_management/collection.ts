/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ContentManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AddContentToCollectionPathParameters,
  ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsCollectionResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ContentManagementAPIModelsCollectionContentRequest,
  ContentManagementAPIModelsCollectionContentsOrderRequest,
  ContentManagementAPIModelsCollectionCreateRequest,
  ContentManagementAPIModelsCollectionResponse,
  ContentManagementAPIModelsCollectionUpdateRequest,
  DeleteCollectionPathParameters,
  GetCollectionByIdPathParameters,
  GetCollectionsParams,
  RemoveContentFromCollectionPathParameters,
  ReorderCollectionContentsPathParameters,
  UpdateCollectionPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [Collection] Create Collection
 */
export const getCreateCollectionUrl = () => {
  return `/content-management/api/v1/collections`;
};

export const createCollection = async (
  contentManagementAPIModelsCollectionCreateRequest: ContentManagementAPIModelsCollectionCreateRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsCollectionResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsCollectionResponse>(
    getCreateCollectionUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsCollectionCreateRequest),
    },
  );
};

export const getCreateCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCollection>>,
    TError,
    { data: ContentManagementAPIModelsCollectionCreateRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCollection>>,
  TError,
  { data: ContentManagementAPIModelsCollectionCreateRequest },
  TContext
> => {
  const mutationKey = ["createCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCollection>>,
    { data: ContentManagementAPIModelsCollectionCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCollection>>
>;
export type CreateCollectionMutationBody =
  ContentManagementAPIModelsCollectionCreateRequest;
export type CreateCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Collection] Create Collection
 */
export const useCreateCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCollection>>,
      TError,
      { data: ContentManagementAPIModelsCollectionCreateRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCollection>>,
  TError,
  { data: ContentManagementAPIModelsCollectionCreateRequest },
  TContext
> => {
  const mutationOptions = getCreateCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Collection] Get Collections
 */
export const getGetCollectionsUrl = (params?: GetCollectionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/content-management/api/v1/collections?${stringifiedParams}`
    : `/content-management/api/v1/collections`;
};

export const getCollections = async (
  params?: GetCollectionsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsCollectionResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResult1ContentManagementAPIModelsCollectionResponse>(
    getGetCollectionsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCollectionsQueryKey = (params?: GetCollectionsParams) => {
  return [
    "content-management",
    "api",
    "v1",
    "collections",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetCollectionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollections>>> = ({
    signal,
  }) => getCollections(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCollections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollections>>
>;
export type GetCollectionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetCollectionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Collection] Get Collections
 */

export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Collection] Get Collections
 */
export const prefetchGetCollectionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCollectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollections>>> = ({
    signal,
  }) => getCollections(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCollections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollections>>
>;
export type GetCollectionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetCollectionsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Collection] Get Collections
 */

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Collection] Get Collections
 */
export const prefetchGetCollectionsQuery = async <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Collection] Get Collection By Id
 */
export const getGetCollectionByIdUrl = ({
  collectionId,
}: GetCollectionByIdPathParameters) => {
  return `/content-management/api/v1/collections/${collectionId}`;
};

export const getCollectionById = async (
  { collectionId }: GetCollectionByIdPathParameters,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsCollectionResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsCollectionResponse>(
    getGetCollectionByIdUrl({ collectionId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCollectionByIdQueryKey = ({
  collectionId,
}: GetCollectionByIdPathParameters) => {
  return [
    "content-management",
    "api",
    "v1",
    "collections",
    collectionId,
  ] as const;
};

export const useGetCollectionByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCollectionById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { collectionId }: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCollectionByIdQueryKey({ collectionId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCollectionById>>
  > = ({ signal }) =>
    getCollectionById({ collectionId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCollectionById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollectionById>>
>;
export type GetCollectionByIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollectionByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollectionById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionByIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionById>>,
          TError,
          Awaited<ReturnType<typeof getCollectionById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollectionById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionById>>,
          TError,
          Awaited<ReturnType<typeof getCollectionById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollectionById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Collection] Get Collection By Id
 */

export function useGetCollectionByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollectionById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { collectionId }: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionByIdInfiniteQueryOptions(
    { collectionId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Collection] Get Collection By Id
 */
export const prefetchGetCollectionByIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { collectionId }: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionByIdInfiniteQueryOptions(
    { collectionId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCollectionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { collectionId }: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCollectionByIdQueryKey({ collectionId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCollectionById>>
  > = ({ signal }) =>
    getCollectionById({ collectionId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCollectionById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollectionById>>
>;
export type GetCollectionByIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollectionById<
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionByIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionById>>,
          TError,
          Awaited<ReturnType<typeof getCollectionById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionById<
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionById>>,
          TError,
          Awaited<ReturnType<typeof getCollectionById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionById<
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Collection] Get Collection By Id
 */

export function useGetCollectionById<
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { collectionId }: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionByIdQueryOptions(
    { collectionId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Collection] Get Collection By Id
 */
export const prefetchGetCollectionByIdQuery = async <
  TData = Awaited<ReturnType<typeof getCollectionById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { collectionId }: GetCollectionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCollectionById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionByIdQueryOptions(
    { collectionId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Collection] Update Collection
 */
export const getUpdateCollectionUrl = ({
  collectionId,
}: UpdateCollectionPathParameters) => {
  return `/content-management/api/v1/collections/${collectionId}`;
};

export const updateCollection = async (
  { collectionId }: UpdateCollectionPathParameters,
  contentManagementAPIModelsCollectionUpdateRequest: ContentManagementAPIModelsCollectionUpdateRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsCollectionResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsCollectionResponse>(
    getUpdateCollectionUrl({ collectionId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsCollectionUpdateRequest),
    },
  );
};

export const getUpdateCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCollection>>,
    TError,
    {
      pathParams: UpdateCollectionPathParameters;
      data: ContentManagementAPIModelsCollectionUpdateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCollection>>,
  TError,
  {
    pathParams: UpdateCollectionPathParameters;
    data: ContentManagementAPIModelsCollectionUpdateRequest;
  },
  TContext
> => {
  const mutationKey = ["updateCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCollection>>,
    {
      pathParams: UpdateCollectionPathParameters;
      data: ContentManagementAPIModelsCollectionUpdateRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateCollection(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCollection>>
>;
export type UpdateCollectionMutationBody =
  ContentManagementAPIModelsCollectionUpdateRequest;
export type UpdateCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Collection] Update Collection
 */
export const useUpdateCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCollection>>,
      TError,
      {
        pathParams: UpdateCollectionPathParameters;
        data: ContentManagementAPIModelsCollectionUpdateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateCollection>>,
  TError,
  {
    pathParams: UpdateCollectionPathParameters;
    data: ContentManagementAPIModelsCollectionUpdateRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Collection] Delete Collection
 */
export const getDeleteCollectionUrl = ({
  collectionId,
}: DeleteCollectionPathParameters) => {
  return `/content-management/api/v1/collections/${collectionId}`;
};

export const deleteCollection = async (
  { collectionId }: DeleteCollectionPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getDeleteCollectionUrl({ collectionId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCollection>>,
    TError,
    { pathParams: DeleteCollectionPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCollection>>,
  TError,
  { pathParams: DeleteCollectionPathParameters },
  TContext
> => {
  const mutationKey = ["deleteCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCollection>>,
    { pathParams: DeleteCollectionPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteCollection(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCollection>>
>;

export type DeleteCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Collection] Delete Collection
 */
export const useDeleteCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCollection>>,
      TError,
      { pathParams: DeleteCollectionPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCollection>>,
  TError,
  { pathParams: DeleteCollectionPathParameters },
  TContext
> => {
  const mutationOptions = getDeleteCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Collection] Add Content To Collection
 */
export const getAddContentToCollectionUrl = ({
  collectionId,
}: AddContentToCollectionPathParameters) => {
  return `/content-management/api/v1/collections/${collectionId}/contents`;
};

export const addContentToCollection = async (
  { collectionId }: AddContentToCollectionPathParameters,
  contentManagementAPIModelsCollectionContentRequest: ContentManagementAPIModelsCollectionContentRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getAddContentToCollectionUrl({ collectionId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(contentManagementAPIModelsCollectionContentRequest),
    },
  );
};

export const getAddContentToCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addContentToCollection>>,
    TError,
    {
      pathParams: AddContentToCollectionPathParameters;
      data: ContentManagementAPIModelsCollectionContentRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addContentToCollection>>,
  TError,
  {
    pathParams: AddContentToCollectionPathParameters;
    data: ContentManagementAPIModelsCollectionContentRequest;
  },
  TContext
> => {
  const mutationKey = ["addContentToCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addContentToCollection>>,
    {
      pathParams: AddContentToCollectionPathParameters;
      data: ContentManagementAPIModelsCollectionContentRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return addContentToCollection(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddContentToCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof addContentToCollection>>
>;
export type AddContentToCollectionMutationBody =
  ContentManagementAPIModelsCollectionContentRequest;
export type AddContentToCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Collection] Add Content To Collection
 */
export const useAddContentToCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addContentToCollection>>,
      TError,
      {
        pathParams: AddContentToCollectionPathParameters;
        data: ContentManagementAPIModelsCollectionContentRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addContentToCollection>>,
  TError,
  {
    pathParams: AddContentToCollectionPathParameters;
    data: ContentManagementAPIModelsCollectionContentRequest;
  },
  TContext
> => {
  const mutationOptions = getAddContentToCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Collection] Remove Content From Collection
 */
export const getRemoveContentFromCollectionUrl = ({
  collectionId,
  contentId,
}: RemoveContentFromCollectionPathParameters) => {
  return `/content-management/api/v1/collections/${collectionId}/contents/${contentId}`;
};

export const removeContentFromCollection = async (
  { collectionId, contentId }: RemoveContentFromCollectionPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getRemoveContentFromCollectionUrl({ collectionId, contentId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRemoveContentFromCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeContentFromCollection>>,
    TError,
    { pathParams: RemoveContentFromCollectionPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeContentFromCollection>>,
  TError,
  { pathParams: RemoveContentFromCollectionPathParameters },
  TContext
> => {
  const mutationKey = ["removeContentFromCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeContentFromCollection>>,
    { pathParams: RemoveContentFromCollectionPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return removeContentFromCollection(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveContentFromCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeContentFromCollection>>
>;

export type RemoveContentFromCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Collection] Remove Content From Collection
 */
export const useRemoveContentFromCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeContentFromCollection>>,
      TError,
      { pathParams: RemoveContentFromCollectionPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeContentFromCollection>>,
  TError,
  { pathParams: RemoveContentFromCollectionPathParameters },
  TContext
> => {
  const mutationOptions =
    getRemoveContentFromCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Collection] Reorder Collection Contents
 */
export const getReorderCollectionContentsUrl = ({
  collectionId,
}: ReorderCollectionContentsPathParameters) => {
  return `/content-management/api/v1/collections/${collectionId}/contents/order`;
};

export const reorderCollectionContents = async (
  { collectionId }: ReorderCollectionContentsPathParameters,
  contentManagementAPIModelsCollectionContentsOrderRequest: ContentManagementAPIModelsCollectionContentsOrderRequest,
  options?: RequestInit,
): Promise<ContentManagementAPIModelsCollectionResponse> => {
  return gatewayServiceCustomFetch<ContentManagementAPIModelsCollectionResponse>(
    getReorderCollectionContentsUrl({ collectionId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        contentManagementAPIModelsCollectionContentsOrderRequest,
      ),
    },
  );
};

export const getReorderCollectionContentsMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reorderCollectionContents>>,
    TError,
    {
      pathParams: ReorderCollectionContentsPathParameters;
      data: ContentManagementAPIModelsCollectionContentsOrderRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reorderCollectionContents>>,
  TError,
  {
    pathParams: ReorderCollectionContentsPathParameters;
    data: ContentManagementAPIModelsCollectionContentsOrderRequest;
  },
  TContext
> => {
  const mutationKey = ["reorderCollectionContents"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reorderCollectionContents>>,
    {
      pathParams: ReorderCollectionContentsPathParameters;
      data: ContentManagementAPIModelsCollectionContentsOrderRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return reorderCollectionContents(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReorderCollectionContentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof reorderCollectionContents>>
>;
export type ReorderCollectionContentsMutationBody =
  ContentManagementAPIModelsCollectionContentsOrderRequest;
export type ReorderCollectionContentsMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Collection] Reorder Collection Contents
 */
export const useReorderCollectionContents = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reorderCollectionContents>>,
      TError,
      {
        pathParams: ReorderCollectionContentsPathParameters;
        data: ContentManagementAPIModelsCollectionContentsOrderRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof reorderCollectionContents>>,
  TError,
  {
    pathParams: ReorderCollectionContentsPathParameters;
    data: ContentManagementAPIModelsCollectionContentsOrderRequest;
  },
  TContext
> => {
  const mutationOptions = getReorderCollectionContentsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
