/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AuthService.API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  AuthServiceAPICQRSCommandsAccountRegisterAccountResult,
  AuthServiceAPIModelsRequestsChangePasswordRequest,
  AuthServiceAPIModelsRequestsCreateAdminRequest,
  AuthServiceAPIModelsRequestsRegisterAccountRequest,
  AuthServiceAPIModelsResponsesAdminCreationResponse,
  AuthServiceDomainModelsForgotPasswordRequest,
  AuthServiceDomainModelsResetPasswordRequest,
  ClicksiDataContractsCommonDtoApiResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Changes user password
 */
export const getChangePasswordUrl = () => {
  return `/auth/api/v1/accounts/change-password`;
};

export const changePassword = async (
  authServiceAPIModelsRequestsChangePasswordRequest: AuthServiceAPIModelsRequestsChangePasswordRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getChangePasswordUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceAPIModelsRequestsChangePasswordRequest),
    },
  );
};

export const getChangePasswordMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: AuthServiceAPIModelsRequestsChangePasswordRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: AuthServiceAPIModelsRequestsChangePasswordRequest },
  TContext
> => {
  const mutationKey = ["changePassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: AuthServiceAPIModelsRequestsChangePasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return changePassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePassword>>
>;
export type ChangePasswordMutationBody =
  AuthServiceAPIModelsRequestsChangePasswordRequest;
export type ChangePasswordMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Changes user password
 */
export const useChangePassword = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof changePassword>>,
      TError,
      { data: AuthServiceAPIModelsRequestsChangePasswordRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: AuthServiceAPIModelsRequestsChangePasswordRequest },
  TContext
> => {
  const mutationOptions = getChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Creates a new admin user account with authentication roles and claims
This only handles the authentication/identity side - user management is handled in UserManagement service
 */
export const getCreateAdminAccountUrl = () => {
  return `/auth/api/v1/accounts/create-admin`;
};

export const createAdminAccount = async (
  authServiceAPIModelsRequestsCreateAdminRequest: AuthServiceAPIModelsRequestsCreateAdminRequest,
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesAdminCreationResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesAdminCreationResponse>(
    getCreateAdminAccountUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceAPIModelsRequestsCreateAdminRequest),
    },
  );
};

export const getCreateAdminAccountMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdminAccount>>,
    TError,
    { data: AuthServiceAPIModelsRequestsCreateAdminRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdminAccount>>,
  TError,
  { data: AuthServiceAPIModelsRequestsCreateAdminRequest },
  TContext
> => {
  const mutationKey = ["createAdminAccount"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdminAccount>>,
    { data: AuthServiceAPIModelsRequestsCreateAdminRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createAdminAccount(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAdminAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdminAccount>>
>;
export type CreateAdminAccountMutationBody =
  AuthServiceAPIModelsRequestsCreateAdminRequest;
export type CreateAdminAccountMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Creates a new admin user account with authentication roles and claims
This only handles the authentication/identity side - user management is handled in UserManagement service
 */
export const useCreateAdminAccount = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdminAccount>>,
      TError,
      { data: AuthServiceAPIModelsRequestsCreateAdminRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdminAccount>>,
  TError,
  { data: AuthServiceAPIModelsRequestsCreateAdminRequest },
  TContext
> => {
  const mutationOptions = getCreateAdminAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Initiates password reset
 */
export const getForgotPasswordUrl = () => {
  return `/auth/api/v1/accounts/forgot-password`;
};

export const forgotPassword = async (
  authServiceDomainModelsForgotPasswordRequest: AuthServiceDomainModelsForgotPasswordRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getForgotPasswordUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceDomainModelsForgotPasswordRequest),
    },
  );
};

export const getForgotPasswordMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPassword>>,
    TError,
    { data: AuthServiceDomainModelsForgotPasswordRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof forgotPassword>>,
  TError,
  { data: AuthServiceDomainModelsForgotPasswordRequest },
  TContext
> => {
  const mutationKey = ["forgotPassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof forgotPassword>>,
    { data: AuthServiceDomainModelsForgotPasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return forgotPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof forgotPassword>>
>;
export type ForgotPasswordMutationBody =
  AuthServiceDomainModelsForgotPasswordRequest;
export type ForgotPasswordMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Initiates password reset
 */
export const useForgotPassword = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof forgotPassword>>,
      TError,
      { data: AuthServiceDomainModelsForgotPasswordRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof forgotPassword>>,
  TError,
  { data: AuthServiceDomainModelsForgotPasswordRequest },
  TContext
> => {
  const mutationOptions = getForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Registers a new user
 */
export const getRegisterAccountUrl = () => {
  return `/auth/api/v1/accounts/register`;
};

export const registerAccount = async (
  authServiceAPIModelsRequestsRegisterAccountRequest: AuthServiceAPIModelsRequestsRegisterAccountRequest,
  options?: RequestInit,
): Promise<AuthServiceAPICQRSCommandsAccountRegisterAccountResult> => {
  return gatewayServiceCustomFetch<AuthServiceAPICQRSCommandsAccountRegisterAccountResult>(
    getRegisterAccountUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceAPIModelsRequestsRegisterAccountRequest),
    },
  );
};

export const getRegisterAccountMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerAccount>>,
    TError,
    { data: AuthServiceAPIModelsRequestsRegisterAccountRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerAccount>>,
  TError,
  { data: AuthServiceAPIModelsRequestsRegisterAccountRequest },
  TContext
> => {
  const mutationKey = ["registerAccount"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerAccount>>,
    { data: AuthServiceAPIModelsRequestsRegisterAccountRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerAccount(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerAccount>>
>;
export type RegisterAccountMutationBody =
  AuthServiceAPIModelsRequestsRegisterAccountRequest;
export type RegisterAccountMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Registers a new user
 */
export const useRegisterAccount = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerAccount>>,
      TError,
      { data: AuthServiceAPIModelsRequestsRegisterAccountRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerAccount>>,
  TError,
  { data: AuthServiceAPIModelsRequestsRegisterAccountRequest },
  TContext
> => {
  const mutationOptions = getRegisterAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Completes password reset
 */
export const getResetPasswordUrl = () => {
  return `/auth/api/v1/accounts/reset-password`;
};

export const resetPassword = async (
  authServiceDomainModelsResetPasswordRequest: AuthServiceDomainModelsResetPasswordRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getResetPasswordUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceDomainModelsResetPasswordRequest),
    },
  );
};

export const getResetPasswordMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: AuthServiceDomainModelsResetPasswordRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: AuthServiceDomainModelsResetPasswordRequest },
  TContext
> => {
  const mutationKey = ["resetPassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { data: AuthServiceDomainModelsResetPasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return resetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetPassword>>
>;
export type ResetPasswordMutationBody =
  AuthServiceDomainModelsResetPasswordRequest;
export type ResetPasswordMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Completes password reset
 */
export const useResetPassword = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resetPassword>>,
      TError,
      { data: AuthServiceDomainModelsResetPasswordRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: AuthServiceDomainModelsResetPasswordRequest },
  TContext
> => {
  const mutationOptions = getResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
