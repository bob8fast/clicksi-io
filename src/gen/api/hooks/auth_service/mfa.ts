/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AuthService.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AuthServiceAPIModelsRequestsCompleteMfaSetupRequest,
  AuthServiceAPIModelsRequestsDisableMfaProviderRequest,
  AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest,
  AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest,
  AuthServiceAPIModelsRequestsSetupMfaProviderRequest,
  AuthServiceAPIModelsResponsesMfaCodeSendResponse,
  AuthServiceAPIModelsResponsesMfaOperationResponse,
  AuthServiceAPIModelsResponsesMfaSetupResponse,
  AuthServiceAPIModelsResponsesRecoveryCodesCountResponse,
  AuthServiceAPIModelsResponsesRecoveryCodesResponse,
  AuthServiceDomainMfaChallenge,
  AuthServiceDomainMfaStatusResponse,
  AuthServiceDomainSendSmsRequest,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Generates an MFA challenge for the specified provider
 */
export const getGenerateMfaChallengeUrl = () => {
  return `/auth/api/v1/mfa/challenge`;
};

export const generateMfaChallenge = async (
  authServiceAPIModelsRequestsGenerateMfaChallengeRequest: AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest,
  options?: RequestInit,
): Promise<AuthServiceDomainMfaChallenge> => {
  return gatewayServiceCustomFetch<AuthServiceDomainMfaChallenge>(
    getGenerateMfaChallengeUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        authServiceAPIModelsRequestsGenerateMfaChallengeRequest,
      ),
    },
  );
};

export const getGenerateMfaChallengeMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateMfaChallenge>>,
    TError,
    { data: AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateMfaChallenge>>,
  TError,
  { data: AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest },
  TContext
> => {
  const mutationKey = ["generateMfaChallenge"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateMfaChallenge>>,
    { data: AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return generateMfaChallenge(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateMfaChallengeMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateMfaChallenge>>
>;
export type GenerateMfaChallengeMutationBody =
  AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest;
export type GenerateMfaChallengeMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Generates an MFA challenge for the specified provider
 */
export const useGenerateMfaChallenge = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateMfaChallenge>>,
      TError,
      { data: AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof generateMfaChallenge>>,
  TError,
  { data: AuthServiceAPIModelsRequestsGenerateMfaChallengeRequest },
  TContext
> => {
  const mutationOptions = getGenerateMfaChallengeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Disables all MFA for the user
 */
export const getDisableMfaUrl = () => {
  return `/auth/api/v1/mfa/disable`;
};

export const disableMfa = async (
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaOperationResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaOperationResponse>(
    getDisableMfaUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getDisableMfaMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof disableMfa>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof disableMfa>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["disableMfa"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof disableMfa>>,
    void
  > = () => {
    return disableMfa(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DisableMfaMutationResult = NonNullable<
  Awaited<ReturnType<typeof disableMfa>>
>;

export type DisableMfaMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Disables all MFA for the user
 */
export const useDisableMfa = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof disableMfa>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof disableMfa>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDisableMfaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Disables a specific MFA provider
 */
export const getDisableMfaProviderUrl = () => {
  return `/auth/api/v1/mfa/disable-provider`;
};

export const disableMfaProvider = async (
  authServiceAPIModelsRequestsDisableMfaProviderRequest: AuthServiceAPIModelsRequestsDisableMfaProviderRequest,
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaOperationResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaOperationResponse>(
    getDisableMfaProviderUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        authServiceAPIModelsRequestsDisableMfaProviderRequest,
      ),
    },
  );
};

export const getDisableMfaProviderMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof disableMfaProvider>>,
    TError,
    { data: AuthServiceAPIModelsRequestsDisableMfaProviderRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof disableMfaProvider>>,
  TError,
  { data: AuthServiceAPIModelsRequestsDisableMfaProviderRequest },
  TContext
> => {
  const mutationKey = ["disableMfaProvider"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof disableMfaProvider>>,
    { data: AuthServiceAPIModelsRequestsDisableMfaProviderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return disableMfaProvider(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DisableMfaProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof disableMfaProvider>>
>;
export type DisableMfaProviderMutationBody =
  AuthServiceAPIModelsRequestsDisableMfaProviderRequest;
export type DisableMfaProviderMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Disables a specific MFA provider
 */
export const useDisableMfaProvider = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof disableMfaProvider>>,
      TError,
      { data: AuthServiceAPIModelsRequestsDisableMfaProviderRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof disableMfaProvider>>,
  TError,
  { data: AuthServiceAPIModelsRequestsDisableMfaProviderRequest },
  TContext
> => {
  const mutationOptions = getDisableMfaProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Sets the preferred MFA provider for the user
 */
export const getSetPreferredMfaProviderUrl = () => {
  return `/auth/api/v1/mfa/preferred-provider`;
};

export const setPreferredMfaProvider = async (
  authServiceAPIModelsRequestsSetPreferredMfaProviderRequest: AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest,
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaOperationResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaOperationResponse>(
    getSetPreferredMfaProviderUrl(),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        authServiceAPIModelsRequestsSetPreferredMfaProviderRequest,
      ),
    },
  );
};

export const getSetPreferredMfaProviderMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setPreferredMfaProvider>>,
    TError,
    { data: AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setPreferredMfaProvider>>,
  TError,
  { data: AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest },
  TContext
> => {
  const mutationKey = ["setPreferredMfaProvider"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setPreferredMfaProvider>>,
    { data: AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return setPreferredMfaProvider(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetPreferredMfaProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof setPreferredMfaProvider>>
>;
export type SetPreferredMfaProviderMutationBody =
  AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest;
export type SetPreferredMfaProviderMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Sets the preferred MFA provider for the user
 */
export const useSetPreferredMfaProvider = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setPreferredMfaProvider>>,
      TError,
      { data: AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof setPreferredMfaProvider>>,
  TError,
  { data: AuthServiceAPIModelsRequestsSetPreferredMfaProviderRequest },
  TContext
> => {
  const mutationOptions = getSetPreferredMfaProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Generates new recovery codes for the user
 */
export const getGenerateRecoveryCodesUrl = () => {
  return `/auth/api/v1/mfa/recovery-codes`;
};

export const generateRecoveryCodes = async (
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesRecoveryCodesResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesRecoveryCodesResponse>(
    getGenerateRecoveryCodesUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getGenerateRecoveryCodesMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateRecoveryCodes>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateRecoveryCodes>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["generateRecoveryCodes"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateRecoveryCodes>>,
    void
  > = () => {
    return generateRecoveryCodes(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateRecoveryCodesMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateRecoveryCodes>>
>;

export type GenerateRecoveryCodesMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Generates new recovery codes for the user
 */
export const useGenerateRecoveryCodes = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateRecoveryCodes>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof generateRecoveryCodes>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getGenerateRecoveryCodesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Mfa] Get Recovery Codes Count
 */
export const getGetRecoveryCodesCountUrl = () => {
  return `/auth/api/v1/mfa/recovery-codes-count`;
};

export const getRecoveryCodesCount = async (
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesRecoveryCodesCountResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesRecoveryCodesCountResponse>(
    getGetRecoveryCodesCountUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetRecoveryCodesCountQueryKey = () => {
  return ["auth", "api", "v1", "mfa", "recovery-codes-count"] as const;
};

export const useGetRecoveryCodesCountInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRecoveryCodesCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getRecoveryCodesCount>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecoveryCodesCountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecoveryCodesCount>>
  > = ({ signal }) => getRecoveryCodesCount({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRecoveryCodesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRecoveryCodesCountInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecoveryCodesCount>>
>;
export type GetRecoveryCodesCountInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRecoveryCodesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRecoveryCodesCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecoveryCodesCount>>,
          TError,
          Awaited<ReturnType<typeof getRecoveryCodesCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRecoveryCodesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRecoveryCodesCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecoveryCodesCount>>,
          TError,
          Awaited<ReturnType<typeof getRecoveryCodesCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRecoveryCodesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRecoveryCodesCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Mfa] Get Recovery Codes Count
 */

export function useGetRecoveryCodesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRecoveryCodesCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRecoveryCodesCountInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Mfa] Get Recovery Codes Count
 */
export const prefetchGetRecoveryCodesCountInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRecoveryCodesCountInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetRecoveryCodesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRecoveryCodesCount>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecoveryCodesCountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecoveryCodesCount>>
  > = ({ signal }) => getRecoveryCodesCount({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getRecoveryCodesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRecoveryCodesCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecoveryCodesCount>>
>;
export type GetRecoveryCodesCountQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRecoveryCodesCount<
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecoveryCodesCount>>,
          TError,
          Awaited<ReturnType<typeof getRecoveryCodesCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRecoveryCodesCount<
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecoveryCodesCount>>,
          TError,
          Awaited<ReturnType<typeof getRecoveryCodesCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRecoveryCodesCount<
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Mfa] Get Recovery Codes Count
 */

export function useGetRecoveryCodesCount<
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRecoveryCodesCountQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Mfa] Get Recovery Codes Count
 */
export const prefetchGetRecoveryCodesCountQuery = async <
  TData = Awaited<ReturnType<typeof getRecoveryCodesCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecoveryCodesCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRecoveryCodesCountQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Mfa] Send Email Code
 */
export const getSendEmailCodeUrl = () => {
  return `/auth/api/v1/mfa/send-email-code`;
};

export const sendEmailCode = async (
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaCodeSendResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaCodeSendResponse>(
    getSendEmailCodeUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getSendEmailCodeMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmailCode>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendEmailCode>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["sendEmailCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendEmailCode>>,
    void
  > = () => {
    return sendEmailCode(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendEmailCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendEmailCode>>
>;

export type SendEmailCodeMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Mfa] Send Email Code
 */
export const useSendEmailCode = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendEmailCode>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendEmailCode>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSendEmailCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Mfa] Send Sms Code
 */
export const getSendSmsCodeUrl = () => {
  return `/auth/api/v1/mfa/send-sms-code`;
};

export const sendSmsCode = async (
  authServiceDomainSendSmsRequest: AuthServiceDomainSendSmsRequest,
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaCodeSendResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaCodeSendResponse>(
    getSendSmsCodeUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceDomainSendSmsRequest),
    },
  );
};

export const getSendSmsCodeMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendSmsCode>>,
    TError,
    { data: AuthServiceDomainSendSmsRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendSmsCode>>,
  TError,
  { data: AuthServiceDomainSendSmsRequest },
  TContext
> => {
  const mutationKey = ["sendSmsCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendSmsCode>>,
    { data: AuthServiceDomainSendSmsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendSmsCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendSmsCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendSmsCode>>
>;
export type SendSmsCodeMutationBody = AuthServiceDomainSendSmsRequest;
export type SendSmsCodeMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Mfa] Send Sms Code
 */
export const useSendSmsCode = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendSmsCode>>,
      TError,
      { data: AuthServiceDomainSendSmsRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendSmsCode>>,
  TError,
  { data: AuthServiceDomainSendSmsRequest },
  TContext
> => {
  const mutationOptions = getSendSmsCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Initiates MFA provider setup
 */
export const getSetupMfaProviderUrl = () => {
  return `/auth/api/v1/mfa/setup`;
};

export const setupMfaProvider = async (
  authServiceAPIModelsRequestsSetupMfaProviderRequest: AuthServiceAPIModelsRequestsSetupMfaProviderRequest,
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaSetupResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaSetupResponse>(
    getSetupMfaProviderUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceAPIModelsRequestsSetupMfaProviderRequest),
    },
  );
};

export const getSetupMfaProviderMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setupMfaProvider>>,
    TError,
    { data: AuthServiceAPIModelsRequestsSetupMfaProviderRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setupMfaProvider>>,
  TError,
  { data: AuthServiceAPIModelsRequestsSetupMfaProviderRequest },
  TContext
> => {
  const mutationKey = ["setupMfaProvider"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setupMfaProvider>>,
    { data: AuthServiceAPIModelsRequestsSetupMfaProviderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return setupMfaProvider(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetupMfaProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof setupMfaProvider>>
>;
export type SetupMfaProviderMutationBody =
  AuthServiceAPIModelsRequestsSetupMfaProviderRequest;
export type SetupMfaProviderMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Initiates MFA provider setup
 */
export const useSetupMfaProvider = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setupMfaProvider>>,
      TError,
      { data: AuthServiceAPIModelsRequestsSetupMfaProviderRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof setupMfaProvider>>,
  TError,
  { data: AuthServiceAPIModelsRequestsSetupMfaProviderRequest },
  TContext
> => {
  const mutationOptions = getSetupMfaProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Completes MFA provider setup
 */
export const getCompleteMfaSetupUrl = () => {
  return `/auth/api/v1/mfa/setup/complete`;
};

export const completeMfaSetup = async (
  authServiceAPIModelsRequestsCompleteMfaSetupRequest: AuthServiceAPIModelsRequestsCompleteMfaSetupRequest,
  options?: RequestInit,
): Promise<AuthServiceAPIModelsResponsesMfaOperationResponse> => {
  return gatewayServiceCustomFetch<AuthServiceAPIModelsResponsesMfaOperationResponse>(
    getCompleteMfaSetupUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(authServiceAPIModelsRequestsCompleteMfaSetupRequest),
    },
  );
};

export const getCompleteMfaSetupMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof completeMfaSetup>>,
    TError,
    { data: AuthServiceAPIModelsRequestsCompleteMfaSetupRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof completeMfaSetup>>,
  TError,
  { data: AuthServiceAPIModelsRequestsCompleteMfaSetupRequest },
  TContext
> => {
  const mutationKey = ["completeMfaSetup"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof completeMfaSetup>>,
    { data: AuthServiceAPIModelsRequestsCompleteMfaSetupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return completeMfaSetup(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CompleteMfaSetupMutationResult = NonNullable<
  Awaited<ReturnType<typeof completeMfaSetup>>
>;
export type CompleteMfaSetupMutationBody =
  AuthServiceAPIModelsRequestsCompleteMfaSetupRequest;
export type CompleteMfaSetupMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Completes MFA provider setup
 */
export const useCompleteMfaSetup = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof completeMfaSetup>>,
      TError,
      { data: AuthServiceAPIModelsRequestsCompleteMfaSetupRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof completeMfaSetup>>,
  TError,
  { data: AuthServiceAPIModelsRequestsCompleteMfaSetupRequest },
  TContext
> => {
  const mutationOptions = getCompleteMfaSetupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Gets the current user's MFA status
 */
export const getGetMfaStatusUrl = () => {
  return `/auth/api/v1/mfa/status`;
};

export const getMfaStatus = async (
  options?: RequestInit,
): Promise<AuthServiceDomainMfaStatusResponse> => {
  return gatewayServiceCustomFetch<AuthServiceDomainMfaStatusResponse>(
    getGetMfaStatusUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetMfaStatusQueryKey = () => {
  return ["auth", "api", "v1", "mfa", "status"] as const;
};

export const useGetMfaStatusInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getMfaStatus>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getMfaStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMfaStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMfaStatus>>> = ({
    signal,
  }) => getMfaStatus({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getMfaStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMfaStatusInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMfaStatus>>
>;
export type GetMfaStatusInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetMfaStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMfaStatus>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMfaStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMfaStatus>>,
          TError,
          Awaited<ReturnType<typeof getMfaStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMfaStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMfaStatus>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMfaStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMfaStatus>>,
          TError,
          Awaited<ReturnType<typeof getMfaStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMfaStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMfaStatus>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMfaStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets the current user's MFA status
 */

export function useGetMfaStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMfaStatus>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMfaStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetMfaStatusInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets the current user's MFA status
 */
export const prefetchGetMfaStatusInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMfaStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetMfaStatusInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetMfaStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMfaStatus>>, TError, TData>
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMfaStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMfaStatus>>> = ({
    signal,
  }) => getMfaStatus({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getMfaStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMfaStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMfaStatus>>
>;
export type GetMfaStatusQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetMfaStatus<
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMfaStatus>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMfaStatus>>,
          TError,
          Awaited<ReturnType<typeof getMfaStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMfaStatus<
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMfaStatus>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMfaStatus>>,
          TError,
          Awaited<ReturnType<typeof getMfaStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMfaStatus<
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMfaStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets the current user's MFA status
 */

export function useGetMfaStatus<
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMfaStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetMfaStatusQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets the current user's MFA status
 */
export const prefetchGetMfaStatusQuery = async <
  TData = Awaited<ReturnType<typeof getMfaStatus>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMfaStatus>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetMfaStatusQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
