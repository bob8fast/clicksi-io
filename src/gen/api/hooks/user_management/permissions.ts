/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetUserPermissionsPathParameters,
  UserManagementDomainDTOsUserPermissionsDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get user permissions and subscription details
 */
export const getGetUserPermissionsUrl = ({
  userId,
}: GetUserPermissionsPathParameters) => {
  return `/user-management/api/v1/permissions/user/${userId}`;
};

export const getUserPermissions = async (
  { userId }: GetUserPermissionsPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUserPermissionsDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUserPermissionsDto>(
    getGetUserPermissionsUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetUserPermissionsQueryKey = ({
  userId,
}: GetUserPermissionsPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "permissions",
    "user",
    userId,
  ] as const;
};

export const useGetUserPermissionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserPermissionsQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserPermissions>>
  > = ({ signal }) =>
    getUserPermissions({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserPermissionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserPermissions>>
>;
export type GetUserPermissionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserPermissionsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPermissions>>,
          TError,
          Awaited<ReturnType<typeof getUserPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPermissions>>,
          TError,
          Awaited<ReturnType<typeof getUserPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user permissions and subscription details
 */

export function useGetUserPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserPermissionsInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user permissions and subscription details
 */
export const prefetchGetUserPermissionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserPermissionsInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetUserPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserPermissionsQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserPermissions>>
  > = ({ signal }) =>
    getUserPermissions({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserPermissions>>
>;
export type GetUserPermissionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserPermissions<
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserPermissionsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPermissions>>,
          TError,
          Awaited<ReturnType<typeof getUserPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserPermissions<
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPermissions>>,
          TError,
          Awaited<ReturnType<typeof getUserPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserPermissions<
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user permissions and subscription details
 */

export function useGetUserPermissions<
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserPermissionsQueryOptions({ userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user permissions and subscription details
 */
export const prefetchGetUserPermissionsQuery = async <
  TData = Awaited<ReturnType<typeof getUserPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserPermissionsQueryOptions({ userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
