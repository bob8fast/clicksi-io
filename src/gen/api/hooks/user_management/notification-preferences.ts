/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetTeamBasicInfoPathParameters,
  GetTeamMembersPathParameters,
  GetTeamNotificationPreferencesPathParameters,
  GetUserBasicInfoPathParameters,
  GetUserNotificationPreferencesPathParameters,
  UpdateTeamNotificationPreferencesPathParameters,
  UpdateUserNotificationPreferencesPathParameters,
  UserManagementDomainDTOsTeamBasicInfoDto,
  UserManagementDomainDTOsTeamNotificationPreferencesDto,
  UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest,
  UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest,
  UserManagementDomainDTOsUserBasicInfoDto,
  UserManagementDomainDTOsUserNotificationPreferencesDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get team notification preferences
 */
export const getGetTeamNotificationPreferencesUrl = ({
  teamId,
}: GetTeamNotificationPreferencesPathParameters) => {
  return `/user-management/api/v1/notification-preferences/teams/${teamId}`;
};

export const getTeamNotificationPreferences = async (
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTeamNotificationPreferencesDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTeamNotificationPreferencesDto>(
    getGetTeamNotificationPreferencesUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamNotificationPreferencesQueryKey = ({
  teamId,
}: GetTeamNotificationPreferencesPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "notification-preferences",
    "teams",
    teamId,
  ] as const;
};

export const useGetTeamNotificationPreferencesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamNotificationPreferencesQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  > = ({ signal }) =>
    getTeamNotificationPreferences({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamNotificationPreferencesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamNotificationPreferences>>
>;
export type GetTeamNotificationPreferencesInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamNotificationPreferencesPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team notification preferences
 */

export function useGetTeamNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamNotificationPreferencesInfiniteQueryOptions(
    { teamId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team notification preferences
 */
export const prefetchGetTeamNotificationPreferencesInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamNotificationPreferencesInfiniteQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamNotificationPreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamNotificationPreferencesQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>
  > = ({ signal }) =>
    getTeamNotificationPreferences({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamNotificationPreferencesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamNotificationPreferences>>
>;
export type GetTeamNotificationPreferencesQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamNotificationPreferences<
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamNotificationPreferencesPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamNotificationPreferences<
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getTeamNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamNotificationPreferences<
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team notification preferences
 */

export function useGetTeamNotificationPreferences<
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamNotificationPreferencesQueryOptions(
    { teamId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team notification preferences
 */
export const prefetchGetTeamNotificationPreferencesQuery = async <
  TData = Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamNotificationPreferencesQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update team notification preferences
 */
export const getUpdateTeamNotificationPreferencesUrl = ({
  teamId,
}: UpdateTeamNotificationPreferencesPathParameters) => {
  return `/user-management/api/v1/notification-preferences/teams/${teamId}`;
};

export const updateTeamNotificationPreferences = async (
  { teamId }: UpdateTeamNotificationPreferencesPathParameters,
  userManagementDomainDTOsUpdateTeamNotificationPreferencesRequest: UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTeamNotificationPreferencesDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTeamNotificationPreferencesDto>(
    getUpdateTeamNotificationPreferencesUrl({ teamId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementDomainDTOsUpdateTeamNotificationPreferencesRequest,
      ),
    },
  );
};

export const getUpdateTeamNotificationPreferencesMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTeamNotificationPreferences>>,
    TError,
    {
      pathParams: UpdateTeamNotificationPreferencesPathParameters;
      data: UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTeamNotificationPreferences>>,
  TError,
  {
    pathParams: UpdateTeamNotificationPreferencesPathParameters;
    data: UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest;
  },
  TContext
> => {
  const mutationKey = ["updateTeamNotificationPreferences"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTeamNotificationPreferences>>,
    {
      pathParams: UpdateTeamNotificationPreferencesPathParameters;
      data: UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateTeamNotificationPreferences(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTeamNotificationPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTeamNotificationPreferences>>
>;
export type UpdateTeamNotificationPreferencesMutationBody =
  UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest;
export type UpdateTeamNotificationPreferencesMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update team notification preferences
 */
export const useUpdateTeamNotificationPreferences = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTeamNotificationPreferences>>,
      TError,
      {
        pathParams: UpdateTeamNotificationPreferencesPathParameters;
        data: UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTeamNotificationPreferences>>,
  TError,
  {
    pathParams: UpdateTeamNotificationPreferencesPathParameters;
    data: UserManagementDomainDTOsUpdateTeamNotificationPreferencesRequest;
  },
  TContext
> => {
  const mutationOptions =
    getUpdateTeamNotificationPreferencesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get team basic info for notifications
 */
export const getGetTeamBasicInfoUrl = ({
  teamId,
}: GetTeamBasicInfoPathParameters) => {
  return `/user-management/api/v1/notification-preferences/teams/${teamId}/basic-info`;
};

export const getTeamBasicInfo = async (
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTeamBasicInfoDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTeamBasicInfoDto>(
    getGetTeamBasicInfoUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamBasicInfoQueryKey = ({
  teamId,
}: GetTeamBasicInfoPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "notification-preferences",
    "teams",
    teamId,
    "basic-info",
  ] as const;
};

export const useGetTeamBasicInfoInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamBasicInfoQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamBasicInfo>>
  > = ({ signal }) =>
    getTeamBasicInfo({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamBasicInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamBasicInfoInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamBasicInfo>>
>;
export type GetTeamBasicInfoInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamBasicInfoPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getTeamBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getTeamBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team basic info for notifications
 */

export function useGetTeamBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamBasicInfoInfiniteQueryOptions(
    { teamId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team basic info for notifications
 */
export const prefetchGetTeamBasicInfoInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamBasicInfoInfiniteQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamBasicInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamBasicInfoQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamBasicInfo>>
  > = ({ signal }) =>
    getTeamBasicInfo({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamBasicInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamBasicInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamBasicInfo>>
>;
export type GetTeamBasicInfoQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamBasicInfo<
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamBasicInfoPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getTeamBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamBasicInfo<
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getTeamBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamBasicInfo<
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team basic info for notifications
 */

export function useGetTeamBasicInfo<
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamBasicInfoQueryOptions({ teamId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team basic info for notifications
 */
export const prefetchGetTeamBasicInfoQuery = async <
  TData = Awaited<ReturnType<typeof getTeamBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamBasicInfoQueryOptions({ teamId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get team members for notifications
 */
export const getGetTeamMembersUrl = ({
  teamId,
}: GetTeamMembersPathParameters) => {
  return `/user-management/api/v1/notification-preferences/teams/${teamId}/members`;
};

export const getTeamMembers = async (
  { teamId }: GetTeamMembersPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUserBasicInfoDto[]> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUserBasicInfoDto[]>(
    getGetTeamMembersUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamMembersQueryKey = ({
  teamId,
}: GetTeamMembersPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "notification-preferences",
    "teams",
    teamId,
    "members",
  ] as const;
};

export const useGetTeamMembersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMembers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMembersQueryKey({ teamId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamMembers>>> = ({
    signal,
  }) => getTeamMembers({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMembersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMembers>>
>;
export type GetTeamMembersInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMembersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMembers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMembersPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMembers>>,
          TError,
          Awaited<ReturnType<typeof getTeamMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMembersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMembers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMembers>>,
          TError,
          Awaited<ReturnType<typeof getTeamMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMembersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMembers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team members for notifications
 */

export function useGetTeamMembersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMembers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMembersInfiniteQueryOptions(
    { teamId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team members for notifications
 */
export const prefetchGetTeamMembersInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMembersInfiniteQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMembers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMembersQueryKey({ teamId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamMembers>>> = ({
    signal,
  }) => getTeamMembers({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMembers>>
>;
export type GetTeamMembersQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMembers<
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMembersPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMembers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMembers>>,
          TError,
          Awaited<ReturnType<typeof getTeamMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMembers<
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMembers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMembers>>,
          TError,
          Awaited<ReturnType<typeof getTeamMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMembers<
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMembers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team members for notifications
 */

export function useGetTeamMembers<
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMembers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMembersQueryOptions({ teamId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team members for notifications
 */
export const prefetchGetTeamMembersQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMembers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamMembersPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMembers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMembersQueryOptions({ teamId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get user notification preferences
 */
export const getGetUserNotificationPreferencesUrl = ({
  userId,
}: GetUserNotificationPreferencesPathParameters) => {
  return `/user-management/api/v1/notification-preferences/users/${userId}`;
};

export const getUserNotificationPreferences = async (
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUserNotificationPreferencesDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUserNotificationPreferencesDto>(
    getGetUserNotificationPreferencesUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetUserNotificationPreferencesQueryKey = ({
  userId,
}: GetUserNotificationPreferencesPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "notification-preferences",
    "users",
    userId,
  ] as const;
};

export const useGetUserNotificationPreferencesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserNotificationPreferencesQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  > = ({ signal }) =>
    getUserNotificationPreferences({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserNotificationPreferencesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserNotificationPreferences>>
>;
export type GetUserNotificationPreferencesInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationPreferencesPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getUserNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getUserNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user notification preferences
 */

export function useGetUserNotificationPreferencesInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserNotificationPreferencesInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user notification preferences
 */
export const prefetchGetUserNotificationPreferencesInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserNotificationPreferencesInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetUserNotificationPreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserNotificationPreferencesQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>
  > = ({ signal }) =>
    getUserNotificationPreferences({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserNotificationPreferences>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserNotificationPreferencesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserNotificationPreferences>>
>;
export type GetUserNotificationPreferencesQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserNotificationPreferences<
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationPreferencesPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getUserNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotificationPreferences<
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getUserNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotificationPreferences<
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user notification preferences
 */

export function useGetUserNotificationPreferences<
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserNotificationPreferencesQueryOptions(
    { userId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user notification preferences
 */
export const prefetchGetUserNotificationPreferencesQuery = async <
  TData = Awaited<ReturnType<typeof getUserNotificationPreferences>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserNotificationPreferencesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserNotificationPreferencesQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update user notification preferences
 */
export const getUpdateUserNotificationPreferencesUrl = ({
  userId,
}: UpdateUserNotificationPreferencesPathParameters) => {
  return `/user-management/api/v1/notification-preferences/users/${userId}`;
};

export const updateUserNotificationPreferences = async (
  { userId }: UpdateUserNotificationPreferencesPathParameters,
  userManagementDomainDTOsUpdateUserNotificationPreferencesRequest: UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUserNotificationPreferencesDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUserNotificationPreferencesDto>(
    getUpdateUserNotificationPreferencesUrl({ userId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementDomainDTOsUpdateUserNotificationPreferencesRequest,
      ),
    },
  );
};

export const getUpdateUserNotificationPreferencesMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserNotificationPreferences>>,
    TError,
    {
      pathParams: UpdateUserNotificationPreferencesPathParameters;
      data: UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserNotificationPreferences>>,
  TError,
  {
    pathParams: UpdateUserNotificationPreferencesPathParameters;
    data: UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest;
  },
  TContext
> => {
  const mutationKey = ["updateUserNotificationPreferences"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserNotificationPreferences>>,
    {
      pathParams: UpdateUserNotificationPreferencesPathParameters;
      data: UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateUserNotificationPreferences(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserNotificationPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserNotificationPreferences>>
>;
export type UpdateUserNotificationPreferencesMutationBody =
  UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest;
export type UpdateUserNotificationPreferencesMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update user notification preferences
 */
export const useUpdateUserNotificationPreferences = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserNotificationPreferences>>,
      TError,
      {
        pathParams: UpdateUserNotificationPreferencesPathParameters;
        data: UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserNotificationPreferences>>,
  TError,
  {
    pathParams: UpdateUserNotificationPreferencesPathParameters;
    data: UserManagementDomainDTOsUpdateUserNotificationPreferencesRequest;
  },
  TContext
> => {
  const mutationOptions =
    getUpdateUserNotificationPreferencesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get user basic info for notifications
 */
export const getGetUserBasicInfoUrl = ({
  userId,
}: GetUserBasicInfoPathParameters) => {
  return `/user-management/api/v1/notification-preferences/users/${userId}/basic-info`;
};

export const getUserBasicInfo = async (
  { userId }: GetUserBasicInfoPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUserBasicInfoDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUserBasicInfoDto>(
    getGetUserBasicInfoUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetUserBasicInfoQueryKey = ({
  userId,
}: GetUserBasicInfoPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "notification-preferences",
    "users",
    userId,
    "basic-info",
  ] as const;
};

export const useGetUserBasicInfoInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserBasicInfoQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserBasicInfo>>
  > = ({ signal }) =>
    getUserBasicInfo({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserBasicInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserBasicInfoInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBasicInfo>>
>;
export type GetUserBasicInfoInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserBasicInfoPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getUserBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getUserBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user basic info for notifications
 */

export function useGetUserBasicInfoInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserBasicInfo>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserBasicInfoInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user basic info for notifications
 */
export const prefetchGetUserBasicInfoInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserBasicInfoInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetUserBasicInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserBasicInfoQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserBasicInfo>>
  > = ({ signal }) =>
    getUserBasicInfo({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserBasicInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserBasicInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBasicInfo>>
>;
export type GetUserBasicInfoQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserBasicInfo<
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserBasicInfoPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getUserBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserBasicInfo<
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasicInfo>>,
          TError,
          Awaited<ReturnType<typeof getUserBasicInfo>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserBasicInfo<
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user basic info for notifications
 */

export function useGetUserBasicInfo<
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserBasicInfoQueryOptions({ userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user basic info for notifications
 */
export const prefetchGetUserBasicInfoQuery = async <
  TData = Awaited<ReturnType<typeof getUserBasicInfo>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserBasicInfoPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserBasicInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserBasicInfoQueryOptions({ userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
