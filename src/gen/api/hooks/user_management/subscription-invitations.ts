/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AcceptSubscriptionInvitationPathParameters,
  ClicksiDataContractsCommonDtoApiResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetSubscriptionInvitationPathParameters,
  GetSubscriptionInvitationsParams,
  GetTeamReceivedSubscriptionInvitationsParams,
  GetTeamReceivedSubscriptionInvitationsPathParameters,
  GetTeamSentSubscriptionInvitationsPathParameters,
  GetTeamSubscriptionInvitationsParams,
  GetTeamSubscriptionInvitationsPathParameters,
  GetUserTeamsReceivedSubscriptionInvitationsParams,
  RevokeSubscriptionInvitationPathParameters,
  UserManagementDomainDTOsCreateSubscriptionInvitationRequest,
  UserManagementDomainDTOsSubscriptionInvitationDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get invitations with filtering
 */
export const getGetSubscriptionInvitationsUrl = (
  params?: GetSubscriptionInvitationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/subscription-invitations?${stringifiedParams}`
    : `/user-management/api/v1/subscription-invitations`;
};

export const getSubscriptionInvitations = async (
  params?: GetSubscriptionInvitationsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionInvitationDto[]
  >(getGetSubscriptionInvitationsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetSubscriptionInvitationsQueryKey = (
  params?: GetSubscriptionInvitationsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetSubscriptionInvitationsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSubscriptionInvitationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscriptionInvitations>>
  > = ({ signal }) =>
    getSubscriptionInvitations(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriptionInvitationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscriptionInvitations>>
>;
export type GetSubscriptionInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetSubscriptionInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitations with filtering
 */

export function useGetSubscriptionInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSubscriptionInvitationsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitations with filtering
 */
export const prefetchGetSubscriptionInvitationsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetSubscriptionInvitationsInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetSubscriptionInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSubscriptionInvitationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscriptionInvitations>>
  > = ({ signal }) =>
    getSubscriptionInvitations(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriptionInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscriptionInvitations>>
>;
export type GetSubscriptionInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitations with filtering
 */

export function useGetSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSubscriptionInvitationsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitations with filtering
 */
export const prefetchGetSubscriptionInvitationsQuery = async <
  TData = Awaited<ReturnType<typeof getSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetSubscriptionInvitationsQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create subscription invitation (requires permission to invite)
 */
export const getCreateSubscriptionInvitationUrl = () => {
  return `/user-management/api/v1/subscription-invitations`;
};

export const createSubscriptionInvitation = async (
  userManagementDomainDTOsCreateSubscriptionInvitationRequest: UserManagementDomainDTOsCreateSubscriptionInvitationRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsSubscriptionInvitationDto>(
    getCreateSubscriptionInvitationUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementDomainDTOsCreateSubscriptionInvitationRequest,
      ),
    },
  );
};

export const getCreateSubscriptionInvitationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSubscriptionInvitation>>,
    TError,
    { data: UserManagementDomainDTOsCreateSubscriptionInvitationRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSubscriptionInvitation>>,
  TError,
  { data: UserManagementDomainDTOsCreateSubscriptionInvitationRequest },
  TContext
> => {
  const mutationKey = ["createSubscriptionInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSubscriptionInvitation>>,
    { data: UserManagementDomainDTOsCreateSubscriptionInvitationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createSubscriptionInvitation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSubscriptionInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSubscriptionInvitation>>
>;
export type CreateSubscriptionInvitationMutationBody =
  UserManagementDomainDTOsCreateSubscriptionInvitationRequest;
export type CreateSubscriptionInvitationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create subscription invitation (requires permission to invite)
 */
export const useCreateSubscriptionInvitation = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSubscriptionInvitation>>,
      TError,
      { data: UserManagementDomainDTOsCreateSubscriptionInvitationRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createSubscriptionInvitation>>,
  TError,
  { data: UserManagementDomainDTOsCreateSubscriptionInvitationRequest },
  TContext
> => {
  const mutationOptions =
    getCreateSubscriptionInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get invitation by ID
 */
export const getGetSubscriptionInvitationUrl = ({
  invitationId,
}: GetSubscriptionInvitationPathParameters) => {
  return `/user-management/api/v1/subscription-invitations/${invitationId}`;
};

export const getSubscriptionInvitation = async (
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsSubscriptionInvitationDto>(
    getGetSubscriptionInvitationUrl({ invitationId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetSubscriptionInvitationQueryKey = ({
  invitationId,
}: GetSubscriptionInvitationPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    invitationId,
  ] as const;
};

export const useGetSubscriptionInvitationInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitation>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSubscriptionInvitationQueryKey({ invitationId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscriptionInvitation>>
  > = ({ signal }) =>
    getSubscriptionInvitation({ invitationId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getSubscriptionInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriptionInvitationInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscriptionInvitation>>
>;
export type GetSubscriptionInvitationInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetSubscriptionInvitationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitation>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetSubscriptionInvitationPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitation>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitation>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitation>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitation>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitation by ID
 */

export function useGetSubscriptionInvitationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubscriptionInvitation>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSubscriptionInvitationInfiniteQueryOptions(
    { invitationId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitation by ID
 */
export const prefetchGetSubscriptionInvitationInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetSubscriptionInvitationInfiniteQueryOptions(
    { invitationId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetSubscriptionInvitationQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSubscriptionInvitationQueryKey({ invitationId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscriptionInvitation>>
  > = ({ signal }) =>
    getSubscriptionInvitation({ invitationId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscriptionInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriptionInvitationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscriptionInvitation>>
>;
export type GetSubscriptionInvitationQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetSubscriptionInvitation<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetSubscriptionInvitationPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitation>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitation<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptionInvitation>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptionInvitation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSubscriptionInvitation<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitation by ID
 */

export function useGetSubscriptionInvitation<
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSubscriptionInvitationQueryOptions(
    { invitationId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitation by ID
 */
export const prefetchGetSubscriptionInvitationQuery = async <
  TData = Awaited<ReturnType<typeof getSubscriptionInvitation>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { invitationId }: GetSubscriptionInvitationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSubscriptionInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetSubscriptionInvitationQueryOptions(
    { invitationId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Accept invitation
 */
export const getAcceptSubscriptionInvitationUrl = ({
  invitationId,
}: AcceptSubscriptionInvitationPathParameters) => {
  return `/user-management/api/v1/subscription-invitations/${invitationId}/accept`;
};

export const acceptSubscriptionInvitation = async (
  { invitationId }: AcceptSubscriptionInvitationPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsSubscriptionInvitationDto>(
    getAcceptSubscriptionInvitationUrl({ invitationId }),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getAcceptSubscriptionInvitationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptSubscriptionInvitation>>,
    TError,
    { pathParams: AcceptSubscriptionInvitationPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptSubscriptionInvitation>>,
  TError,
  { pathParams: AcceptSubscriptionInvitationPathParameters },
  TContext
> => {
  const mutationKey = ["acceptSubscriptionInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptSubscriptionInvitation>>,
    { pathParams: AcceptSubscriptionInvitationPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return acceptSubscriptionInvitation(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptSubscriptionInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptSubscriptionInvitation>>
>;

export type AcceptSubscriptionInvitationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Accept invitation
 */
export const useAcceptSubscriptionInvitation = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptSubscriptionInvitation>>,
      TError,
      { pathParams: AcceptSubscriptionInvitationPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof acceptSubscriptionInvitation>>,
  TError,
  { pathParams: AcceptSubscriptionInvitationPathParameters },
  TContext
> => {
  const mutationOptions =
    getAcceptSubscriptionInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Revoke invitation
 */
export const getRevokeSubscriptionInvitationUrl = ({
  invitationId,
}: RevokeSubscriptionInvitationPathParameters) => {
  return `/user-management/api/v1/subscription-invitations/${invitationId}/revoke`;
};

export const revokeSubscriptionInvitation = async (
  { invitationId }: RevokeSubscriptionInvitationPathParameters,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getRevokeSubscriptionInvitationUrl({ invitationId }),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getRevokeSubscriptionInvitationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof revokeSubscriptionInvitation>>,
    TError,
    { pathParams: RevokeSubscriptionInvitationPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof revokeSubscriptionInvitation>>,
  TError,
  { pathParams: RevokeSubscriptionInvitationPathParameters },
  TContext
> => {
  const mutationKey = ["revokeSubscriptionInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof revokeSubscriptionInvitation>>,
    { pathParams: RevokeSubscriptionInvitationPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return revokeSubscriptionInvitation(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RevokeSubscriptionInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof revokeSubscriptionInvitation>>
>;

export type RevokeSubscriptionInvitationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Revoke invitation
 */
export const useRevokeSubscriptionInvitation = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof revokeSubscriptionInvitation>>,
      TError,
      { pathParams: RevokeSubscriptionInvitationPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof revokeSubscriptionInvitation>>,
  TError,
  { pathParams: RevokeSubscriptionInvitationPathParameters },
  TContext
> => {
  const mutationOptions =
    getRevokeSubscriptionInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get team subscription invitations
 */
export const getGetTeamSubscriptionInvitationsUrl = (
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/subscription-invitations/team/${teamId}/invitations?${stringifiedParams}`
    : `/user-management/api/v1/subscription-invitations/team/${teamId}/invitations`;
};

export const getTeamSubscriptionInvitations = async (
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionInvitationDto[]
  >(getGetTeamSubscriptionInvitationsUrl({ teamId }, params), {
    ...options,
    method: "GET",
  });
};

export const getGetTeamSubscriptionInvitationsQueryKey = (
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    "team",
    teamId,
    "invitations",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetTeamSubscriptionInvitationsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamSubscriptionInvitationsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  > = ({ signal }) =>
    getTeamSubscriptionInvitations({ teamId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamSubscriptionInvitationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
>;
export type GetTeamSubscriptionInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSubscriptionInvitationsPathParameters,
  params: undefined | GetTeamSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team subscription invitations
 */

export function useGetTeamSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamSubscriptionInvitationsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team subscription invitations
 */
export const prefetchGetTeamSubscriptionInvitationsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamSubscriptionInvitationsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamSubscriptionInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamSubscriptionInvitationsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
  > = ({ signal }) =>
    getTeamSubscriptionInvitations({ teamId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamSubscriptionInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
>;
export type GetTeamSubscriptionInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSubscriptionInvitationsPathParameters,
  params: undefined | GetTeamSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team subscription invitations
 */

export function useGetTeamSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamSubscriptionInvitationsQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team subscription invitations
 */
export const prefetchGetTeamSubscriptionInvitationsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamSubscriptionInvitationsPathParameters,
  params?: GetTeamSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamSubscriptionInvitationsQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get team received invitations
 */
export const getGetTeamReceivedSubscriptionInvitationsUrl = (
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/subscription-invitations/team/${teamId}/received?${stringifiedParams}`
    : `/user-management/api/v1/subscription-invitations/team/${teamId}/received`;
};

export const getTeamReceivedSubscriptionInvitations = async (
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionInvitationDto[]
  >(getGetTeamReceivedSubscriptionInvitationsUrl({ teamId }, params), {
    ...options,
    method: "GET",
  });
};

export const getGetTeamReceivedSubscriptionInvitationsQueryKey = (
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    "team",
    teamId,
    "received",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetTeamReceivedSubscriptionInvitationsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamReceivedSubscriptionInvitationsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  > = ({ signal }) =>
    getTeamReceivedSubscriptionInvitations({ teamId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamReceivedSubscriptionInvitationsInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  >;
export type GetTeamReceivedSubscriptionInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params: undefined | GetTeamReceivedSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team received invitations
 */

export function useGetTeamReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    useGetTeamReceivedSubscriptionInvitationsInfiniteQueryOptions(
      { teamId },
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team received invitations
 */
export const prefetchGetTeamReceivedSubscriptionInvitationsInfiniteQuery =
  async <
    TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
    TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  >(
    queryClient: QueryClient,
    { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
    params?: GetTeamReceivedSubscriptionInvitationsParams,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof gatewayServiceCustomFetch>;
    },
  ): Promise<QueryClient> => {
    const queryOptions =
      useGetTeamReceivedSubscriptionInvitationsInfiniteQueryOptions(
        { teamId },
        params,
        options,
      );

    await queryClient.prefetchInfiniteQuery(queryOptions);

    return queryClient;
  };

export const useGetTeamReceivedSubscriptionInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamReceivedSubscriptionInvitationsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
  > = ({ signal }) =>
    getTeamReceivedSubscriptionInvitations({ teamId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamReceivedSubscriptionInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
>;
export type GetTeamReceivedSubscriptionInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamReceivedSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params: undefined | GetTeamReceivedSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamReceivedSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamReceivedSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team received invitations
 */

export function useGetTeamReceivedSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamReceivedSubscriptionInvitationsQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team received invitations
 */
export const prefetchGetTeamReceivedSubscriptionInvitationsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamReceivedSubscriptionInvitationsPathParameters,
  params?: GetTeamReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamReceivedSubscriptionInvitationsQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get team sent invitations
 */
export const getGetTeamSentSubscriptionInvitationsUrl = ({
  teamId,
}: GetTeamSentSubscriptionInvitationsPathParameters) => {
  return `/user-management/api/v1/subscription-invitations/team/${teamId}/sent`;
};

export const getTeamSentSubscriptionInvitations = async (
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionInvitationDto[]
  >(getGetTeamSentSubscriptionInvitationsUrl({ teamId }), {
    ...options,
    method: "GET",
  });
};

export const getGetTeamSentSubscriptionInvitationsQueryKey = ({
  teamId,
}: GetTeamSentSubscriptionInvitationsPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    "team",
    teamId,
    "sent",
  ] as const;
};

export const useGetTeamSentSubscriptionInvitationsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamSentSubscriptionInvitationsQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  > = ({ signal }) =>
    getTeamSentSubscriptionInvitations(
      { teamId },
      { signal, ...requestOptions },
    );

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamSentSubscriptionInvitationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
>;
export type GetTeamSentSubscriptionInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSentSubscriptionInvitationsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team sent invitations
 */

export function useGetTeamSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    useGetTeamSentSubscriptionInvitationsInfiniteQueryOptions(
      { teamId },
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team sent invitations
 */
export const prefetchGetTeamSentSubscriptionInvitationsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions =
    useGetTeamSentSubscriptionInvitationsInfiniteQueryOptions(
      { teamId },
      options,
    );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamSentSubscriptionInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamSentSubscriptionInvitationsQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
  > = ({ signal }) =>
    getTeamSentSubscriptionInvitations(
      { teamId },
      { signal, ...requestOptions },
    );

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamSentSubscriptionInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
>;
export type GetTeamSentSubscriptionInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSentSubscriptionInvitationsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team sent invitations
 */

export function useGetTeamSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamSentSubscriptionInvitationsQueryOptions(
    { teamId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team sent invitations
 */
export const prefetchGetTeamSentSubscriptionInvitationsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamSentSubscriptionInvitationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamSentSubscriptionInvitationsQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get invitations for all user's teams (received)
 */
export const getGetUserTeamsReceivedSubscriptionInvitationsUrl = (
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/subscription-invitations/user/teams/received?${stringifiedParams}`
    : `/user-management/api/v1/subscription-invitations/user/teams/received`;
};

export const getUserTeamsReceivedSubscriptionInvitations = async (
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionInvitationDto[]
  >(getGetUserTeamsReceivedSubscriptionInvitationsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetUserTeamsReceivedSubscriptionInvitationsQueryKey = (
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    "user",
    "teams",
    "received",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetUserTeamsReceivedSubscriptionInvitationsInfiniteQueryOptions =
  <
    TData = InfiniteData<
      Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
    >,
    TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  >(
    params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof gatewayServiceCustomFetch>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetUserTeamsReceivedSubscriptionInvitationsQueryKey(params);

    const queryFn: QueryFunction<
      Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
    > = ({ signal }) =>
      getUserTeamsReceivedSubscriptionInvitations(params, {
        signal,
        ...requestOptions,
      });

    const customOptions = customQueryOptions({
      ...queryOptions,
      queryKey,
      queryFn,
    });

    return customOptions as UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
  };

export type GetUserTeamsReceivedSubscriptionInvitationsInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  >;
export type GetUserTeamsReceivedSubscriptionInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserTeamsReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetUserTeamsReceivedSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >,
          TError,
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >,
          TError,
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitations for all user's teams (received)
 */

export function useGetUserTeamsReceivedSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    useGetUserTeamsReceivedSubscriptionInvitationsInfiniteQueryOptions(
      params,
      options,
    );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitations for all user's teams (received)
 */
export const prefetchGetUserTeamsReceivedSubscriptionInvitationsInfiniteQuery =
  async <
    TData = Awaited<
      ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
    >,
    TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  >(
    queryClient: QueryClient,
    params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof gatewayServiceCustomFetch>;
    },
  ): Promise<QueryClient> => {
    const queryOptions =
      useGetUserTeamsReceivedSubscriptionInvitationsInfiniteQueryOptions(
        params,
        options,
      );

    await queryClient.prefetchInfiniteQuery(queryOptions);

    return queryClient;
  };

export const useGetUserTeamsReceivedSubscriptionInvitationsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserTeamsReceivedSubscriptionInvitationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  > = ({ signal }) =>
    getUserTeamsReceivedSubscriptionInvitations(params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserTeamsReceivedSubscriptionInvitationsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>
  >;
export type GetUserTeamsReceivedSubscriptionInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserTeamsReceivedSubscriptionInvitations<
  TData = Awaited<
    ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetUserTeamsReceivedSubscriptionInvitationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >,
          TError,
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsReceivedSubscriptionInvitations<
  TData = Awaited<
    ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >,
          TError,
          Awaited<
            ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsReceivedSubscriptionInvitations<
  TData = Awaited<
    ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitations for all user's teams (received)
 */

export function useGetUserTeamsReceivedSubscriptionInvitations<
  TData = Awaited<
    ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    useGetUserTeamsReceivedSubscriptionInvitationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitations for all user's teams (received)
 */
export const prefetchGetUserTeamsReceivedSubscriptionInvitationsQuery = async <
  TData = Awaited<
    ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetUserTeamsReceivedSubscriptionInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsReceivedSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions =
    useGetUserTeamsReceivedSubscriptionInvitationsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get invitations sent by all user's teams
 */
export const getGetUserTeamsSentSubscriptionInvitationsUrl = () => {
  return `/user-management/api/v1/subscription-invitations/user/teams/sent`;
};

export const getUserTeamsSentSubscriptionInvitations = async (
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionInvitationDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionInvitationDto[]
  >(getGetUserTeamsSentSubscriptionInvitationsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetUserTeamsSentSubscriptionInvitationsQueryKey = () => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-invitations",
    "user",
    "teams",
    "sent",
  ] as const;
};

export const useGetUserTeamsSentSubscriptionInvitationsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserTeamsSentSubscriptionInvitationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  > = ({ signal }) =>
    getUserTeamsSentSubscriptionInvitations({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserTeamsSentSubscriptionInvitationsInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  >;
export type GetUserTeamsSentSubscriptionInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserTeamsSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitations sent by all user's teams
 */

export function useGetUserTeamsSentSubscriptionInvitationsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  >,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    useGetUserTeamsSentSubscriptionInvitationsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitations sent by all user's teams
 */
export const prefetchGetUserTeamsSentSubscriptionInvitationsInfiniteQuery =
  async <
    TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
    TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  >(
    queryClient: QueryClient,
    options?: {
      query?: Partial<
        UseInfiniteQueryOptions<
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof gatewayServiceCustomFetch>;
    },
  ): Promise<QueryClient> => {
    const queryOptions =
      useGetUserTeamsSentSubscriptionInvitationsInfiniteQueryOptions(options);

    await queryClient.prefetchInfiniteQuery(queryOptions);

    return queryClient;
  };

export const useGetUserTeamsSentSubscriptionInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserTeamsSentSubscriptionInvitationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
  > = ({ signal }) =>
    getUserTeamsSentSubscriptionInvitations({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserTeamsSentSubscriptionInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
>;
export type GetUserTeamsSentSubscriptionInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserTeamsSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
          TError,
          Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserTeamsSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get invitations sent by all user's teams
 */

export function useGetUserTeamsSentSubscriptionInvitations<
  TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    useGetUserTeamsSentSubscriptionInvitationsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get invitations sent by all user's teams
 */
export const prefetchGetUserTeamsSentSubscriptionInvitationsQuery = async <
  TData = Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserTeamsSentSubscriptionInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions =
    useGetUserTeamsSentSubscriptionInvitationsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
