/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeletePlanPathParameters,
  GetPlanPathParameters,
  GetPlansParams,
  UpdatePlanPathParameters,
  UserManagementDomainDTOsCreateSubscriptionPlanRequest,
  UserManagementDomainDTOsSubscriptionPlanDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all subscription plans
 */
export const getGetPlansUrl = (params?: GetPlansParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/subscription-plans?${stringifiedParams}`
    : `/user-management/api/v1/subscription-plans`;
};

export const getPlans = async (
  params?: GetPlansParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionPlanDto[]> => {
  return gatewayServiceCustomFetch<
    UserManagementDomainDTOsSubscriptionPlanDto[]
  >(getGetPlansUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetPlansQueryKey = (params?: GetPlansParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-plans",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetPlansInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPlans>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPlansQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlans>>> = ({
    signal,
  }) => getPlans(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPlans>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPlansInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlans>>
>;
export type GetPlansInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPlansInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlans>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetPlansParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlans>>,
          TError,
          Awaited<ReturnType<typeof getPlans>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlansInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlans>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlans>>,
          TError,
          Awaited<ReturnType<typeof getPlans>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlansInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlans>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all subscription plans
 */

export function useGetPlansInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlans>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPlansInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all subscription plans
 */
export const prefetchGetPlansInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPlansInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetPlansQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPlansQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlans>>> = ({
    signal,
  }) => getPlans(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getPlans>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPlansQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlans>>
>;
export type GetPlansQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPlans<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetPlansParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlans>>,
          TError,
          Awaited<ReturnType<typeof getPlans>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlans<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlans>>,
          TError,
          Awaited<ReturnType<typeof getPlans>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlans<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all subscription plans
 */

export function useGetPlans<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPlansQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all subscription plans
 */
export const prefetchGetPlansQuery = async <
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetPlansParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPlansQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create new subscription plan (Admin only)
 */
export const getCreatePlanUrl = () => {
  return `/user-management/api/v1/subscription-plans`;
};

export const createPlan = async (
  userManagementDomainDTOsCreateSubscriptionPlanRequest: UserManagementDomainDTOsCreateSubscriptionPlanRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionPlanDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsSubscriptionPlanDto>(
    getCreatePlanUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementDomainDTOsCreateSubscriptionPlanRequest,
      ),
    },
  );
};

export const getCreatePlanMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPlan>>,
    TError,
    { data: UserManagementDomainDTOsCreateSubscriptionPlanRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPlan>>,
  TError,
  { data: UserManagementDomainDTOsCreateSubscriptionPlanRequest },
  TContext
> => {
  const mutationKey = ["createPlan"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPlan>>,
    { data: UserManagementDomainDTOsCreateSubscriptionPlanRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createPlan(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPlan>>
>;
export type CreatePlanMutationBody =
  UserManagementDomainDTOsCreateSubscriptionPlanRequest;
export type CreatePlanMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create new subscription plan (Admin only)
 */
export const useCreatePlan = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPlan>>,
      TError,
      { data: UserManagementDomainDTOsCreateSubscriptionPlanRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPlan>>,
  TError,
  { data: UserManagementDomainDTOsCreateSubscriptionPlanRequest },
  TContext
> => {
  const mutationOptions = getCreatePlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get subscription plan by ID
 */
export const getGetPlanUrl = ({ planId }: GetPlanPathParameters) => {
  return `/user-management/api/v1/subscription-plans/${planId}`;
};

export const getPlan = async (
  { planId }: GetPlanPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionPlanDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsSubscriptionPlanDto>(
    getGetPlanUrl({ planId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetPlanQueryKey = ({ planId }: GetPlanPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "subscription-plans",
    planId,
  ] as const;
};

export const useGetPlanInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPlan>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { planId }: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPlanQueryKey({ planId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlan>>> = ({
    signal,
  }) => getPlan({ planId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPlan>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPlanInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlan>>
>;
export type GetPlanInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPlanInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlan>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPlanPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlan>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlan>>,
          TError,
          Awaited<ReturnType<typeof getPlan>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlanInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlan>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlan>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlan>>,
          TError,
          Awaited<ReturnType<typeof getPlan>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlanInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlan>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get subscription plan by ID
 */

export function useGetPlanInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPlan>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { planId }: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPlanInfiniteQueryOptions({ planId }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get subscription plan by ID
 */
export const prefetchGetPlanInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { planId }: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPlanInfiniteQueryOptions({ planId }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetPlanQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { planId }: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlan>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPlanQueryKey({ planId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlan>>> = ({
    signal,
  }) => getPlan({ planId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getPlan>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPlanQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlan>>
>;
export type GetPlanQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPlan<
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPlanPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlan>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlan>>,
          TError,
          Awaited<ReturnType<typeof getPlan>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlan<
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlan>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPlan>>,
          TError,
          Awaited<ReturnType<typeof getPlan>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPlan<
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlan>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get subscription plan by ID
 */

export function useGetPlan<
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { planId }: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlan>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPlanQueryOptions({ planId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get subscription plan by ID
 */
export const prefetchGetPlanQuery = async <
  TData = Awaited<ReturnType<typeof getPlan>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { planId }: GetPlanPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPlan>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPlanQueryOptions({ planId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update subscription plan (Admin only)
 */
export const getUpdatePlanUrl = ({ planId }: UpdatePlanPathParameters) => {
  return `/user-management/api/v1/subscription-plans/${planId}`;
};

export const updatePlan = async (
  { planId }: UpdatePlanPathParameters,
  userManagementDomainDTOsCreateSubscriptionPlanRequest: UserManagementDomainDTOsCreateSubscriptionPlanRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsSubscriptionPlanDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsSubscriptionPlanDto>(
    getUpdatePlanUrl({ planId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementDomainDTOsCreateSubscriptionPlanRequest,
      ),
    },
  );
};

export const getUpdatePlanMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePlan>>,
    TError,
    {
      pathParams: UpdatePlanPathParameters;
      data: UserManagementDomainDTOsCreateSubscriptionPlanRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePlan>>,
  TError,
  {
    pathParams: UpdatePlanPathParameters;
    data: UserManagementDomainDTOsCreateSubscriptionPlanRequest;
  },
  TContext
> => {
  const mutationKey = ["updatePlan"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePlan>>,
    {
      pathParams: UpdatePlanPathParameters;
      data: UserManagementDomainDTOsCreateSubscriptionPlanRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updatePlan(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePlan>>
>;
export type UpdatePlanMutationBody =
  UserManagementDomainDTOsCreateSubscriptionPlanRequest;
export type UpdatePlanMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update subscription plan (Admin only)
 */
export const useUpdatePlan = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePlan>>,
      TError,
      {
        pathParams: UpdatePlanPathParameters;
        data: UserManagementDomainDTOsCreateSubscriptionPlanRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePlan>>,
  TError,
  {
    pathParams: UpdatePlanPathParameters;
    data: UserManagementDomainDTOsCreateSubscriptionPlanRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdatePlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete subscription plan (Admin only)
 */
export const getDeletePlanUrl = ({ planId }: DeletePlanPathParameters) => {
  return `/user-management/api/v1/subscription-plans/${planId}`;
};

export const deletePlan = async (
  { planId }: DeletePlanPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeletePlanUrl({ planId }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeletePlanMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePlan>>,
    TError,
    { pathParams: DeletePlanPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePlan>>,
  TError,
  { pathParams: DeletePlanPathParameters },
  TContext
> => {
  const mutationKey = ["deletePlan"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePlan>>,
    { pathParams: DeletePlanPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deletePlan(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePlan>>
>;

export type DeletePlanMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete subscription plan (Admin only)
 */
export const useDeletePlan = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePlan>>,
      TError,
      { pathParams: DeletePlanPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePlan>>,
  TError,
  { pathParams: DeletePlanPathParameters },
  TContext
> => {
  const mutationOptions = getDeletePlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
