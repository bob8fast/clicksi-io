/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonDtoApiResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetProfilePicturePathParameters,
  UploadImageBody,
  UserManagementAPIControllersImageUploadResponse,
  UserManagementAPIControllersProfilePictureResponse,
  UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [User Images] Move To Permanent
 */
export const getMoveToPermanentUrl = () => {
  return `/user-management/api/v1/images/permanent`;
};

export const moveToPermanent = async (
  userManagementAPIControllersUserImagesControllerMakeImagePermanentDto: UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getMoveToPermanentUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIControllersUserImagesControllerMakeImagePermanentDto,
      ),
    },
  );
};

export const getMoveToPermanentMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moveToPermanent>>,
    TError,
    {
      data: UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof moveToPermanent>>,
  TError,
  {
    data: UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto;
  },
  TContext
> => {
  const mutationKey = ["moveToPermanent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof moveToPermanent>>,
    {
      data: UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto;
    }
  > = (props) => {
    const { data } = props ?? {};

    return moveToPermanent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MoveToPermanentMutationResult = NonNullable<
  Awaited<ReturnType<typeof moveToPermanent>>
>;
export type MoveToPermanentMutationBody =
  UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto;
export type MoveToPermanentMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [User Images] Move To Permanent
 */
export const useMoveToPermanent = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof moveToPermanent>>,
      TError,
      {
        data: UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof moveToPermanent>>,
  TError,
  {
    data: UserManagementAPIControllersUserImagesControllerMakeImagePermanentDto;
  },
  TContext
> => {
  const mutationOptions = getMoveToPermanentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [User Images] Get Profile Picture
 */
export const getGetProfilePictureUrl = ({
  userId,
}: GetProfilePicturePathParameters) => {
  return `/user-management/api/v1/images/profile/${userId}`;
};

export const getProfilePicture = async (
  { userId }: GetProfilePicturePathParameters,
  options?: RequestInit,
): Promise<UserManagementAPIControllersProfilePictureResponse> => {
  return gatewayServiceCustomFetch<UserManagementAPIControllersProfilePictureResponse>(
    getGetProfilePictureUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetProfilePictureQueryKey = ({
  userId,
}: GetProfilePicturePathParameters) => {
  return ["user-management", "api", "v1", "images", "profile", userId] as const;
};

export const useGetProfilePictureInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getProfilePicture>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProfilePictureQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProfilePicture>>
  > = ({ signal }) =>
    getProfilePicture({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProfilePicture>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProfilePictureInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfilePicture>>
>;
export type GetProfilePictureInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProfilePictureInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProfilePicture>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProfilePicturePathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfilePicture>>,
          TError,
          Awaited<ReturnType<typeof getProfilePicture>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfilePictureInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProfilePicture>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfilePicture>>,
          TError,
          Awaited<ReturnType<typeof getProfilePicture>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfilePictureInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProfilePicture>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [User Images] Get Profile Picture
 */

export function useGetProfilePictureInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProfilePicture>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProfilePictureInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [User Images] Get Profile Picture
 */
export const prefetchGetProfilePictureInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProfilePictureInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetProfilePictureQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProfilePictureQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProfilePicture>>
  > = ({ signal }) =>
    getProfilePicture({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getProfilePicture>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProfilePictureQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfilePicture>>
>;
export type GetProfilePictureQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProfilePicture<
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProfilePicturePathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfilePicture>>,
          TError,
          Awaited<ReturnType<typeof getProfilePicture>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfilePicture<
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfilePicture>>,
          TError,
          Awaited<ReturnType<typeof getProfilePicture>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfilePicture<
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [User Images] Get Profile Picture
 */

export function useGetProfilePicture<
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProfilePictureQueryOptions({ userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [User Images] Get Profile Picture
 */
export const prefetchGetProfilePictureQuery = async <
  TData = Awaited<ReturnType<typeof getProfilePicture>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetProfilePicturePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProfilePicture>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProfilePictureQueryOptions({ userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [User Images] Upload Image
 */
export const getUploadImageUrl = () => {
  return `/user-management/api/v1/images/upload/temporary`;
};

export const uploadImage = async (
  uploadImageBody: UploadImageBody,
  options?: RequestInit,
): Promise<UserManagementAPIControllersImageUploadResponse> => {
  const formData = new FormData();
  if (uploadImageBody.json !== undefined) {
    formData.append(`json`, JSON.stringify(uploadImageBody.json));
  }
  formData.append(`image`, uploadImageBody.image);

  return gatewayServiceCustomFetch<UserManagementAPIControllersImageUploadResponse>(
    getUploadImageUrl(),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getUploadImageMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage>>,
    TError,
    { data: UploadImageBody },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody },
  TContext
> => {
  const mutationKey = ["uploadImage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadImage>>,
    { data: UploadImageBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadImage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadImage>>
>;
export type UploadImageMutationBody = UploadImageBody;
export type UploadImageMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [User Images] Upload Image
 */
export const useUploadImage = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadImage>>,
      TError,
      { data: UploadImageBody },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody },
  TContext
> => {
  const mutationOptions = getUploadImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
