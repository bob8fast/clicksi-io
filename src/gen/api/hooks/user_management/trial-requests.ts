/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetPendingTrialRequestsParams,
  GetTeamTrialRequestsParams,
  GetTeamTrialRequestsPathParameters,
  GetTrialRequestPathParameters,
  GetTrialRequestsParams,
  ReviewTrialRequestPathParameters,
  StartTrialPathParameters,
  UserManagementDomainDTOsCreateTrialRequestRequest,
  UserManagementDomainDTOsReviewTrialRequestRequest,
  UserManagementDomainDTOsTeamSubscriptionDto,
  UserManagementDomainDTOsTrialRequestDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get trial requests with filtering (Admin only)
 */
export const getGetTrialRequestsUrl = (params?: GetTrialRequestsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/trial-requests?${stringifiedParams}`
    : `/user-management/api/v1/trial-requests`;
};

export const getTrialRequests = async (
  params?: GetTrialRequestsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTrialRequestDto[]> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTrialRequestDto[]>(
    getGetTrialRequestsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTrialRequestsQueryKey = (
  params?: GetTrialRequestsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "trial-requests",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetTrialRequestsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTrialRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrialRequests>>
  > = ({ signal }) => getTrialRequests(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTrialRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTrialRequestsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrialRequests>>
>;
export type GetTrialRequestsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetTrialRequestsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get trial requests with filtering (Admin only)
 */

export function useGetTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTrialRequestsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get trial requests with filtering (Admin only)
 */
export const prefetchGetTrialRequestsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTrialRequestsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTrialRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTrialRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrialRequests>>
  > = ({ signal }) => getTrialRequests(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTrialRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTrialRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrialRequests>>
>;
export type GetTrialRequestsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTrialRequests<
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetTrialRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequests<
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequests<
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get trial requests with filtering (Admin only)
 */

export function useGetTrialRequests<
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTrialRequestsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get trial requests with filtering (Admin only)
 */
export const prefetchGetTrialRequestsQuery = async <
  TData = Awaited<ReturnType<typeof getTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTrialRequestsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create trial request
 */
export const getCreateTrialRequestUrl = () => {
  return `/user-management/api/v1/trial-requests`;
};

export const createTrialRequest = async (
  userManagementDomainDTOsCreateTrialRequestRequest: UserManagementDomainDTOsCreateTrialRequestRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTrialRequestDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTrialRequestDto>(
    getCreateTrialRequestUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementDomainDTOsCreateTrialRequestRequest),
    },
  );
};

export const getCreateTrialRequestMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrialRequest>>,
    TError,
    { data: UserManagementDomainDTOsCreateTrialRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTrialRequest>>,
  TError,
  { data: UserManagementDomainDTOsCreateTrialRequestRequest },
  TContext
> => {
  const mutationKey = ["createTrialRequest"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTrialRequest>>,
    { data: UserManagementDomainDTOsCreateTrialRequestRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createTrialRequest(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTrialRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTrialRequest>>
>;
export type CreateTrialRequestMutationBody =
  UserManagementDomainDTOsCreateTrialRequestRequest;
export type CreateTrialRequestMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create trial request
 */
export const useCreateTrialRequest = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTrialRequest>>,
      TError,
      { data: UserManagementDomainDTOsCreateTrialRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTrialRequest>>,
  TError,
  { data: UserManagementDomainDTOsCreateTrialRequestRequest },
  TContext
> => {
  const mutationOptions = getCreateTrialRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get trial request by ID
 */
export const getGetTrialRequestUrl = ({
  trialRequestId,
}: GetTrialRequestPathParameters) => {
  return `/user-management/api/v1/trial-requests/${trialRequestId}`;
};

export const getTrialRequest = async (
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTrialRequestDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTrialRequestDto>(
    getGetTrialRequestUrl({ trialRequestId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTrialRequestQueryKey = ({
  trialRequestId,
}: GetTrialRequestPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "trial-requests",
    trialRequestId,
  ] as const;
};

export const useGetTrialRequestInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequest>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTrialRequestQueryKey({ trialRequestId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrialRequest>>> = ({
    signal,
  }) => getTrialRequest({ trialRequestId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTrialRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTrialRequestInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrialRequest>>
>;
export type GetTrialRequestInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTrialRequestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequest>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTrialRequestPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequest>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequest>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequest>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequest>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequest>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequest>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get trial request by ID
 */

export function useGetTrialRequestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTrialRequest>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTrialRequestInfiniteQueryOptions(
    { trialRequestId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get trial request by ID
 */
export const prefetchGetTrialRequestInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTrialRequestInfiniteQueryOptions(
    { trialRequestId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTrialRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTrialRequestQueryKey({ trialRequestId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrialRequest>>> = ({
    signal,
  }) => getTrialRequest({ trialRequestId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTrialRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTrialRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrialRequest>>
>;
export type GetTrialRequestQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTrialRequest<
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTrialRequestPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequest>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequest>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequest<
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrialRequest>>,
          TError,
          Awaited<ReturnType<typeof getTrialRequest>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrialRequest<
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get trial request by ID
 */

export function useGetTrialRequest<
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTrialRequestQueryOptions(
    { trialRequestId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get trial request by ID
 */
export const prefetchGetTrialRequestQuery = async <
  TData = Awaited<ReturnType<typeof getTrialRequest>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { trialRequestId }: GetTrialRequestPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrialRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTrialRequestQueryOptions(
    { trialRequestId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Review trial request (Admin only)
 */
export const getReviewTrialRequestUrl = ({
  trialRequestId,
}: ReviewTrialRequestPathParameters) => {
  return `/user-management/api/v1/trial-requests/${trialRequestId}/review`;
};

export const reviewTrialRequest = async (
  { trialRequestId }: ReviewTrialRequestPathParameters,
  userManagementDomainDTOsReviewTrialRequestRequest: UserManagementDomainDTOsReviewTrialRequestRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTrialRequestDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTrialRequestDto>(
    getReviewTrialRequestUrl({ trialRequestId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementDomainDTOsReviewTrialRequestRequest),
    },
  );
};

export const getReviewTrialRequestMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewTrialRequest>>,
    TError,
    {
      pathParams: ReviewTrialRequestPathParameters;
      data: UserManagementDomainDTOsReviewTrialRequestRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewTrialRequest>>,
  TError,
  {
    pathParams: ReviewTrialRequestPathParameters;
    data: UserManagementDomainDTOsReviewTrialRequestRequest;
  },
  TContext
> => {
  const mutationKey = ["reviewTrialRequest"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewTrialRequest>>,
    {
      pathParams: ReviewTrialRequestPathParameters;
      data: UserManagementDomainDTOsReviewTrialRequestRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return reviewTrialRequest(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReviewTrialRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewTrialRequest>>
>;
export type ReviewTrialRequestMutationBody =
  UserManagementDomainDTOsReviewTrialRequestRequest;
export type ReviewTrialRequestMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Review trial request (Admin only)
 */
export const useReviewTrialRequest = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewTrialRequest>>,
      TError,
      {
        pathParams: ReviewTrialRequestPathParameters;
        data: UserManagementDomainDTOsReviewTrialRequestRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof reviewTrialRequest>>,
  TError,
  {
    pathParams: ReviewTrialRequestPathParameters;
    data: UserManagementDomainDTOsReviewTrialRequestRequest;
  },
  TContext
> => {
  const mutationOptions = getReviewTrialRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Start trial from approved request (Admin only)
 */
export const getStartTrialUrl = ({
  trialRequestId,
}: StartTrialPathParameters) => {
  return `/user-management/api/v1/trial-requests/${trialRequestId}/start`;
};

export const startTrial = async (
  { trialRequestId }: StartTrialPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTeamSubscriptionDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTeamSubscriptionDto>(
    getStartTrialUrl({ trialRequestId }),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getStartTrialMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof startTrial>>,
    TError,
    { pathParams: StartTrialPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof startTrial>>,
  TError,
  { pathParams: StartTrialPathParameters },
  TContext
> => {
  const mutationKey = ["startTrial"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof startTrial>>,
    { pathParams: StartTrialPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return startTrial(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StartTrialMutationResult = NonNullable<
  Awaited<ReturnType<typeof startTrial>>
>;

export type StartTrialMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Start trial from approved request (Admin only)
 */
export const useStartTrial = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof startTrial>>,
      TError,
      { pathParams: StartTrialPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof startTrial>>,
  TError,
  { pathParams: StartTrialPathParameters },
  TContext
> => {
  const mutationOptions = getStartTrialMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get pending trial requests (Admin only)
 */
export const getGetPendingTrialRequestsUrl = (
  params?: GetPendingTrialRequestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/trial-requests/pending?${stringifiedParams}`
    : `/user-management/api/v1/trial-requests/pending`;
};

export const getPendingTrialRequests = async (
  params?: GetPendingTrialRequestsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTrialRequestDto[]> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTrialRequestDto[]>(
    getGetPendingTrialRequestsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetPendingTrialRequestsQueryKey = (
  params?: GetPendingTrialRequestsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "trial-requests",
    "pending",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetPendingTrialRequestsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPendingTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPendingTrialRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPendingTrialRequests>>
  > = ({ signal }) =>
    getPendingTrialRequests(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPendingTrialRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPendingTrialRequestsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPendingTrialRequests>>
>;
export type GetPendingTrialRequestsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPendingTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPendingTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetPendingTrialRequestsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPendingTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getPendingTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPendingTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPendingTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPendingTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getPendingTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPendingTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPendingTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get pending trial requests (Admin only)
 */

export function useGetPendingTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPendingTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPendingTrialRequestsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get pending trial requests (Admin only)
 */
export const prefetchGetPendingTrialRequestsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPendingTrialRequestsInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetPendingTrialRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPendingTrialRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPendingTrialRequests>>
  > = ({ signal }) =>
    getPendingTrialRequests(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getPendingTrialRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPendingTrialRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPendingTrialRequests>>
>;
export type GetPendingTrialRequestsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPendingTrialRequests<
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetPendingTrialRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPendingTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getPendingTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPendingTrialRequests<
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPendingTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getPendingTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPendingTrialRequests<
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get pending trial requests (Admin only)
 */

export function useGetPendingTrialRequests<
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPendingTrialRequestsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get pending trial requests (Admin only)
 */
export const prefetchGetPendingTrialRequestsQuery = async <
  TData = Awaited<ReturnType<typeof getPendingTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetPendingTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPendingTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPendingTrialRequestsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get team trial requests
 */
export const getGetTeamTrialRequestsUrl = (
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/trial-requests/team/${teamId}?${stringifiedParams}`
    : `/user-management/api/v1/trial-requests/team/${teamId}`;
};

export const getTeamTrialRequests = async (
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsTrialRequestDto[]> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsTrialRequestDto[]>(
    getGetTeamTrialRequestsUrl({ teamId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamTrialRequestsQueryKey = (
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "trial-requests",
    "team",
    teamId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetTeamTrialRequestsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamTrialRequestsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamTrialRequests>>
  > = ({ signal }) =>
    getTeamTrialRequests({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamTrialRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamTrialRequestsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamTrialRequests>>
>;
export type GetTeamTrialRequestsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamTrialRequestsPathParameters,
  params: undefined | GetTeamTrialRequestsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTeamTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTeamTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team trial requests
 */

export function useGetTeamTrialRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamTrialRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamTrialRequestsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team trial requests
 */
export const prefetchGetTeamTrialRequestsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamTrialRequestsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamTrialRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamTrialRequestsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamTrialRequests>>
  > = ({ signal }) =>
    getTeamTrialRequests({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamTrialRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamTrialRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamTrialRequests>>
>;
export type GetTeamTrialRequestsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamTrialRequests<
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamTrialRequestsPathParameters,
  params: undefined | GetTeamTrialRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTeamTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamTrialRequests<
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamTrialRequests>>,
          TError,
          Awaited<ReturnType<typeof getTeamTrialRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamTrialRequests<
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team trial requests
 */

export function useGetTeamTrialRequests<
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamTrialRequestsQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team trial requests
 */
export const prefetchGetTeamTrialRequestsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamTrialRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamTrialRequestsPathParameters,
  params?: GetTeamTrialRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamTrialRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamTrialRequestsQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
