/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteBrandPathParameters,
  GetBrandByTeamPathParameters,
  GetBrandPathParameters,
  GetBrandsParams,
  GetSelfDistributedBrandsParams,
  UpdateBrandPathParameters,
  UserManagementAPIModelsRequestsDeleteBrandRequest,
  UserManagementAPIModelsRequestsUpdateBrandRequest,
  UserManagementDomainDTOsBrandDto,
  UserManagementDomainDTOsBrandListDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all brands with filtering and pagination
 */
export const getGetBrandsUrl = (params?: GetBrandsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/brands?${stringifiedParams}`
    : `/user-management/api/v1/brands`;
};

export const getBrands = async (
  params?: GetBrandsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsBrandListDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsBrandListDto>(
    getGetBrandsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetBrandsQueryKey = (params?: GetBrandsParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "brands",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetBrandsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBrandsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrands>>> = ({
    signal,
  }) => getBrands(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getBrands>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrands>>
>;
export type GetBrandsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetBrandsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrands>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrands>>,
          TError,
          Awaited<ReturnType<typeof getBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrands>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrands>>,
          TError,
          Awaited<ReturnType<typeof getBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all brands with filtering and pagination
 */

export function useGetBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all brands with filtering and pagination
 */
export const prefetchGetBrandsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetBrandsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrands>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBrandsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrands>>> = ({
    signal,
  }) => getBrands(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getBrands>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrands>>
>;
export type GetBrandsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrands<
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetBrandsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrands>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrands>>,
          TError,
          Awaited<ReturnType<typeof getBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrands<
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrands>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrands>>,
          TError,
          Awaited<ReturnType<typeof getBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrands<
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrands>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all brands with filtering and pagination
 */

export function useGetBrands<
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrands>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all brands with filtering and pagination
 */
export const prefetchGetBrandsQuery = async <
  TData = Awaited<ReturnType<typeof getBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrands>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get a brand by ID
 */
export const getGetBrandUrl = ({ id }: GetBrandPathParameters) => {
  return `/user-management/api/v1/brands/${id}`;
};

export const getBrand = async (
  { id }: GetBrandPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsBrandDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsBrandDto>(
    getGetBrandUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetBrandQueryKey = ({ id }: GetBrandPathParameters) => {
  return ["user-management", "api", "v1", "brands", id] as const;
};

export const useGetBrandInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBrandQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrand>>> = ({
    signal,
  }) => getBrand({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getBrand>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrand>>
>;
export type GetBrandInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrand>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrand>>,
          TError,
          Awaited<ReturnType<typeof getBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrand>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrand>>,
          TError,
          Awaited<ReturnType<typeof getBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a brand by ID
 */

export function useGetBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a brand by ID
 */
export const prefetchGetBrandInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetBrandQueryOptions = <
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrand>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBrandQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrand>>> = ({
    signal,
  }) => getBrand({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getBrand>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrand>>
>;
export type GetBrandQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrand<
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrand>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrand>>,
          TError,
          Awaited<ReturnType<typeof getBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrand<
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrand>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrand>>,
          TError,
          Awaited<ReturnType<typeof getBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrand<
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrand>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a brand by ID
 */

export function useGetBrand<
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrand>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a brand by ID
 */
export const prefetchGetBrandQuery = async <
  TData = Awaited<ReturnType<typeof getBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetBrandPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrand>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update a brand
 */
export const getUpdateBrandUrl = ({ id }: UpdateBrandPathParameters) => {
  return `/user-management/api/v1/brands/${id}`;
};

export const updateBrand = async (
  { id }: UpdateBrandPathParameters,
  userManagementAPIModelsRequestsUpdateBrandRequest: UserManagementAPIModelsRequestsUpdateBrandRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsBrandDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsBrandDto>(
    getUpdateBrandUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementAPIModelsRequestsUpdateBrandRequest),
    },
  );
};

export const getUpdateBrandMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateBrand>>,
    TError,
    {
      pathParams: UpdateBrandPathParameters;
      data: UserManagementAPIModelsRequestsUpdateBrandRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateBrand>>,
  TError,
  {
    pathParams: UpdateBrandPathParameters;
    data: UserManagementAPIModelsRequestsUpdateBrandRequest;
  },
  TContext
> => {
  const mutationKey = ["updateBrand"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateBrand>>,
    {
      pathParams: UpdateBrandPathParameters;
      data: UserManagementAPIModelsRequestsUpdateBrandRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateBrand(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateBrandMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateBrand>>
>;
export type UpdateBrandMutationBody =
  UserManagementAPIModelsRequestsUpdateBrandRequest;
export type UpdateBrandMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update a brand
 */
export const useUpdateBrand = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateBrand>>,
      TError,
      {
        pathParams: UpdateBrandPathParameters;
        data: UserManagementAPIModelsRequestsUpdateBrandRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateBrand>>,
  TError,
  {
    pathParams: UpdateBrandPathParameters;
    data: UserManagementAPIModelsRequestsUpdateBrandRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateBrandMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a brand
 */
export const getDeleteBrandUrl = ({ id }: DeleteBrandPathParameters) => {
  return `/user-management/api/v1/brands/${id}`;
};

export const deleteBrand = async (
  { id }: DeleteBrandPathParameters,
  userManagementAPIModelsRequestsDeleteBrandRequest: UserManagementAPIModelsRequestsDeleteBrandRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteBrandUrl({ id }), {
    ...options,
    method: "DELETE",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(userManagementAPIModelsRequestsDeleteBrandRequest),
  });
};

export const getDeleteBrandMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteBrand>>,
    TError,
    {
      pathParams: DeleteBrandPathParameters;
      data: UserManagementAPIModelsRequestsDeleteBrandRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteBrand>>,
  TError,
  {
    pathParams: DeleteBrandPathParameters;
    data: UserManagementAPIModelsRequestsDeleteBrandRequest;
  },
  TContext
> => {
  const mutationKey = ["deleteBrand"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteBrand>>,
    {
      pathParams: DeleteBrandPathParameters;
      data: UserManagementAPIModelsRequestsDeleteBrandRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return deleteBrand(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteBrandMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteBrand>>
>;
export type DeleteBrandMutationBody =
  UserManagementAPIModelsRequestsDeleteBrandRequest;
export type DeleteBrandMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a brand
 */
export const useDeleteBrand = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteBrand>>,
      TError,
      {
        pathParams: DeleteBrandPathParameters;
        data: UserManagementAPIModelsRequestsDeleteBrandRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteBrand>>,
  TError,
  {
    pathParams: DeleteBrandPathParameters;
    data: UserManagementAPIModelsRequestsDeleteBrandRequest;
  },
  TContext
> => {
  const mutationOptions = getDeleteBrandMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get brands that have self-distributed retailers
 */
export const getGetSelfDistributedBrandsUrl = (
  params?: GetSelfDistributedBrandsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/brands/self-distributed?${stringifiedParams}`
    : `/user-management/api/v1/brands/self-distributed`;
};

export const getSelfDistributedBrands = async (
  params?: GetSelfDistributedBrandsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsBrandListDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsBrandListDto>(
    getGetSelfDistributedBrandsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetSelfDistributedBrandsQueryKey = (
  params?: GetSelfDistributedBrandsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "brands",
    "self-distributed",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetSelfDistributedBrandsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getSelfDistributedBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSelfDistributedBrandsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSelfDistributedBrands>>
  > = ({ signal }) =>
    getSelfDistributedBrands(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getSelfDistributedBrands>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSelfDistributedBrandsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSelfDistributedBrands>>
>;
export type GetSelfDistributedBrandsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetSelfDistributedBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSelfDistributedBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetSelfDistributedBrandsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSelfDistributedBrands>>,
          TError,
          Awaited<ReturnType<typeof getSelfDistributedBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSelfDistributedBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSelfDistributedBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSelfDistributedBrands>>,
          TError,
          Awaited<ReturnType<typeof getSelfDistributedBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSelfDistributedBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSelfDistributedBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get brands that have self-distributed retailers
 */

export function useGetSelfDistributedBrandsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSelfDistributedBrands>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSelfDistributedBrandsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get brands that have self-distributed retailers
 */
export const prefetchGetSelfDistributedBrandsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetSelfDistributedBrandsInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetSelfDistributedBrandsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSelfDistributedBrandsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSelfDistributedBrands>>
  > = ({ signal }) =>
    getSelfDistributedBrands(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getSelfDistributedBrands>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSelfDistributedBrandsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSelfDistributedBrands>>
>;
export type GetSelfDistributedBrandsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetSelfDistributedBrands<
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetSelfDistributedBrandsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSelfDistributedBrands>>,
          TError,
          Awaited<ReturnType<typeof getSelfDistributedBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSelfDistributedBrands<
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSelfDistributedBrands>>,
          TError,
          Awaited<ReturnType<typeof getSelfDistributedBrands>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSelfDistributedBrands<
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get brands that have self-distributed retailers
 */

export function useGetSelfDistributedBrands<
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetSelfDistributedBrandsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get brands that have self-distributed retailers
 */
export const prefetchGetSelfDistributedBrandsQuery = async <
  TData = Awaited<ReturnType<typeof getSelfDistributedBrands>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetSelfDistributedBrandsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSelfDistributedBrands>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetSelfDistributedBrandsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get a brand by team ID
 */
export const getGetBrandByTeamUrl = ({
  teamId,
}: GetBrandByTeamPathParameters) => {
  return `/user-management/api/v1/brands/team/${teamId}`;
};

export const getBrandByTeam = async (
  { teamId }: GetBrandByTeamPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsBrandDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsBrandDto>(
    getGetBrandByTeamUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetBrandByTeamQueryKey = ({
  teamId,
}: GetBrandByTeamPathParameters) => {
  return ["user-management", "api", "v1", "brands", "team", teamId] as const;
};

export const useGetBrandByTeamInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetBrandByTeamQueryKey({ teamId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrandByTeam>>> = ({
    signal,
  }) => getBrandByTeam({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getBrandByTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandByTeamInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrandByTeam>>
>;
export type GetBrandByTeamInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrandByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandByTeamPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandByTeam>>,
          TError,
          Awaited<ReturnType<typeof getBrandByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandByTeam>>,
          TError,
          Awaited<ReturnType<typeof getBrandByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a brand by team ID
 */

export function useGetBrandByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandByTeamInfiniteQueryOptions(
    { teamId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a brand by team ID
 */
export const prefetchGetBrandByTeamInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandByTeamInfiniteQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetBrandByTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrandByTeam>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetBrandByTeamQueryKey({ teamId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBrandByTeam>>> = ({
    signal,
  }) => getBrandByTeam({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getBrandByTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandByTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrandByTeam>>
>;
export type GetBrandByTeamQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrandByTeam<
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandByTeamPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrandByTeam>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandByTeam>>,
          TError,
          Awaited<ReturnType<typeof getBrandByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandByTeam<
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrandByTeam>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandByTeam>>,
          TError,
          Awaited<ReturnType<typeof getBrandByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandByTeam<
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrandByTeam>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a brand by team ID
 */

export function useGetBrandByTeam<
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrandByTeam>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandByTeamQueryOptions({ teamId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a brand by team ID
 */
export const prefetchGetBrandByTeamQuery = async <
  TData = Awaited<ReturnType<typeof getBrandByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetBrandByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBrandByTeam>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandByTeamQueryOptions({ teamId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
