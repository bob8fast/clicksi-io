/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CheckFeatureAccessParams,
  CheckFeatureAccessPathParameters,
  ClicksiDataContractsCommonDtoApiResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetTeamUsageLimitsParams,
  GetTeamUsageLimitsPathParameters,
  GetUsageLimitsParams,
  GetUsageLimitsPathParameters,
  ResetUsagePathParameters,
  UserManagementAPIControllersFeatureAccessResponse,
  UserManagementDomainDTOsUpdateUsageRequest,
  UserManagementDomainDTOsUsageLimitDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get team usage limits
 */
export const getGetTeamUsageLimitsUrl = (
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/usage/team/${teamId}/limits?${stringifiedParams}`
    : `/user-management/api/v1/usage/team/${teamId}/limits`;
};

export const getTeamUsageLimits = async (
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUsageLimitDto[]> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUsageLimitDto[]>(
    getGetTeamUsageLimitsUrl({ teamId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamUsageLimitsQueryKey = (
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "usage",
    "team",
    teamId,
    "limits",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetTeamUsageLimitsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamUsageLimitsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamUsageLimits>>
  > = ({ signal }) =>
    getTeamUsageLimits({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamUsageLimits>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamUsageLimitsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamUsageLimits>>
>;
export type GetTeamUsageLimitsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamUsageLimitsPathParameters,
  params: undefined | GetTeamUsageLimitsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getTeamUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getTeamUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team usage limits
 */

export function useGetTeamUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamUsageLimitsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team usage limits
 */
export const prefetchGetTeamUsageLimitsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamUsageLimitsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamUsageLimitsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamUsageLimitsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamUsageLimits>>
  > = ({ signal }) =>
    getTeamUsageLimits({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamUsageLimits>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamUsageLimitsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamUsageLimits>>
>;
export type GetTeamUsageLimitsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamUsageLimits<
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamUsageLimitsPathParameters,
  params: undefined | GetTeamUsageLimitsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getTeamUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamUsageLimits<
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getTeamUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamUsageLimits<
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get team usage limits
 */

export function useGetTeamUsageLimits<
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamUsageLimitsQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get team usage limits
 */
export const prefetchGetTeamUsageLimitsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamUsageLimitsPathParameters,
  params?: GetTeamUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamUsageLimitsQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Reset usage for a feature (Admin only)
 */
export const getResetUsageUrl = ({
  teamId,
  feature,
}: ResetUsagePathParameters) => {
  return `/user-management/api/v1/usage/team/${teamId}/reset/${feature}`;
};

export const resetUsage = async (
  { teamId, feature }: ResetUsagePathParameters,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getResetUsageUrl({ teamId, feature }),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getResetUsageMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetUsage>>,
    TError,
    { pathParams: ResetUsagePathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetUsage>>,
  TError,
  { pathParams: ResetUsagePathParameters },
  TContext
> => {
  const mutationKey = ["resetUsage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetUsage>>,
    { pathParams: ResetUsagePathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return resetUsage(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetUsageMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetUsage>>
>;

export type ResetUsageMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Reset usage for a feature (Admin only)
 */
export const useResetUsage = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resetUsage>>,
      TError,
      { pathParams: ResetUsagePathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof resetUsage>>,
  TError,
  { pathParams: ResetUsagePathParameters },
  TContext
> => {
  const mutationOptions = getResetUsageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update usage count (Internal API call)
 */
export const getUpdateUsageUrl = () => {
  return `/user-management/api/v1/usage/update`;
};

export const updateUsage = async (
  userManagementDomainDTOsUpdateUsageRequest: UserManagementDomainDTOsUpdateUsageRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getUpdateUsageUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementDomainDTOsUpdateUsageRequest),
    },
  );
};

export const getUpdateUsageMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUsage>>,
    TError,
    { data: UserManagementDomainDTOsUpdateUsageRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUsage>>,
  TError,
  { data: UserManagementDomainDTOsUpdateUsageRequest },
  TContext
> => {
  const mutationKey = ["updateUsage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUsage>>,
    { data: UserManagementDomainDTOsUpdateUsageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateUsage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUsageMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUsage>>
>;
export type UpdateUsageMutationBody =
  UserManagementDomainDTOsUpdateUsageRequest;
export type UpdateUsageMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update usage count (Internal API call)
 */
export const useUpdateUsage = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUsage>>,
      TError,
      { data: UserManagementDomainDTOsUpdateUsageRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUsage>>,
  TError,
  { data: UserManagementDomainDTOsUpdateUsageRequest },
  TContext
> => {
  const mutationOptions = getUpdateUsageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Check if user can access a feature
 */
export const getCheckFeatureAccessUrl = (
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/usage/user/${userId}/check/${feature}?${stringifiedParams}`
    : `/user-management/api/v1/usage/user/${userId}/check/${feature}`;
};

export const checkFeatureAccess = async (
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: RequestInit,
): Promise<UserManagementAPIControllersFeatureAccessResponse> => {
  return gatewayServiceCustomFetch<UserManagementAPIControllersFeatureAccessResponse>(
    getCheckFeatureAccessUrl({ userId, feature }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getCheckFeatureAccessQueryKey = (
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "usage",
    "user",
    userId,
    "check",
    feature,
    ...(params ? [params] : []),
  ] as const;
};

export const useCheckFeatureAccessInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof checkFeatureAccess>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCheckFeatureAccessQueryKey({ userId, feature }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkFeatureAccess>>
  > = ({ signal }) =>
    checkFeatureAccess({ userId, feature }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof checkFeatureAccess>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckFeatureAccessInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkFeatureAccess>>
>;
export type CheckFeatureAccessInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useCheckFeatureAccessInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof checkFeatureAccess>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: CheckFeatureAccessPathParameters,
  params: undefined | CheckFeatureAccessParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkFeatureAccess>>,
          TError,
          Awaited<ReturnType<typeof checkFeatureAccess>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckFeatureAccessInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof checkFeatureAccess>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkFeatureAccess>>,
          TError,
          Awaited<ReturnType<typeof checkFeatureAccess>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckFeatureAccessInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof checkFeatureAccess>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if user can access a feature
 */

export function useCheckFeatureAccessInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof checkFeatureAccess>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useCheckFeatureAccessInfiniteQueryOptions(
    { userId, feature },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Check if user can access a feature
 */
export const prefetchCheckFeatureAccessInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useCheckFeatureAccessInfiniteQueryOptions(
    { userId, feature },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useCheckFeatureAccessQueryOptions = <
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCheckFeatureAccessQueryKey({ userId, feature }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkFeatureAccess>>
  > = ({ signal }) =>
    checkFeatureAccess({ userId, feature }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof checkFeatureAccess>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckFeatureAccessQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkFeatureAccess>>
>;
export type CheckFeatureAccessQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useCheckFeatureAccess<
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: CheckFeatureAccessPathParameters,
  params: undefined | CheckFeatureAccessParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkFeatureAccess>>,
          TError,
          Awaited<ReturnType<typeof checkFeatureAccess>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckFeatureAccess<
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkFeatureAccess>>,
          TError,
          Awaited<ReturnType<typeof checkFeatureAccess>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckFeatureAccess<
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if user can access a feature
 */

export function useCheckFeatureAccess<
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useCheckFeatureAccessQueryOptions(
    { userId, feature },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Check if user can access a feature
 */
export const prefetchCheckFeatureAccessQuery = async <
  TData = Awaited<ReturnType<typeof checkFeatureAccess>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId, feature }: CheckFeatureAccessPathParameters,
  params?: CheckFeatureAccessParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkFeatureAccess>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useCheckFeatureAccessQueryOptions(
    { userId, feature },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get user usage limits
 */
export const getGetUsageLimitsUrl = (
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/usage/user/${userId}/limits?${stringifiedParams}`
    : `/user-management/api/v1/usage/user/${userId}/limits`;
};

export const getUsageLimits = async (
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsUsageLimitDto[]> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsUsageLimitDto[]>(
    getGetUsageLimitsUrl({ userId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetUsageLimitsQueryKey = (
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "usage",
    "user",
    userId,
    "limits",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetUsageLimitsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsageLimitsQueryKey({ userId }, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsageLimits>>> = ({
    signal,
  }) => getUsageLimits({ userId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsageLimits>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsageLimitsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsageLimits>>
>;
export type GetUsageLimitsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUsageLimitsPathParameters,
  params: undefined | GetUsageLimitsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsageLimits>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsageLimits>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user usage limits
 */

export function useGetUsageLimitsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUsageLimits>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUsageLimitsInfiniteQueryOptions(
    { userId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user usage limits
 */
export const prefetchGetUsageLimitsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUsageLimits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUsageLimitsInfiniteQueryOptions(
    { userId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetUsageLimitsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsageLimits>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsageLimitsQueryKey({ userId }, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsageLimits>>> = ({
    signal,
  }) => getUsageLimits({ userId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUsageLimits>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsageLimitsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsageLimits>>
>;
export type GetUsageLimitsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUsageLimits<
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUsageLimitsPathParameters,
  params: undefined | GetUsageLimitsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsageLimits>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsageLimits<
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsageLimits>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsageLimits>>,
          TError,
          Awaited<ReturnType<typeof getUsageLimits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsageLimits<
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsageLimits>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user usage limits
 */

export function useGetUsageLimits<
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsageLimits>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUsageLimitsQueryOptions(
    { userId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user usage limits
 */
export const prefetchGetUsageLimitsQuery = async <
  TData = Awaited<ReturnType<typeof getUsageLimits>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUsageLimitsPathParameters,
  params?: GetUsageLimitsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsageLimits>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUsageLimitsQueryOptions(
    { userId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
