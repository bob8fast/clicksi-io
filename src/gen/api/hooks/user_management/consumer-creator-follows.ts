/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetConsumerFollowingCountPathParameters,
  GetConsumerFollowingParams,
  GetConsumerFollowingPathParameters,
  GetCreatorFollowersCountPathParameters,
  GetCreatorFollowersParams,
  GetCreatorFollowersPathParameters,
  GetCreatorSuggestionsParams,
  GetCreatorSuggestionsPathParameters,
  IsFollowingParams,
  UserManagementAPICQRSCommandsConsumerCreatorFollowsFollowCreatorResult,
  UserManagementAPICQRSCommandsConsumerCreatorFollowsUnfollowCreatorResult,
  UserManagementAPICQRSQueriesConsumerCreatorFollowsGetConsumerFollowingCountResult,
  UserManagementAPICQRSQueriesConsumerCreatorFollowsGetConsumerFollowingResult,
  UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorFollowersCountResult,
  UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorFollowersResult,
  UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorSuggestionsResult,
  UserManagementAPICQRSQueriesConsumerCreatorFollowsIsConsumerFollowingCreatorResult,
  UserManagementAPIModelsRequestsFollowCreatorRequest,
  UserManagementAPIModelsRequestsUnfollowCreatorRequest,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Follow a creator as a consumer
 */
export const getFollowCreatorUrl = () => {
  return `/user-management/api/v1/consumer-creator-follows/follow`;
};

export const followCreator = async (
  userManagementAPIModelsRequestsFollowCreatorRequest: UserManagementAPIModelsRequestsFollowCreatorRequest,
  options?: RequestInit,
): Promise<UserManagementAPICQRSCommandsConsumerCreatorFollowsFollowCreatorResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSCommandsConsumerCreatorFollowsFollowCreatorResult>(
    getFollowCreatorUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementAPIModelsRequestsFollowCreatorRequest),
    },
  );
};

export const getFollowCreatorMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof followCreator>>,
    TError,
    { data: UserManagementAPIModelsRequestsFollowCreatorRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof followCreator>>,
  TError,
  { data: UserManagementAPIModelsRequestsFollowCreatorRequest },
  TContext
> => {
  const mutationKey = ["followCreator"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof followCreator>>,
    { data: UserManagementAPIModelsRequestsFollowCreatorRequest }
  > = (props) => {
    const { data } = props ?? {};

    return followCreator(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FollowCreatorMutationResult = NonNullable<
  Awaited<ReturnType<typeof followCreator>>
>;
export type FollowCreatorMutationBody =
  UserManagementAPIModelsRequestsFollowCreatorRequest;
export type FollowCreatorMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Follow a creator as a consumer
 */
export const useFollowCreator = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof followCreator>>,
      TError,
      { data: UserManagementAPIModelsRequestsFollowCreatorRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof followCreator>>,
  TError,
  { data: UserManagementAPIModelsRequestsFollowCreatorRequest },
  TContext
> => {
  const mutationOptions = getFollowCreatorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get consumers following a creator
 */
export const getGetCreatorFollowersUrl = (
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/consumer-creator-follows/followers/${creatorId}?${stringifiedParams}`
    : `/user-management/api/v1/consumer-creator-follows/followers/${creatorId}`;
};

export const getCreatorFollowers = async (
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: RequestInit,
): Promise<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorFollowersResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorFollowersResult>(
    getGetCreatorFollowersUrl({ creatorId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorFollowersQueryKey = (
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "consumer-creator-follows",
    "followers",
    creatorId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetCreatorFollowersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCreatorFollowersQueryKey({ creatorId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorFollowers>>
  > = ({ signal }) =>
    getCreatorFollowers({ creatorId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreatorFollowers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorFollowersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorFollowers>>
>;
export type GetCreatorFollowersInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorFollowersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersPathParameters,
  params: undefined | GetCreatorFollowersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowers>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowers>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get consumers following a creator
 */

export function useGetCreatorFollowersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorFollowersInfiniteQueryOptions(
    { creatorId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get consumers following a creator
 */
export const prefetchGetCreatorFollowersInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorFollowersInfiniteQueryOptions(
    { creatorId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorFollowersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCreatorFollowersQueryKey({ creatorId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorFollowers>>
  > = ({ signal }) =>
    getCreatorFollowers({ creatorId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreatorFollowers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorFollowersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorFollowers>>
>;
export type GetCreatorFollowersQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorFollowers<
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersPathParameters,
  params: undefined | GetCreatorFollowersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowers>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowers<
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowers>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowers<
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get consumers following a creator
 */

export function useGetCreatorFollowers<
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorFollowersQueryOptions(
    { creatorId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get consumers following a creator
 */
export const prefetchGetCreatorFollowersQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorFollowers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { creatorId }: GetCreatorFollowersPathParameters,
  params?: GetCreatorFollowersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorFollowersQueryOptions(
    { creatorId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get count of consumers following a creator
 */
export const getGetCreatorFollowersCountUrl = ({
  creatorId,
}: GetCreatorFollowersCountPathParameters) => {
  return `/user-management/api/v1/consumer-creator-follows/followers/${creatorId}/count`;
};

export const getCreatorFollowersCount = async (
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: RequestInit,
): Promise<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorFollowersCountResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorFollowersCountResult>(
    getGetCreatorFollowersCountUrl({ creatorId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorFollowersCountQueryKey = ({
  creatorId,
}: GetCreatorFollowersCountPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "consumer-creator-follows",
    "followers",
    creatorId,
    "count",
  ] as const;
};

export const useGetCreatorFollowersCountInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowersCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCreatorFollowersCountQueryKey({ creatorId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorFollowersCount>>
  > = ({ signal }) =>
    getCreatorFollowersCount({ creatorId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreatorFollowersCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorFollowersCountInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorFollowersCount>>
>;
export type GetCreatorFollowersCountInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorFollowersCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowersCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersCountPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowersCount>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowersCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowersCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowersCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowersCount>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowersCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowersCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowersCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get count of consumers following a creator
 */

export function useGetCreatorFollowersCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorFollowersCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorFollowersCountInfiniteQueryOptions(
    { creatorId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get count of consumers following a creator
 */
export const prefetchGetCreatorFollowersCountInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorFollowersCountInfiniteQueryOptions(
    { creatorId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorFollowersCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCreatorFollowersCountQueryKey({ creatorId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorFollowersCount>>
  > = ({ signal }) =>
    getCreatorFollowersCount({ creatorId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreatorFollowersCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorFollowersCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorFollowersCount>>
>;
export type GetCreatorFollowersCountQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorFollowersCount<
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersCountPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowersCount>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowersCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowersCount<
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorFollowersCount>>,
          TError,
          Awaited<ReturnType<typeof getCreatorFollowersCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorFollowersCount<
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get count of consumers following a creator
 */

export function useGetCreatorFollowersCount<
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorFollowersCountQueryOptions(
    { creatorId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get count of consumers following a creator
 */
export const prefetchGetCreatorFollowersCountQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorFollowersCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { creatorId }: GetCreatorFollowersCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorFollowersCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorFollowersCountQueryOptions(
    { creatorId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get creators that a consumer is following
 */
export const getGetConsumerFollowingUrl = (
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/consumer-creator-follows/following/${consumerId}?${stringifiedParams}`
    : `/user-management/api/v1/consumer-creator-follows/following/${consumerId}`;
};

export const getConsumerFollowing = async (
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: RequestInit,
): Promise<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetConsumerFollowingResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetConsumerFollowingResult>(
    getGetConsumerFollowingUrl({ consumerId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetConsumerFollowingQueryKey = (
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "consumer-creator-follows",
    "following",
    consumerId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetConsumerFollowingInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetConsumerFollowingQueryKey({ consumerId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConsumerFollowing>>
  > = ({ signal }) =>
    getConsumerFollowing({ consumerId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConsumerFollowing>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConsumerFollowingInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConsumerFollowing>>
>;
export type GetConsumerFollowingInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConsumerFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingPathParameters,
  params: undefined | GetConsumerFollowingParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowing>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowing>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get creators that a consumer is following
 */

export function useGetConsumerFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConsumerFollowingInfiniteQueryOptions(
    { consumerId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get creators that a consumer is following
 */
export const prefetchGetConsumerFollowingInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConsumerFollowingInfiniteQueryOptions(
    { consumerId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConsumerFollowingQueryOptions = <
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetConsumerFollowingQueryKey({ consumerId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConsumerFollowing>>
  > = ({ signal }) =>
    getConsumerFollowing({ consumerId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConsumerFollowing>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConsumerFollowingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConsumerFollowing>>
>;
export type GetConsumerFollowingQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConsumerFollowing<
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingPathParameters,
  params: undefined | GetConsumerFollowingParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowing>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowing<
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowing>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowing<
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get creators that a consumer is following
 */

export function useGetConsumerFollowing<
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConsumerFollowingQueryOptions(
    { consumerId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get creators that a consumer is following
 */
export const prefetchGetConsumerFollowingQuery = async <
  TData = Awaited<ReturnType<typeof getConsumerFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { consumerId }: GetConsumerFollowingPathParameters,
  params?: GetConsumerFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConsumerFollowingQueryOptions(
    { consumerId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get count of creators a consumer is following
 */
export const getGetConsumerFollowingCountUrl = ({
  consumerId,
}: GetConsumerFollowingCountPathParameters) => {
  return `/user-management/api/v1/consumer-creator-follows/following/${consumerId}/count`;
};

export const getConsumerFollowingCount = async (
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: RequestInit,
): Promise<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetConsumerFollowingCountResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetConsumerFollowingCountResult>(
    getGetConsumerFollowingCountUrl({ consumerId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetConsumerFollowingCountQueryKey = ({
  consumerId,
}: GetConsumerFollowingCountPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "consumer-creator-follows",
    "following",
    consumerId,
    "count",
  ] as const;
};

export const useGetConsumerFollowingCountInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowingCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetConsumerFollowingCountQueryKey({ consumerId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConsumerFollowingCount>>
  > = ({ signal }) =>
    getConsumerFollowingCount({ consumerId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConsumerFollowingCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConsumerFollowingCountInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConsumerFollowingCount>>
>;
export type GetConsumerFollowingCountInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConsumerFollowingCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowingCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingCountPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowingCount>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowingCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowingCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowingCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowingCount>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowingCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowingCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowingCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get count of creators a consumer is following
 */

export function useGetConsumerFollowingCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConsumerFollowingCount>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConsumerFollowingCountInfiniteQueryOptions(
    { consumerId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get count of creators a consumer is following
 */
export const prefetchGetConsumerFollowingCountInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConsumerFollowingCountInfiniteQueryOptions(
    { consumerId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConsumerFollowingCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetConsumerFollowingCountQueryKey({ consumerId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConsumerFollowingCount>>
  > = ({ signal }) =>
    getConsumerFollowingCount({ consumerId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConsumerFollowingCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConsumerFollowingCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConsumerFollowingCount>>
>;
export type GetConsumerFollowingCountQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConsumerFollowingCount<
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingCountPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowingCount>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowingCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowingCount<
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConsumerFollowingCount>>,
          TError,
          Awaited<ReturnType<typeof getConsumerFollowingCount>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConsumerFollowingCount<
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get count of creators a consumer is following
 */

export function useGetConsumerFollowingCount<
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConsumerFollowingCountQueryOptions(
    { consumerId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get count of creators a consumer is following
 */
export const prefetchGetConsumerFollowingCountQuery = async <
  TData = Awaited<ReturnType<typeof getConsumerFollowingCount>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { consumerId }: GetConsumerFollowingCountPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConsumerFollowingCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConsumerFollowingCountQueryOptions(
    { consumerId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Check if a consumer is following a creator
 */
export const getIsFollowingUrl = (params?: IsFollowingParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/consumer-creator-follows/is-following?${stringifiedParams}`
    : `/user-management/api/v1/consumer-creator-follows/is-following`;
};

export const isFollowing = async (
  params?: IsFollowingParams,
  options?: RequestInit,
): Promise<UserManagementAPICQRSQueriesConsumerCreatorFollowsIsConsumerFollowingCreatorResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSQueriesConsumerCreatorFollowsIsConsumerFollowingCreatorResult>(
    getIsFollowingUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getIsFollowingQueryKey = (params?: IsFollowingParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "consumer-creator-follows",
    "is-following",
    ...(params ? [params] : []),
  ] as const;
};

export const useIsFollowingInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof isFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIsFollowingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isFollowing>>> = ({
    signal,
  }) => isFollowing(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof isFollowing>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IsFollowingInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof isFollowing>>
>;
export type IsFollowingInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useIsFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | IsFollowingParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isFollowing>>,
          TError,
          Awaited<ReturnType<typeof isFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isFollowing>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isFollowing>>,
          TError,
          Awaited<ReturnType<typeof isFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if a consumer is following a creator
 */

export function useIsFollowingInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isFollowing>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useIsFollowingInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Check if a consumer is following a creator
 */
export const prefetchIsFollowingInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isFollowing>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useIsFollowingInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useIsFollowingQueryOptions = <
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isFollowing>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIsFollowingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isFollowing>>> = ({
    signal,
  }) => isFollowing(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof isFollowing>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IsFollowingQueryResult = NonNullable<
  Awaited<ReturnType<typeof isFollowing>>
>;
export type IsFollowingQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useIsFollowing<
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | IsFollowingParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isFollowing>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isFollowing>>,
          TError,
          Awaited<ReturnType<typeof isFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsFollowing<
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isFollowing>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isFollowing>>,
          TError,
          Awaited<ReturnType<typeof isFollowing>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsFollowing<
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isFollowing>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if a consumer is following a creator
 */

export function useIsFollowing<
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isFollowing>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useIsFollowingQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Check if a consumer is following a creator
 */
export const prefetchIsFollowingQuery = async <
  TData = Awaited<ReturnType<typeof isFollowing>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: IsFollowingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isFollowing>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useIsFollowingQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get creator suggestions for a consumer
 */
export const getGetCreatorSuggestionsUrl = (
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/consumer-creator-follows/suggestions/${consumerId}?${stringifiedParams}`
    : `/user-management/api/v1/consumer-creator-follows/suggestions/${consumerId}`;
};

export const getCreatorSuggestions = async (
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: RequestInit,
): Promise<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorSuggestionsResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSQueriesConsumerCreatorFollowsGetCreatorSuggestionsResult>(
    getGetCreatorSuggestionsUrl({ consumerId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorSuggestionsQueryKey = (
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "consumer-creator-follows",
    "suggestions",
    consumerId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetCreatorSuggestionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorSuggestions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCreatorSuggestionsQueryKey({ consumerId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorSuggestions>>
  > = ({ signal }) =>
    getCreatorSuggestions({ consumerId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreatorSuggestions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorSuggestionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorSuggestions>>
>;
export type GetCreatorSuggestionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorSuggestionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorSuggestions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorSuggestionsPathParameters,
  params: undefined | GetCreatorSuggestionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorSuggestions>>,
          TError,
          Awaited<ReturnType<typeof getCreatorSuggestions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorSuggestionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorSuggestions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorSuggestions>>,
          TError,
          Awaited<ReturnType<typeof getCreatorSuggestions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorSuggestionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorSuggestions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get creator suggestions for a consumer
 */

export function useGetCreatorSuggestionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorSuggestions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorSuggestionsInfiniteQueryOptions(
    { consumerId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get creator suggestions for a consumer
 */
export const prefetchGetCreatorSuggestionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorSuggestionsInfiniteQueryOptions(
    { consumerId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorSuggestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCreatorSuggestionsQueryKey({ consumerId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorSuggestions>>
  > = ({ signal }) =>
    getCreatorSuggestions({ consumerId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreatorSuggestions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorSuggestionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorSuggestions>>
>;
export type GetCreatorSuggestionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorSuggestions<
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorSuggestionsPathParameters,
  params: undefined | GetCreatorSuggestionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorSuggestions>>,
          TError,
          Awaited<ReturnType<typeof getCreatorSuggestions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorSuggestions<
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorSuggestions>>,
          TError,
          Awaited<ReturnType<typeof getCreatorSuggestions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorSuggestions<
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get creator suggestions for a consumer
 */

export function useGetCreatorSuggestions<
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorSuggestionsQueryOptions(
    { consumerId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get creator suggestions for a consumer
 */
export const prefetchGetCreatorSuggestionsQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorSuggestions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { consumerId }: GetCreatorSuggestionsPathParameters,
  params?: GetCreatorSuggestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorSuggestionsQueryOptions(
    { consumerId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Unfollow a creator as a consumer
 */
export const getUnfollowCreatorUrl = () => {
  return `/user-management/api/v1/consumer-creator-follows/unfollow`;
};

export const unfollowCreator = async (
  userManagementAPIModelsRequestsUnfollowCreatorRequest: UserManagementAPIModelsRequestsUnfollowCreatorRequest,
  options?: RequestInit,
): Promise<UserManagementAPICQRSCommandsConsumerCreatorFollowsUnfollowCreatorResult> => {
  return gatewayServiceCustomFetch<UserManagementAPICQRSCommandsConsumerCreatorFollowsUnfollowCreatorResult>(
    getUnfollowCreatorUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsUnfollowCreatorRequest,
      ),
    },
  );
};

export const getUnfollowCreatorMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unfollowCreator>>,
    TError,
    { data: UserManagementAPIModelsRequestsUnfollowCreatorRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unfollowCreator>>,
  TError,
  { data: UserManagementAPIModelsRequestsUnfollowCreatorRequest },
  TContext
> => {
  const mutationKey = ["unfollowCreator"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unfollowCreator>>,
    { data: UserManagementAPIModelsRequestsUnfollowCreatorRequest }
  > = (props) => {
    const { data } = props ?? {};

    return unfollowCreator(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnfollowCreatorMutationResult = NonNullable<
  Awaited<ReturnType<typeof unfollowCreator>>
>;
export type UnfollowCreatorMutationBody =
  UserManagementAPIModelsRequestsUnfollowCreatorRequest;
export type UnfollowCreatorMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Unfollow a creator as a consumer
 */
export const useUnfollowCreator = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof unfollowCreator>>,
      TError,
      { data: UserManagementAPIModelsRequestsUnfollowCreatorRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof unfollowCreator>>,
  TError,
  { data: UserManagementAPIModelsRequestsUnfollowCreatorRequest },
  TContext
> => {
  const mutationOptions = getUnfollowCreatorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
