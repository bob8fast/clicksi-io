/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteCreatorPathParameters,
  GetCreatorByTeamPathParameters,
  GetCreatorPathParameters,
  GetCreatorsParams,
  GetVerifiedCreatorsParams,
  UpdateCreatorPathParameters,
  UserManagementAPIModelsRequestsDeleteCreatorRequest,
  UserManagementAPIModelsRequestsUpdateCreatorRequest,
  UserManagementDomainDTOsCreatorDto,
  UserManagementDomainDTOsCreatorListDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all creators with filtering and pagination
 */
export const getGetCreatorsUrl = (params?: GetCreatorsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/creators?${stringifiedParams}`
    : `/user-management/api/v1/creators`;
};

export const getCreators = async (
  params?: GetCreatorsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsCreatorListDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsCreatorListDto>(
    getGetCreatorsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorsQueryKey = (params?: GetCreatorsParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "creators",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetCreatorsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCreatorsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCreators>>> = ({
    signal,
  }) => getCreators(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreators>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreators>>
>;
export type GetCreatorsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetCreatorsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreators>>,
          TError,
          Awaited<ReturnType<typeof getCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreators>>,
          TError,
          Awaited<ReturnType<typeof getCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all creators with filtering and pagination
 */

export function useGetCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all creators with filtering and pagination
 */
export const prefetchGetCreatorsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreators>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCreatorsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCreators>>> = ({
    signal,
  }) => getCreators(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreators>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreators>>
>;
export type GetCreatorsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreators<
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetCreatorsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreators>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreators>>,
          TError,
          Awaited<ReturnType<typeof getCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreators<
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreators>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreators>>,
          TError,
          Awaited<ReturnType<typeof getCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreators<
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreators>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all creators with filtering and pagination
 */

export function useGetCreators<
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreators>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all creators with filtering and pagination
 */
export const prefetchGetCreatorsQuery = async <
  TData = Awaited<ReturnType<typeof getCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreators>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get a creator by ID
 */
export const getGetCreatorUrl = ({ id }: GetCreatorPathParameters) => {
  return `/user-management/api/v1/creators/${id}`;
};

export const getCreator = async (
  { id }: GetCreatorPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsCreatorDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsCreatorDto>(
    getGetCreatorUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorQueryKey = ({ id }: GetCreatorPathParameters) => {
  return ["user-management", "api", "v1", "creators", id] as const;
};

export const useGetCreatorInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreator>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreator>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCreatorQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCreator>>> = ({
    signal,
  }) => getCreator({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreator>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreator>>
>;
export type GetCreatorInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreator>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreator>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreator>>,
          TError,
          Awaited<ReturnType<typeof getCreator>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreator>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreator>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreator>>,
          TError,
          Awaited<ReturnType<typeof getCreator>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreator>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreator>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a creator by ID
 */

export function useGetCreatorInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreator>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreator>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a creator by ID
 */
export const prefetchGetCreatorInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreator>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreator>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCreatorQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCreator>>> = ({
    signal,
  }) => getCreator({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreator>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreator>>
>;
export type GetCreatorQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreator<
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreator>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreator>>,
          TError,
          Awaited<ReturnType<typeof getCreator>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreator<
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreator>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreator>>,
          TError,
          Awaited<ReturnType<typeof getCreator>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreator<
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreator>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a creator by ID
 */

export function useGetCreator<
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreator>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a creator by ID
 */
export const prefetchGetCreatorQuery = async <
  TData = Awaited<ReturnType<typeof getCreator>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetCreatorPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCreator>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update a creator
 */
export const getUpdateCreatorUrl = ({ id }: UpdateCreatorPathParameters) => {
  return `/user-management/api/v1/creators/${id}`;
};

export const updateCreator = async (
  { id }: UpdateCreatorPathParameters,
  userManagementAPIModelsRequestsUpdateCreatorRequest: UserManagementAPIModelsRequestsUpdateCreatorRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsCreatorDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsCreatorDto>(
    getUpdateCreatorUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementAPIModelsRequestsUpdateCreatorRequest),
    },
  );
};

export const getUpdateCreatorMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCreator>>,
    TError,
    {
      pathParams: UpdateCreatorPathParameters;
      data: UserManagementAPIModelsRequestsUpdateCreatorRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCreator>>,
  TError,
  {
    pathParams: UpdateCreatorPathParameters;
    data: UserManagementAPIModelsRequestsUpdateCreatorRequest;
  },
  TContext
> => {
  const mutationKey = ["updateCreator"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCreator>>,
    {
      pathParams: UpdateCreatorPathParameters;
      data: UserManagementAPIModelsRequestsUpdateCreatorRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateCreator(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCreatorMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCreator>>
>;
export type UpdateCreatorMutationBody =
  UserManagementAPIModelsRequestsUpdateCreatorRequest;
export type UpdateCreatorMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update a creator
 */
export const useUpdateCreator = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCreator>>,
      TError,
      {
        pathParams: UpdateCreatorPathParameters;
        data: UserManagementAPIModelsRequestsUpdateCreatorRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateCreator>>,
  TError,
  {
    pathParams: UpdateCreatorPathParameters;
    data: UserManagementAPIModelsRequestsUpdateCreatorRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateCreatorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a creator
 */
export const getDeleteCreatorUrl = ({ id }: DeleteCreatorPathParameters) => {
  return `/user-management/api/v1/creators/${id}`;
};

export const deleteCreator = async (
  { id }: DeleteCreatorPathParameters,
  userManagementAPIModelsRequestsDeleteCreatorRequest: UserManagementAPIModelsRequestsDeleteCreatorRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteCreatorUrl({ id }), {
    ...options,
    method: "DELETE",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(userManagementAPIModelsRequestsDeleteCreatorRequest),
  });
};

export const getDeleteCreatorMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCreator>>,
    TError,
    {
      pathParams: DeleteCreatorPathParameters;
      data: UserManagementAPIModelsRequestsDeleteCreatorRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCreator>>,
  TError,
  {
    pathParams: DeleteCreatorPathParameters;
    data: UserManagementAPIModelsRequestsDeleteCreatorRequest;
  },
  TContext
> => {
  const mutationKey = ["deleteCreator"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCreator>>,
    {
      pathParams: DeleteCreatorPathParameters;
      data: UserManagementAPIModelsRequestsDeleteCreatorRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return deleteCreator(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCreatorMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCreator>>
>;
export type DeleteCreatorMutationBody =
  UserManagementAPIModelsRequestsDeleteCreatorRequest;
export type DeleteCreatorMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a creator
 */
export const useDeleteCreator = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCreator>>,
      TError,
      {
        pathParams: DeleteCreatorPathParameters;
        data: UserManagementAPIModelsRequestsDeleteCreatorRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCreator>>,
  TError,
  {
    pathParams: DeleteCreatorPathParameters;
    data: UserManagementAPIModelsRequestsDeleteCreatorRequest;
  },
  TContext
> => {
  const mutationOptions = getDeleteCreatorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a creator by team ID
 */
export const getGetCreatorByTeamUrl = ({
  teamId,
}: GetCreatorByTeamPathParameters) => {
  return `/user-management/api/v1/creators/team/${teamId}`;
};

export const getCreatorByTeam = async (
  { teamId }: GetCreatorByTeamPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsCreatorDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsCreatorDto>(
    getGetCreatorByTeamUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorByTeamQueryKey = ({
  teamId,
}: GetCreatorByTeamPathParameters) => {
  return ["user-management", "api", "v1", "creators", "team", teamId] as const;
};

export const useGetCreatorByTeamInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCreatorByTeamQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorByTeam>>
  > = ({ signal }) =>
    getCreatorByTeam({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreatorByTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorByTeamInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorByTeam>>
>;
export type GetCreatorByTeamInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorByTeamPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorByTeam>>,
          TError,
          Awaited<ReturnType<typeof getCreatorByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorByTeam>>,
          TError,
          Awaited<ReturnType<typeof getCreatorByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a creator by team ID
 */

export function useGetCreatorByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorByTeamInfiniteQueryOptions(
    { teamId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a creator by team ID
 */
export const prefetchGetCreatorByTeamInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorByTeamInfiniteQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorByTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCreatorByTeamQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorByTeam>>
  > = ({ signal }) =>
    getCreatorByTeam({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreatorByTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorByTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorByTeam>>
>;
export type GetCreatorByTeamQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorByTeam<
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorByTeamPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorByTeam>>,
          TError,
          Awaited<ReturnType<typeof getCreatorByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorByTeam<
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorByTeam>>,
          TError,
          Awaited<ReturnType<typeof getCreatorByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorByTeam<
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a creator by team ID
 */

export function useGetCreatorByTeam<
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorByTeamQueryOptions({ teamId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a creator by team ID
 */
export const prefetchGetCreatorByTeamQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetCreatorByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorByTeamQueryOptions({ teamId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get verified creators available for collaboration
 */
export const getGetVerifiedCreatorsUrl = (
  params?: GetVerifiedCreatorsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/creators/verified?${stringifiedParams}`
    : `/user-management/api/v1/creators/verified`;
};

export const getVerifiedCreators = async (
  params?: GetVerifiedCreatorsParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsCreatorListDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsCreatorListDto>(
    getGetVerifiedCreatorsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetVerifiedCreatorsQueryKey = (
  params?: GetVerifiedCreatorsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "creators",
    "verified",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetVerifiedCreatorsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetVerifiedCreatorsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVerifiedCreators>>
  > = ({ signal }) =>
    getVerifiedCreators(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getVerifiedCreators>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVerifiedCreatorsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVerifiedCreators>>
>;
export type GetVerifiedCreatorsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetVerifiedCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetVerifiedCreatorsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedCreators>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedCreators>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get verified creators available for collaboration
 */

export function useGetVerifiedCreatorsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedCreators>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetVerifiedCreatorsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get verified creators available for collaboration
 */
export const prefetchGetVerifiedCreatorsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetVerifiedCreatorsInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetVerifiedCreatorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetVerifiedCreatorsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVerifiedCreators>>
  > = ({ signal }) =>
    getVerifiedCreators(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getVerifiedCreators>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVerifiedCreatorsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVerifiedCreators>>
>;
export type GetVerifiedCreatorsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetVerifiedCreators<
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetVerifiedCreatorsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedCreators>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedCreators<
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedCreators>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedCreators<
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get verified creators available for collaboration
 */

export function useGetVerifiedCreators<
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetVerifiedCreatorsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get verified creators available for collaboration
 */
export const prefetchGetVerifiedCreatorsQuery = async <
  TData = Awaited<ReturnType<typeof getVerifiedCreators>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetVerifiedCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetVerifiedCreatorsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
