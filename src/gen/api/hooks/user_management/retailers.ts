/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteRetailerPathParameters,
  GetRetailerByTeamPathParameters,
  GetRetailerPathParameters,
  GetRetailersParams,
  GetVerifiedRetailersParams,
  UpdateRetailerPathParameters,
  UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest,
  UserManagementAPIModelsRequestsDeleteRetailerRequest,
  UserManagementAPIModelsRequestsUpdateRetailerRequest,
  UserManagementDomainDTOsRetailerDto,
  UserManagementDomainDTOsRetailerListDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create a new retailer
 */
export const getCreateBrandSelfDistributedRetailerUrl = () => {
  return `/user-management/api/v1/retailers`;
};

export const createBrandSelfDistributedRetailer = async (
  userManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest: UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsRetailerDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsRetailerDto>(
    getCreateBrandSelfDistributedRetailerUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest,
      ),
    },
  );
};

export const getCreateBrandSelfDistributedRetailerMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBrandSelfDistributedRetailer>>,
    TError,
    {
      data: UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createBrandSelfDistributedRetailer>>,
  TError,
  {
    data: UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest;
  },
  TContext
> => {
  const mutationKey = ["createBrandSelfDistributedRetailer"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createBrandSelfDistributedRetailer>>,
    {
      data: UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest;
    }
  > = (props) => {
    const { data } = props ?? {};

    return createBrandSelfDistributedRetailer(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateBrandSelfDistributedRetailerMutationResult = NonNullable<
  Awaited<ReturnType<typeof createBrandSelfDistributedRetailer>>
>;
export type CreateBrandSelfDistributedRetailerMutationBody =
  UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest;
export type CreateBrandSelfDistributedRetailerMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create a new retailer
 */
export const useCreateBrandSelfDistributedRetailer = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createBrandSelfDistributedRetailer>>,
      TError,
      {
        data: UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createBrandSelfDistributedRetailer>>,
  TError,
  {
    data: UserManagementAPIModelsRequestsCreateBrandSelfDistributedRetailerRequest;
  },
  TContext
> => {
  const mutationOptions =
    getCreateBrandSelfDistributedRetailerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all retailers with filtering and pagination
 */
export const getGetRetailersUrl = (params?: GetRetailersParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/retailers?${stringifiedParams}`
    : `/user-management/api/v1/retailers`;
};

export const getRetailers = async (
  params?: GetRetailersParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsRetailerListDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsRetailerListDto>(
    getGetRetailersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetRetailersQueryKey = (params?: GetRetailersParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "retailers",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetRetailersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRetailersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRetailers>>> = ({
    signal,
  }) => getRetailers(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRetailers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailers>>
>;
export type GetRetailersInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetRetailersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailers>>,
          TError,
          Awaited<ReturnType<typeof getRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailers>>,
          TError,
          Awaited<ReturnType<typeof getRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all retailers with filtering and pagination
 */

export function useGetRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all retailers with filtering and pagination
 */
export const prefetchGetRetailersInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailersInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetRetailersQueryOptions = <
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRetailersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRetailers>>> = ({
    signal,
  }) => getRetailers(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getRetailers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailers>>
>;
export type GetRetailersQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailers<
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetRetailersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailers>>,
          TError,
          Awaited<ReturnType<typeof getRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailers<
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailers>>,
          TError,
          Awaited<ReturnType<typeof getRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailers<
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all retailers with filtering and pagination
 */

export function useGetRetailers<
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all retailers with filtering and pagination
 */
export const prefetchGetRetailersQuery = async <
  TData = Awaited<ReturnType<typeof getRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailers>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailersQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get a retailer by ID
 */
export const getGetRetailerUrl = ({ id }: GetRetailerPathParameters) => {
  return `/user-management/api/v1/retailers/${id}`;
};

export const getRetailer = async (
  { id }: GetRetailerPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsRetailerDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsRetailerDto>(
    getGetRetailerUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetRetailerQueryKey = ({ id }: GetRetailerPathParameters) => {
  return ["user-management", "api", "v1", "retailers", id] as const;
};

export const useGetRetailerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailer>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailer>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRetailerQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRetailer>>> = ({
    signal,
  }) => getRetailer({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRetailer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailer>>
>;
export type GetRetailerInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailer>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailer>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailer>>,
          TError,
          Awaited<ReturnType<typeof getRetailer>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailer>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailer>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailer>>,
          TError,
          Awaited<ReturnType<typeof getRetailer>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailer>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailer>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a retailer by ID
 */

export function useGetRetailerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailer>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailer>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a retailer by ID
 */
export const prefetchGetRetailerInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailer>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetRetailerQueryOptions = <
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailer>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRetailerQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRetailer>>> = ({
    signal,
  }) => getRetailer({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getRetailer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailer>>
>;
export type GetRetailerQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailer<
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailer>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailer>>,
          TError,
          Awaited<ReturnType<typeof getRetailer>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailer<
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailer>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailer>>,
          TError,
          Awaited<ReturnType<typeof getRetailer>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailer<
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailer>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a retailer by ID
 */

export function useGetRetailer<
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailer>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a retailer by ID
 */
export const prefetchGetRetailerQuery = async <
  TData = Awaited<ReturnType<typeof getRetailer>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetRetailerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRetailer>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update a retailer
 */
export const getUpdateRetailerUrl = ({ id }: UpdateRetailerPathParameters) => {
  return `/user-management/api/v1/retailers/${id}`;
};

export const updateRetailer = async (
  { id }: UpdateRetailerPathParameters,
  userManagementAPIModelsRequestsUpdateRetailerRequest: UserManagementAPIModelsRequestsUpdateRetailerRequest,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsRetailerDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsRetailerDto>(
    getUpdateRetailerUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsUpdateRetailerRequest,
      ),
    },
  );
};

export const getUpdateRetailerMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRetailer>>,
    TError,
    {
      pathParams: UpdateRetailerPathParameters;
      data: UserManagementAPIModelsRequestsUpdateRetailerRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRetailer>>,
  TError,
  {
    pathParams: UpdateRetailerPathParameters;
    data: UserManagementAPIModelsRequestsUpdateRetailerRequest;
  },
  TContext
> => {
  const mutationKey = ["updateRetailer"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRetailer>>,
    {
      pathParams: UpdateRetailerPathParameters;
      data: UserManagementAPIModelsRequestsUpdateRetailerRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateRetailer(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRetailerMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRetailer>>
>;
export type UpdateRetailerMutationBody =
  UserManagementAPIModelsRequestsUpdateRetailerRequest;
export type UpdateRetailerMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update a retailer
 */
export const useUpdateRetailer = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateRetailer>>,
      TError,
      {
        pathParams: UpdateRetailerPathParameters;
        data: UserManagementAPIModelsRequestsUpdateRetailerRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateRetailer>>,
  TError,
  {
    pathParams: UpdateRetailerPathParameters;
    data: UserManagementAPIModelsRequestsUpdateRetailerRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateRetailerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a retailer
 */
export const getDeleteRetailerUrl = ({ id }: DeleteRetailerPathParameters) => {
  return `/user-management/api/v1/retailers/${id}`;
};

export const deleteRetailer = async (
  { id }: DeleteRetailerPathParameters,
  userManagementAPIModelsRequestsDeleteRetailerRequest: UserManagementAPIModelsRequestsDeleteRetailerRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteRetailerUrl({ id }), {
    ...options,
    method: "DELETE",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(userManagementAPIModelsRequestsDeleteRetailerRequest),
  });
};

export const getDeleteRetailerMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRetailer>>,
    TError,
    {
      pathParams: DeleteRetailerPathParameters;
      data: UserManagementAPIModelsRequestsDeleteRetailerRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRetailer>>,
  TError,
  {
    pathParams: DeleteRetailerPathParameters;
    data: UserManagementAPIModelsRequestsDeleteRetailerRequest;
  },
  TContext
> => {
  const mutationKey = ["deleteRetailer"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRetailer>>,
    {
      pathParams: DeleteRetailerPathParameters;
      data: UserManagementAPIModelsRequestsDeleteRetailerRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return deleteRetailer(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRetailerMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRetailer>>
>;
export type DeleteRetailerMutationBody =
  UserManagementAPIModelsRequestsDeleteRetailerRequest;
export type DeleteRetailerMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a retailer
 */
export const useDeleteRetailer = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteRetailer>>,
      TError,
      {
        pathParams: DeleteRetailerPathParameters;
        data: UserManagementAPIModelsRequestsDeleteRetailerRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteRetailer>>,
  TError,
  {
    pathParams: DeleteRetailerPathParameters;
    data: UserManagementAPIModelsRequestsDeleteRetailerRequest;
  },
  TContext
> => {
  const mutationOptions = getDeleteRetailerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a retailer by team ID
 */
export const getGetRetailerByTeamUrl = ({
  teamId,
}: GetRetailerByTeamPathParameters) => {
  return `/user-management/api/v1/retailers/team/${teamId}`;
};

export const getRetailerByTeam = async (
  { teamId }: GetRetailerByTeamPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsRetailerDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsRetailerDto>(
    getGetRetailerByTeamUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetRetailerByTeamQueryKey = ({
  teamId,
}: GetRetailerByTeamPathParameters) => {
  return ["user-management", "api", "v1", "retailers", "team", teamId] as const;
};

export const useGetRetailerByTeamInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRetailerByTeamQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRetailerByTeam>>
  > = ({ signal }) =>
    getRetailerByTeam({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRetailerByTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerByTeamInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailerByTeam>>
>;
export type GetRetailerByTeamInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerByTeamPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerByTeam>>,
          TError,
          Awaited<ReturnType<typeof getRetailerByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerByTeam>>,
          TError,
          Awaited<ReturnType<typeof getRetailerByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a retailer by team ID
 */

export function useGetRetailerByTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerByTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerByTeamInfiniteQueryOptions(
    { teamId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a retailer by team ID
 */
export const prefetchGetRetailerByTeamInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerByTeamInfiniteQueryOptions(
    { teamId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetRetailerByTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRetailerByTeamQueryKey({ teamId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRetailerByTeam>>
  > = ({ signal }) =>
    getRetailerByTeam({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getRetailerByTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerByTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailerByTeam>>
>;
export type GetRetailerByTeamQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerByTeam<
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerByTeamPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerByTeam>>,
          TError,
          Awaited<ReturnType<typeof getRetailerByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerByTeam<
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerByTeam>>,
          TError,
          Awaited<ReturnType<typeof getRetailerByTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerByTeam<
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a retailer by team ID
 */

export function useGetRetailerByTeam<
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerByTeamQueryOptions({ teamId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a retailer by team ID
 */
export const prefetchGetRetailerByTeamQuery = async <
  TData = Awaited<ReturnType<typeof getRetailerByTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetRetailerByTeamPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerByTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerByTeamQueryOptions({ teamId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get verified retailers
 */
export const getGetVerifiedRetailersUrl = (
  params?: GetVerifiedRetailersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/retailers/verified?${stringifiedParams}`
    : `/user-management/api/v1/retailers/verified`;
};

export const getVerifiedRetailers = async (
  params?: GetVerifiedRetailersParams,
  options?: RequestInit,
): Promise<UserManagementDomainDTOsRetailerListDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainDTOsRetailerListDto>(
    getGetVerifiedRetailersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetVerifiedRetailersQueryKey = (
  params?: GetVerifiedRetailersParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "retailers",
    "verified",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetVerifiedRetailersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetVerifiedRetailersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVerifiedRetailers>>
  > = ({ signal }) =>
    getVerifiedRetailers(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getVerifiedRetailers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVerifiedRetailersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVerifiedRetailers>>
>;
export type GetVerifiedRetailersInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetVerifiedRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetVerifiedRetailersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedRetailers>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedRetailers>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get verified retailers
 */

export function useGetVerifiedRetailersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVerifiedRetailers>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetVerifiedRetailersInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get verified retailers
 */
export const prefetchGetVerifiedRetailersInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetVerifiedRetailersInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetVerifiedRetailersQueryOptions = <
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetVerifiedRetailersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getVerifiedRetailers>>
  > = ({ signal }) =>
    getVerifiedRetailers(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getVerifiedRetailers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVerifiedRetailersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVerifiedRetailers>>
>;
export type GetVerifiedRetailersQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetVerifiedRetailers<
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetVerifiedRetailersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedRetailers>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedRetailers<
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVerifiedRetailers>>,
          TError,
          Awaited<ReturnType<typeof getVerifiedRetailers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetVerifiedRetailers<
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get verified retailers
 */

export function useGetVerifiedRetailers<
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetVerifiedRetailersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get verified retailers
 */
export const prefetchGetVerifiedRetailersQuery = async <
  TData = Awaited<ReturnType<typeof getVerifiedRetailers>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetVerifiedRetailersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getVerifiedRetailers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetVerifiedRetailersQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
