/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AddTeamMemberPathParameters,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteTeamInvitationPathParameters,
  DeleteTeamPathParameters,
  GetTeamByIdPathParameters,
  GetTeamInvitationByIdPathParameters,
  GetTeamInvitationsParams,
  GetTeamInvitationsPathParameters,
  GetTeamMemberPathParameters,
  GetTeamMemberPermissionsPathParameters,
  GetTeamMemberRolePathParameters,
  GetTeamsByMemberPathParameters,
  GetTeamsByOwnerPathParameters,
  GetUserInvitationsToTeamParams,
  GetUserInvitationsToTeamPathParameters,
  InvitationAcceptanceResponse,
  InvitationDeclineResponse,
  InviteToTeamPathParameters,
  IsTeamMemberPathParameters,
  IsUserInvitedToTeamParams,
  IsUserInvitedToTeamPathParameters,
  RemoveTeamMemberPathParameters,
  TeamDetailResponse,
  TeamInvitationResponse,
  TeamMemberPermissionsResponse,
  TeamMemberResponse,
  TeamResponse,
  UpdateTeamMemberRolePathParameters,
  UpdateTeamPathParameters,
  UserInvitationResponse,
  UserManagementAPIControllersTeamInvitationCheckResponse,
  UserManagementAPIControllersTeamMemberCheckResponse,
  UserManagementAPIControllersTeamMemberRoleResponse,
  UserManagementAPIModelsRequestsAcceptTeamInvitationRequest,
  UserManagementAPIModelsRequestsAddTeamMemberRequest,
  UserManagementAPIModelsRequestsDeclineTeamInvitationRequest,
  UserManagementAPIModelsRequestsDeleteTeamInvitationRequest,
  UserManagementAPIModelsRequestsDeleteTeamRequest,
  UserManagementAPIModelsRequestsInviteToTeamRequest,
  UserManagementAPIModelsRequestsRemoveTeamMemberRequest,
  UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest,
  UserManagementAPIModelsRequestsUpdateTeamRequest,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary [Teams] Get Team By Id
 */
export const getGetTeamByIdUrl = ({ teamId }: GetTeamByIdPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}`;
};

export const getTeamById = async (
  { teamId }: GetTeamByIdPathParameters,
  options?: RequestInit,
): Promise<TeamDetailResponse> => {
  return gatewayServiceCustomFetch<TeamDetailResponse>(
    getGetTeamByIdUrl({ teamId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamByIdQueryKey = ({
  teamId,
}: GetTeamByIdPathParameters) => {
  return ["user-management", "api", "v1", "teams", teamId] as const;
};

export const useGetTeamByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamByIdQueryKey({ teamId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamById>>> = ({
    signal,
  }) => getTeamById({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamById>>
>;
export type GetTeamByIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamByIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamById>>,
          TError,
          Awaited<ReturnType<typeof getTeamById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamById>>,
          TError,
          Awaited<ReturnType<typeof getTeamById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team By Id
 */

export function useGetTeamByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamByIdInfiniteQueryOptions({ teamId }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team By Id
 */
export const prefetchGetTeamByIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamByIdInfiniteQueryOptions({ teamId }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamByIdQueryKey({ teamId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamById>>> = ({
    signal,
  }) => getTeamById({ teamId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamById>>
>;
export type GetTeamByIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamByIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamById>>,
          TError,
          Awaited<ReturnType<typeof getTeamById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamById>>,
          TError,
          Awaited<ReturnType<typeof getTeamById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team By Id
 */

export function useGetTeamById<
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamByIdQueryOptions({ teamId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team By Id
 */
export const prefetchGetTeamByIdQuery = async <
  TData = Awaited<ReturnType<typeof getTeamById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamByIdQueryOptions({ teamId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Update Team
 */
export const getUpdateTeamUrl = ({ teamId }: UpdateTeamPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}`;
};

export const updateTeam = async (
  { teamId }: UpdateTeamPathParameters,
  userManagementAPIModelsRequestsUpdateTeamRequest: UserManagementAPIModelsRequestsUpdateTeamRequest,
  options?: RequestInit,
): Promise<TeamResponse> => {
  return gatewayServiceCustomFetch<TeamResponse>(getUpdateTeamUrl({ teamId }), {
    ...options,
    method: "PUT",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(userManagementAPIModelsRequestsUpdateTeamRequest),
  });
};

export const getUpdateTeamMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTeam>>,
    TError,
    {
      pathParams: UpdateTeamPathParameters;
      data: UserManagementAPIModelsRequestsUpdateTeamRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTeam>>,
  TError,
  {
    pathParams: UpdateTeamPathParameters;
    data: UserManagementAPIModelsRequestsUpdateTeamRequest;
  },
  TContext
> => {
  const mutationKey = ["updateTeam"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTeam>>,
    {
      pathParams: UpdateTeamPathParameters;
      data: UserManagementAPIModelsRequestsUpdateTeamRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateTeam(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTeamMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTeam>>
>;
export type UpdateTeamMutationBody =
  UserManagementAPIModelsRequestsUpdateTeamRequest;
export type UpdateTeamMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Update Team
 */
export const useUpdateTeam = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTeam>>,
      TError,
      {
        pathParams: UpdateTeamPathParameters;
        data: UserManagementAPIModelsRequestsUpdateTeamRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTeam>>,
  TError,
  {
    pathParams: UpdateTeamPathParameters;
    data: UserManagementAPIModelsRequestsUpdateTeamRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateTeamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Delete Team
 */
export const getDeleteTeamUrl = ({ teamId }: DeleteTeamPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}`;
};

export const deleteTeam = async (
  { teamId }: DeleteTeamPathParameters,
  userManagementAPIModelsRequestsDeleteTeamRequest: UserManagementAPIModelsRequestsDeleteTeamRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteTeamUrl({ teamId }), {
    ...options,
    method: "DELETE",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(userManagementAPIModelsRequestsDeleteTeamRequest),
  });
};

export const getDeleteTeamMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTeam>>,
    TError,
    {
      pathParams: DeleteTeamPathParameters;
      data: UserManagementAPIModelsRequestsDeleteTeamRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTeam>>,
  TError,
  {
    pathParams: DeleteTeamPathParameters;
    data: UserManagementAPIModelsRequestsDeleteTeamRequest;
  },
  TContext
> => {
  const mutationKey = ["deleteTeam"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTeam>>,
    {
      pathParams: DeleteTeamPathParameters;
      data: UserManagementAPIModelsRequestsDeleteTeamRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return deleteTeam(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTeamMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTeam>>
>;
export type DeleteTeamMutationBody =
  UserManagementAPIModelsRequestsDeleteTeamRequest;
export type DeleteTeamMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Delete Team
 */
export const useDeleteTeam = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTeam>>,
      TError,
      {
        pathParams: DeleteTeamPathParameters;
        data: UserManagementAPIModelsRequestsDeleteTeamRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTeam>>,
  TError,
  {
    pathParams: DeleteTeamPathParameters;
    data: UserManagementAPIModelsRequestsDeleteTeamRequest;
  },
  TContext
> => {
  const mutationOptions = getDeleteTeamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Invite To Team
 */
export const getInviteToTeamUrl = ({ teamId }: InviteToTeamPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/invitations`;
};

export const inviteToTeam = async (
  { teamId }: InviteToTeamPathParameters,
  userManagementAPIModelsRequestsInviteToTeamRequest: UserManagementAPIModelsRequestsInviteToTeamRequest,
  options?: RequestInit,
): Promise<TeamInvitationResponse> => {
  return gatewayServiceCustomFetch<TeamInvitationResponse>(
    getInviteToTeamUrl({ teamId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementAPIModelsRequestsInviteToTeamRequest),
    },
  );
};

export const getInviteToTeamMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inviteToTeam>>,
    TError,
    {
      pathParams: InviteToTeamPathParameters;
      data: UserManagementAPIModelsRequestsInviteToTeamRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof inviteToTeam>>,
  TError,
  {
    pathParams: InviteToTeamPathParameters;
    data: UserManagementAPIModelsRequestsInviteToTeamRequest;
  },
  TContext
> => {
  const mutationKey = ["inviteToTeam"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inviteToTeam>>,
    {
      pathParams: InviteToTeamPathParameters;
      data: UserManagementAPIModelsRequestsInviteToTeamRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return inviteToTeam(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type InviteToTeamMutationResult = NonNullable<
  Awaited<ReturnType<typeof inviteToTeam>>
>;
export type InviteToTeamMutationBody =
  UserManagementAPIModelsRequestsInviteToTeamRequest;
export type InviteToTeamMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Invite To Team
 */
export const useInviteToTeam = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inviteToTeam>>,
      TError,
      {
        pathParams: InviteToTeamPathParameters;
        data: UserManagementAPIModelsRequestsInviteToTeamRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof inviteToTeam>>,
  TError,
  {
    pathParams: InviteToTeamPathParameters;
    data: UserManagementAPIModelsRequestsInviteToTeamRequest;
  },
  TContext
> => {
  const mutationOptions = getInviteToTeamMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Get Team Invitations
 */
export const getGetTeamInvitationsUrl = (
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/teams/${teamId}/invitations?${stringifiedParams}`
    : `/user-management/api/v1/teams/${teamId}/invitations`;
};

export const getTeamInvitations = async (
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: RequestInit,
): Promise<TeamInvitationResponse[]> => {
  return gatewayServiceCustomFetch<TeamInvitationResponse[]>(
    getGetTeamInvitationsUrl({ teamId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamInvitationsQueryKey = (
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    teamId,
    "invitations",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetTeamInvitationsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamInvitationsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamInvitations>>
  > = ({ signal }) =>
    getTeamInvitations({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamInvitationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamInvitations>>
>;
export type GetTeamInvitationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationsPathParameters,
  params: undefined | GetTeamInvitationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Invitations
 */

export function useGetTeamInvitationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitations>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamInvitationsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Invitations
 */
export const prefetchGetTeamInvitationsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamInvitationsInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamInvitationsQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamInvitations>>
  > = ({ signal }) =>
    getTeamInvitations({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamInvitations>>
>;
export type GetTeamInvitationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamInvitations<
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationsPathParameters,
  params: undefined | GetTeamInvitationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitations<
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitations>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitations<
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Invitations
 */

export function useGetTeamInvitations<
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamInvitationsQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Invitations
 */
export const prefetchGetTeamInvitationsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamInvitations>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: GetTeamInvitationsPathParameters,
  params?: GetTeamInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamInvitationsQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Is User Invited To Team
 */
export const getIsUserInvitedToTeamUrl = (
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/teams/${teamId}/invitations/is-invited?${stringifiedParams}`
    : `/user-management/api/v1/teams/${teamId}/invitations/is-invited`;
};

export const isUserInvitedToTeam = async (
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: RequestInit,
): Promise<UserManagementAPIControllersTeamInvitationCheckResponse> => {
  return gatewayServiceCustomFetch<UserManagementAPIControllersTeamInvitationCheckResponse>(
    getIsUserInvitedToTeamUrl({ teamId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getIsUserInvitedToTeamQueryKey = (
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    teamId,
    "invitations",
    "is-invited",
    ...(params ? [params] : []),
  ] as const;
};

export const useIsUserInvitedToTeamInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof isUserInvitedToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getIsUserInvitedToTeamQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof isUserInvitedToTeam>>
  > = ({ signal }) =>
    isUserInvitedToTeam({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof isUserInvitedToTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IsUserInvitedToTeamInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof isUserInvitedToTeam>>
>;
export type IsUserInvitedToTeamInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useIsUserInvitedToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isUserInvitedToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsUserInvitedToTeamPathParameters,
  params: undefined | IsUserInvitedToTeamParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isUserInvitedToTeam>>,
          TError,
          Awaited<ReturnType<typeof isUserInvitedToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsUserInvitedToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isUserInvitedToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isUserInvitedToTeam>>,
          TError,
          Awaited<ReturnType<typeof isUserInvitedToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsUserInvitedToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isUserInvitedToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Is User Invited To Team
 */

export function useIsUserInvitedToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isUserInvitedToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useIsUserInvitedToTeamInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Is User Invited To Team
 */
export const prefetchIsUserInvitedToTeamInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useIsUserInvitedToTeamInfiniteQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useIsUserInvitedToTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getIsUserInvitedToTeamQueryKey({ teamId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof isUserInvitedToTeam>>
  > = ({ signal }) =>
    isUserInvitedToTeam({ teamId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof isUserInvitedToTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IsUserInvitedToTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof isUserInvitedToTeam>>
>;
export type IsUserInvitedToTeamQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useIsUserInvitedToTeam<
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsUserInvitedToTeamPathParameters,
  params: undefined | IsUserInvitedToTeamParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isUserInvitedToTeam>>,
          TError,
          Awaited<ReturnType<typeof isUserInvitedToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsUserInvitedToTeam<
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isUserInvitedToTeam>>,
          TError,
          Awaited<ReturnType<typeof isUserInvitedToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsUserInvitedToTeam<
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Is User Invited To Team
 */

export function useIsUserInvitedToTeam<
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useIsUserInvitedToTeamQueryOptions(
    { teamId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Is User Invited To Team
 */
export const prefetchIsUserInvitedToTeamQuery = async <
  TData = Awaited<ReturnType<typeof isUserInvitedToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId }: IsUserInvitedToTeamPathParameters,
  params?: IsUserInvitedToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof isUserInvitedToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useIsUserInvitedToTeamQueryOptions(
    { teamId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Add Team Member
 */
export const getAddTeamMemberUrl = ({
  teamId,
}: AddTeamMemberPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/members`;
};

export const addTeamMember = async (
  { teamId }: AddTeamMemberPathParameters,
  userManagementAPIModelsRequestsAddTeamMemberRequest: UserManagementAPIModelsRequestsAddTeamMemberRequest,
  options?: RequestInit,
): Promise<TeamMemberResponse> => {
  return gatewayServiceCustomFetch<TeamMemberResponse>(
    getAddTeamMemberUrl({ teamId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementAPIModelsRequestsAddTeamMemberRequest),
    },
  );
};

export const getAddTeamMemberMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTeamMember>>,
    TError,
    {
      pathParams: AddTeamMemberPathParameters;
      data: UserManagementAPIModelsRequestsAddTeamMemberRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addTeamMember>>,
  TError,
  {
    pathParams: AddTeamMemberPathParameters;
    data: UserManagementAPIModelsRequestsAddTeamMemberRequest;
  },
  TContext
> => {
  const mutationKey = ["addTeamMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addTeamMember>>,
    {
      pathParams: AddTeamMemberPathParameters;
      data: UserManagementAPIModelsRequestsAddTeamMemberRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return addTeamMember(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddTeamMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof addTeamMember>>
>;
export type AddTeamMemberMutationBody =
  UserManagementAPIModelsRequestsAddTeamMemberRequest;
export type AddTeamMemberMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Add Team Member
 */
export const useAddTeamMember = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addTeamMember>>,
      TError,
      {
        pathParams: AddTeamMemberPathParameters;
        data: UserManagementAPIModelsRequestsAddTeamMemberRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addTeamMember>>,
  TError,
  {
    pathParams: AddTeamMemberPathParameters;
    data: UserManagementAPIModelsRequestsAddTeamMemberRequest;
  },
  TContext
> => {
  const mutationOptions = getAddTeamMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Get Team Member
 */
export const getGetTeamMemberUrl = ({
  teamId,
  userId,
}: GetTeamMemberPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/members/${userId}`;
};

export const getTeamMember = async (
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: RequestInit,
): Promise<TeamMemberResponse> => {
  return gatewayServiceCustomFetch<TeamMemberResponse>(
    getGetTeamMemberUrl({ teamId, userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamMemberQueryKey = ({
  teamId,
  userId,
}: GetTeamMemberPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    teamId,
    "members",
    userId,
  ] as const;
};

export const useGetTeamMemberInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMemberQueryKey({ teamId, userId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamMember>>> = ({
    signal,
  }) => getTeamMember({ teamId, userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMemberInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMember>>
>;
export type GetTeamMemberInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMember>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMember>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Member
 */

export function useGetTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMemberInfiniteQueryOptions(
    { teamId, userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Member
 */
export const prefetchGetTeamMemberInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMemberInfiniteQueryOptions(
    { teamId, userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamMemberQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMemberQueryKey({ teamId, userId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamMember>>> = ({
    signal,
  }) => getTeamMember({ teamId, userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMemberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMember>>
>;
export type GetTeamMemberQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMember<
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMember>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMember<
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMember>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMember<
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Member
 */

export function useGetTeamMember<
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMemberQueryOptions(
    { teamId, userId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Member
 */
export const prefetchGetTeamMemberQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId, userId }: GetTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMemberQueryOptions(
    { teamId, userId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Remove Team Member
 */
export const getRemoveTeamMemberUrl = ({
  teamId,
  userId,
}: RemoveTeamMemberPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/members/${userId}`;
};

export const removeTeamMember = async (
  { teamId, userId }: RemoveTeamMemberPathParameters,
  userManagementAPIModelsRequestsRemoveTeamMemberRequest: UserManagementAPIModelsRequestsRemoveTeamMemberRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getRemoveTeamMemberUrl({ teamId, userId }),
    {
      ...options,
      method: "DELETE",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsRemoveTeamMemberRequest,
      ),
    },
  );
};

export const getRemoveTeamMemberMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeTeamMember>>,
    TError,
    {
      pathParams: RemoveTeamMemberPathParameters;
      data: UserManagementAPIModelsRequestsRemoveTeamMemberRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeTeamMember>>,
  TError,
  {
    pathParams: RemoveTeamMemberPathParameters;
    data: UserManagementAPIModelsRequestsRemoveTeamMemberRequest;
  },
  TContext
> => {
  const mutationKey = ["removeTeamMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeTeamMember>>,
    {
      pathParams: RemoveTeamMemberPathParameters;
      data: UserManagementAPIModelsRequestsRemoveTeamMemberRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return removeTeamMember(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveTeamMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeTeamMember>>
>;
export type RemoveTeamMemberMutationBody =
  UserManagementAPIModelsRequestsRemoveTeamMemberRequest;
export type RemoveTeamMemberMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Remove Team Member
 */
export const useRemoveTeamMember = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeTeamMember>>,
      TError,
      {
        pathParams: RemoveTeamMemberPathParameters;
        data: UserManagementAPIModelsRequestsRemoveTeamMemberRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeTeamMember>>,
  TError,
  {
    pathParams: RemoveTeamMemberPathParameters;
    data: UserManagementAPIModelsRequestsRemoveTeamMemberRequest;
  },
  TContext
> => {
  const mutationOptions = getRemoveTeamMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Is Team Member
 */
export const getIsTeamMemberUrl = ({
  teamId,
  userId,
}: IsTeamMemberPathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/members/${userId}/is-member`;
};

export const isTeamMember = async (
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: RequestInit,
): Promise<UserManagementAPIControllersTeamMemberCheckResponse> => {
  return gatewayServiceCustomFetch<UserManagementAPIControllersTeamMemberCheckResponse>(
    getIsTeamMemberUrl({ teamId, userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getIsTeamMemberQueryKey = ({
  teamId,
  userId,
}: IsTeamMemberPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    teamId,
    "members",
    userId,
    "is-member",
  ] as const;
};

export const useIsTeamMemberInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof isTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIsTeamMemberQueryKey({ teamId, userId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isTeamMember>>> = ({
    signal,
  }) => isTeamMember({ teamId, userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof isTeamMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IsTeamMemberInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof isTeamMember>>
>;
export type IsTeamMemberInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useIsTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsTeamMemberPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isTeamMember>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isTeamMember>>,
          TError,
          Awaited<ReturnType<typeof isTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isTeamMember>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isTeamMember>>,
          TError,
          Awaited<ReturnType<typeof isTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Is Team Member
 */

export function useIsTeamMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof isTeamMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useIsTeamMemberInfiniteQueryOptions(
    { teamId, userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Is Team Member
 */
export const prefetchIsTeamMemberInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof isTeamMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useIsTeamMemberInfiniteQueryOptions(
    { teamId, userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useIsTeamMemberQueryOptions = <
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIsTeamMemberQueryKey({ teamId, userId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isTeamMember>>> = ({
    signal,
  }) => isTeamMember({ teamId, userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof isTeamMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IsTeamMemberQueryResult = NonNullable<
  Awaited<ReturnType<typeof isTeamMember>>
>;
export type IsTeamMemberQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useIsTeamMember<
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsTeamMemberPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isTeamMember>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof isTeamMember>>,
          TError,
          Awaited<ReturnType<typeof isTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsTeamMember<
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isTeamMember>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof isTeamMember>>,
          TError,
          Awaited<ReturnType<typeof isTeamMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIsTeamMember<
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Is Team Member
 */

export function useIsTeamMember<
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useIsTeamMemberQueryOptions({ teamId, userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Is Team Member
 */
export const prefetchIsTeamMemberQuery = async <
  TData = Awaited<ReturnType<typeof isTeamMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId, userId }: IsTeamMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof isTeamMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useIsTeamMemberQueryOptions({ teamId, userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Get Team Member Role
 */
export const getGetTeamMemberRoleUrl = ({
  teamId,
  userId,
}: GetTeamMemberRolePathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/members/${userId}/role`;
};

export const getTeamMemberRole = async (
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: RequestInit,
): Promise<UserManagementAPIControllersTeamMemberRoleResponse> => {
  return gatewayServiceCustomFetch<UserManagementAPIControllersTeamMemberRoleResponse>(
    getGetTeamMemberRoleUrl({ teamId, userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamMemberRoleQueryKey = ({
  teamId,
  userId,
}: GetTeamMemberRolePathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    teamId,
    "members",
    userId,
    "role",
  ] as const;
};

export const useGetTeamMemberRoleInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberRole>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMemberRoleQueryKey({ teamId, userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamMemberRole>>
  > = ({ signal }) =>
    getTeamMemberRole({ teamId, userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamMemberRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMemberRoleInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMemberRole>>
>;
export type GetTeamMemberRoleInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMemberRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberRole>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberRolePathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberRole>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberRole>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberRole>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberRole>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Member Role
 */

export function useGetTeamMemberRoleInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberRole>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMemberRoleInfiniteQueryOptions(
    { teamId, userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Member Role
 */
export const prefetchGetTeamMemberRoleInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMemberRoleInfiniteQueryOptions(
    { teamId, userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamMemberRoleQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMemberRoleQueryKey({ teamId, userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamMemberRole>>
  > = ({ signal }) =>
    getTeamMemberRole({ teamId, userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamMemberRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMemberRoleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMemberRole>>
>;
export type GetTeamMemberRoleQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMemberRole<
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberRolePathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberRole>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberRole<
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberRole>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberRole>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberRole<
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Member Role
 */

export function useGetTeamMemberRole<
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMemberRoleQueryOptions(
    { teamId, userId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Member Role
 */
export const prefetchGetTeamMemberRoleQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMemberRole>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { teamId, userId }: GetTeamMemberRolePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberRole>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMemberRoleQueryOptions(
    { teamId, userId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Update Team Member Role
 */
export const getUpdateTeamMemberRoleUrl = ({
  teamId,
  userId,
}: UpdateTeamMemberRolePathParameters) => {
  return `/user-management/api/v1/teams/${teamId}/members/${userId}/role`;
};

export const updateTeamMemberRole = async (
  { teamId, userId }: UpdateTeamMemberRolePathParameters,
  userManagementAPIModelsRequestsUpdateTeamMemberRoleRequest: UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest,
  options?: RequestInit,
): Promise<UserManagementAPIControllersTeamMemberRoleResponse> => {
  return gatewayServiceCustomFetch<UserManagementAPIControllersTeamMemberRoleResponse>(
    getUpdateTeamMemberRoleUrl({ teamId, userId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsUpdateTeamMemberRoleRequest,
      ),
    },
  );
};

export const getUpdateTeamMemberRoleMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTeamMemberRole>>,
    TError,
    {
      pathParams: UpdateTeamMemberRolePathParameters;
      data: UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTeamMemberRole>>,
  TError,
  {
    pathParams: UpdateTeamMemberRolePathParameters;
    data: UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest;
  },
  TContext
> => {
  const mutationKey = ["updateTeamMemberRole"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTeamMemberRole>>,
    {
      pathParams: UpdateTeamMemberRolePathParameters;
      data: UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateTeamMemberRole(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTeamMemberRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTeamMemberRole>>
>;
export type UpdateTeamMemberRoleMutationBody =
  UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest;
export type UpdateTeamMemberRoleMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Update Team Member Role
 */
export const useUpdateTeamMemberRole = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTeamMemberRole>>,
      TError,
      {
        pathParams: UpdateTeamMemberRolePathParameters;
        data: UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTeamMemberRole>>,
  TError,
  {
    pathParams: UpdateTeamMemberRolePathParameters;
    data: UserManagementAPIModelsRequestsUpdateTeamMemberRoleRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateTeamMemberRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Get Team Invitation By Id
 */
export const getGetTeamInvitationByIdUrl = ({
  invitationId,
}: GetTeamInvitationByIdPathParameters) => {
  return `/user-management/api/v1/teams/invitations/${invitationId}`;
};

export const getTeamInvitationById = async (
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: RequestInit,
): Promise<TeamInvitationResponse> => {
  return gatewayServiceCustomFetch<TeamInvitationResponse>(
    getGetTeamInvitationByIdUrl({ invitationId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamInvitationByIdQueryKey = ({
  invitationId,
}: GetTeamInvitationByIdPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    "invitations",
    invitationId,
  ] as const;
};

export const useGetTeamInvitationByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitationById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamInvitationByIdQueryKey({ invitationId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamInvitationById>>
  > = ({ signal }) =>
    getTeamInvitationById({ invitationId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamInvitationById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamInvitationByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamInvitationById>>
>;
export type GetTeamInvitationByIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamInvitationByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitationById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationByIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitationById>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitationByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitationById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitationById>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitationByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitationById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Invitation By Id
 */

export function useGetTeamInvitationByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamInvitationById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamInvitationByIdInfiniteQueryOptions(
    { invitationId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Invitation By Id
 */
export const prefetchGetTeamInvitationByIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamInvitationByIdInfiniteQueryOptions(
    { invitationId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamInvitationByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTeamInvitationByIdQueryKey({ invitationId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamInvitationById>>
  > = ({ signal }) =>
    getTeamInvitationById({ invitationId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamInvitationById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamInvitationByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamInvitationById>>
>;
export type GetTeamInvitationByIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamInvitationById<
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationByIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitationById>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitationById<
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamInvitationById>>,
          TError,
          Awaited<ReturnType<typeof getTeamInvitationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamInvitationById<
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Invitation By Id
 */

export function useGetTeamInvitationById<
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamInvitationByIdQueryOptions(
    { invitationId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Invitation By Id
 */
export const prefetchGetTeamInvitationByIdQuery = async <
  TData = Awaited<ReturnType<typeof getTeamInvitationById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { invitationId }: GetTeamInvitationByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamInvitationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamInvitationByIdQueryOptions(
    { invitationId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Delete Team Invitation
 */
export const getDeleteTeamInvitationUrl = ({
  invitationId,
}: DeleteTeamInvitationPathParameters) => {
  return `/user-management/api/v1/teams/invitations/${invitationId}`;
};

export const deleteTeamInvitation = async (
  { invitationId }: DeleteTeamInvitationPathParameters,
  userManagementAPIModelsRequestsDeleteTeamInvitationRequest: UserManagementAPIModelsRequestsDeleteTeamInvitationRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getDeleteTeamInvitationUrl({ invitationId }),
    {
      ...options,
      method: "DELETE",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsDeleteTeamInvitationRequest,
      ),
    },
  );
};

export const getDeleteTeamInvitationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTeamInvitation>>,
    TError,
    {
      pathParams: DeleteTeamInvitationPathParameters;
      data: UserManagementAPIModelsRequestsDeleteTeamInvitationRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTeamInvitation>>,
  TError,
  {
    pathParams: DeleteTeamInvitationPathParameters;
    data: UserManagementAPIModelsRequestsDeleteTeamInvitationRequest;
  },
  TContext
> => {
  const mutationKey = ["deleteTeamInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTeamInvitation>>,
    {
      pathParams: DeleteTeamInvitationPathParameters;
      data: UserManagementAPIModelsRequestsDeleteTeamInvitationRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return deleteTeamInvitation(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTeamInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTeamInvitation>>
>;
export type DeleteTeamInvitationMutationBody =
  UserManagementAPIModelsRequestsDeleteTeamInvitationRequest;
export type DeleteTeamInvitationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Delete Team Invitation
 */
export const useDeleteTeamInvitation = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTeamInvitation>>,
      TError,
      {
        pathParams: DeleteTeamInvitationPathParameters;
        data: UserManagementAPIModelsRequestsDeleteTeamInvitationRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTeamInvitation>>,
  TError,
  {
    pathParams: DeleteTeamInvitationPathParameters;
    data: UserManagementAPIModelsRequestsDeleteTeamInvitationRequest;
  },
  TContext
> => {
  const mutationOptions = getDeleteTeamInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Accept Team Invitation
 */
export const getAcceptTeamInvitationUrl = () => {
  return `/user-management/api/v1/teams/invitations/accept`;
};

export const acceptTeamInvitation = async (
  userManagementAPIModelsRequestsAcceptTeamInvitationRequest: UserManagementAPIModelsRequestsAcceptTeamInvitationRequest,
  options?: RequestInit,
): Promise<InvitationAcceptanceResponse> => {
  return gatewayServiceCustomFetch<InvitationAcceptanceResponse>(
    getAcceptTeamInvitationUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsAcceptTeamInvitationRequest,
      ),
    },
  );
};

export const getAcceptTeamInvitationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptTeamInvitation>>,
    TError,
    { data: UserManagementAPIModelsRequestsAcceptTeamInvitationRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptTeamInvitation>>,
  TError,
  { data: UserManagementAPIModelsRequestsAcceptTeamInvitationRequest },
  TContext
> => {
  const mutationKey = ["acceptTeamInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptTeamInvitation>>,
    { data: UserManagementAPIModelsRequestsAcceptTeamInvitationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return acceptTeamInvitation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptTeamInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptTeamInvitation>>
>;
export type AcceptTeamInvitationMutationBody =
  UserManagementAPIModelsRequestsAcceptTeamInvitationRequest;
export type AcceptTeamInvitationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Accept Team Invitation
 */
export const useAcceptTeamInvitation = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptTeamInvitation>>,
      TError,
      { data: UserManagementAPIModelsRequestsAcceptTeamInvitationRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof acceptTeamInvitation>>,
  TError,
  { data: UserManagementAPIModelsRequestsAcceptTeamInvitationRequest },
  TContext
> => {
  const mutationOptions = getAcceptTeamInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Decline Team Invitation
 */
export const getDeclineTeamInvitationUrl = () => {
  return `/user-management/api/v1/teams/invitations/decline`;
};

export const declineTeamInvitation = async (
  userManagementAPIModelsRequestsDeclineTeamInvitationRequest: UserManagementAPIModelsRequestsDeclineTeamInvitationRequest,
  options?: RequestInit,
): Promise<InvitationDeclineResponse> => {
  return gatewayServiceCustomFetch<InvitationDeclineResponse>(
    getDeclineTeamInvitationUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsDeclineTeamInvitationRequest,
      ),
    },
  );
};

export const getDeclineTeamInvitationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof declineTeamInvitation>>,
    TError,
    { data: UserManagementAPIModelsRequestsDeclineTeamInvitationRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof declineTeamInvitation>>,
  TError,
  { data: UserManagementAPIModelsRequestsDeclineTeamInvitationRequest },
  TContext
> => {
  const mutationKey = ["declineTeamInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof declineTeamInvitation>>,
    { data: UserManagementAPIModelsRequestsDeclineTeamInvitationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return declineTeamInvitation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeclineTeamInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof declineTeamInvitation>>
>;
export type DeclineTeamInvitationMutationBody =
  UserManagementAPIModelsRequestsDeclineTeamInvitationRequest;
export type DeclineTeamInvitationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary [Teams] Decline Team Invitation
 */
export const useDeclineTeamInvitation = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof declineTeamInvitation>>,
      TError,
      { data: UserManagementAPIModelsRequestsDeclineTeamInvitationRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof declineTeamInvitation>>,
  TError,
  { data: UserManagementAPIModelsRequestsDeclineTeamInvitationRequest },
  TContext
> => {
  const mutationOptions = getDeclineTeamInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary [Teams] Get Teams By Member
 */
export const getGetTeamsByMemberUrl = ({
  userId,
}: GetTeamsByMemberPathParameters) => {
  return `/user-management/api/v1/teams/member/${userId}`;
};

export const getTeamsByMember = async (
  { userId }: GetTeamsByMemberPathParameters,
  options?: RequestInit,
): Promise<TeamResponse[]> => {
  return gatewayServiceCustomFetch<TeamResponse[]>(
    getGetTeamsByMemberUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamsByMemberQueryKey = ({
  userId,
}: GetTeamsByMemberPathParameters) => {
  return ["user-management", "api", "v1", "teams", "member", userId] as const;
};

export const useGetTeamsByMemberInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamsByMemberQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamsByMember>>
  > = ({ signal }) =>
    getTeamsByMember({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamsByMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamsByMemberInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamsByMember>>
>;
export type GetTeamsByMemberInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamsByMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByMemberPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Teams By Member
 */

export function useGetTeamsByMemberInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByMember>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamsByMemberInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Teams By Member
 */
export const prefetchGetTeamsByMemberInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamsByMemberInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamsByMemberQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamsByMemberQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamsByMember>>
  > = ({ signal }) =>
    getTeamsByMember({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamsByMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamsByMemberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamsByMember>>
>;
export type GetTeamsByMemberQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamsByMember<
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByMemberPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByMember<
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByMember>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByMember<
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Teams By Member
 */

export function useGetTeamsByMember<
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamsByMemberQueryOptions({ userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Teams By Member
 */
export const prefetchGetTeamsByMemberQuery = async <
  TData = Awaited<ReturnType<typeof getTeamsByMember>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetTeamsByMemberPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamsByMemberQueryOptions({ userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Get Team Member Permissions
 */
export const getGetTeamMemberPermissionsUrl = ({
  userId,
}: GetTeamMemberPermissionsPathParameters) => {
  return `/user-management/api/v1/teams/members/${userId}/permissions`;
};

export const getTeamMemberPermissions = async (
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: RequestInit,
): Promise<TeamMemberPermissionsResponse> => {
  return gatewayServiceCustomFetch<TeamMemberPermissionsResponse>(
    getGetTeamMemberPermissionsUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamMemberPermissionsQueryKey = ({
  userId,
}: GetTeamMemberPermissionsPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    "members",
    userId,
    "permissions",
  ] as const;
};

export const useGetTeamMemberPermissionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMemberPermissionsQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamMemberPermissions>>
  > = ({ signal }) =>
    getTeamMemberPermissions({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamMemberPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMemberPermissionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMemberPermissions>>
>;
export type GetTeamMemberPermissionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMemberPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPermissionsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberPermissions>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberPermissions>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Member Permissions
 */

export function useGetTeamMemberPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamMemberPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMemberPermissionsInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Member Permissions
 */
export const prefetchGetTeamMemberPermissionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMemberPermissionsInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamMemberPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamMemberPermissionsQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTeamMemberPermissions>>
  > = ({ signal }) =>
    getTeamMemberPermissions({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamMemberPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamMemberPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamMemberPermissions>>
>;
export type GetTeamMemberPermissionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamMemberPermissions<
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPermissionsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberPermissions>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberPermissions<
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamMemberPermissions>>,
          TError,
          Awaited<ReturnType<typeof getTeamMemberPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamMemberPermissions<
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Team Member Permissions
 */

export function useGetTeamMemberPermissions<
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamMemberPermissionsQueryOptions(
    { userId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Team Member Permissions
 */
export const prefetchGetTeamMemberPermissionsQuery = async <
  TData = Awaited<ReturnType<typeof getTeamMemberPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetTeamMemberPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamMemberPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamMemberPermissionsQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Get Teams By Owner
 */
export const getGetTeamsByOwnerUrl = ({
  userId,
}: GetTeamsByOwnerPathParameters) => {
  return `/user-management/api/v1/teams/owner/${userId}`;
};

export const getTeamsByOwner = async (
  { userId }: GetTeamsByOwnerPathParameters,
  options?: RequestInit,
): Promise<TeamResponse[]> => {
  return gatewayServiceCustomFetch<TeamResponse[]>(
    getGetTeamsByOwnerUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetTeamsByOwnerQueryKey = ({
  userId,
}: GetTeamsByOwnerPathParameters) => {
  return ["user-management", "api", "v1", "teams", "owner", userId] as const;
};

export const useGetTeamsByOwnerInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByOwner>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamsByOwnerQueryKey({ userId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamsByOwner>>> = ({
    signal,
  }) => getTeamsByOwner({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTeamsByOwner>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamsByOwnerInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamsByOwner>>
>;
export type GetTeamsByOwnerInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamsByOwnerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByOwner>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByOwnerPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByOwner>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByOwner>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByOwnerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByOwner>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByOwner>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByOwner>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByOwnerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByOwner>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Teams By Owner
 */

export function useGetTeamsByOwnerInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTeamsByOwner>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamsByOwnerInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Teams By Owner
 */
export const prefetchGetTeamsByOwnerInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamsByOwnerInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTeamsByOwnerQueryOptions = <
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTeamsByOwnerQueryKey({ userId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamsByOwner>>> = ({
    signal,
  }) => getTeamsByOwner({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTeamsByOwner>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTeamsByOwnerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTeamsByOwner>>
>;
export type GetTeamsByOwnerQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTeamsByOwner<
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByOwnerPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByOwner>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByOwner>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByOwner<
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTeamsByOwner>>,
          TError,
          Awaited<ReturnType<typeof getTeamsByOwner>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTeamsByOwner<
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get Teams By Owner
 */

export function useGetTeamsByOwner<
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTeamsByOwnerQueryOptions({ userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get Teams By Owner
 */
export const prefetchGetTeamsByOwnerQuery = async <
  TData = Awaited<ReturnType<typeof getTeamsByOwner>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetTeamsByOwnerPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTeamsByOwner>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTeamsByOwnerQueryOptions({ userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary [Teams] Get User Invitations To Team
 */
export const getGetUserInvitationsToTeamUrl = (
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/teams/users/${userId}/invitations?${stringifiedParams}`
    : `/user-management/api/v1/teams/users/${userId}/invitations`;
};

export const getUserInvitationsToTeam = async (
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: RequestInit,
): Promise<UserInvitationResponse[]> => {
  return gatewayServiceCustomFetch<UserInvitationResponse[]>(
    getGetUserInvitationsToTeamUrl({ userId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetUserInvitationsToTeamQueryKey = (
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
) => {
  return [
    "user-management",
    "api",
    "v1",
    "teams",
    "users",
    userId,
    "invitations",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetUserInvitationsToTeamInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserInvitationsToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserInvitationsToTeamQueryKey({ userId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserInvitationsToTeam>>
  > = ({ signal }) =>
    getUserInvitationsToTeam({ userId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserInvitationsToTeamInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserInvitationsToTeam>>
>;
export type GetUserInvitationsToTeamInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserInvitationsToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserInvitationsToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserInvitationsToTeamPathParameters,
  params: undefined | GetUserInvitationsToTeamParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
          TError,
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserInvitationsToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserInvitationsToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
          TError,
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserInvitationsToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserInvitationsToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get User Invitations To Team
 */

export function useGetUserInvitationsToTeamInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserInvitationsToTeam>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserInvitationsToTeamInfiniteQueryOptions(
    { userId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get User Invitations To Team
 */
export const prefetchGetUserInvitationsToTeamInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserInvitationsToTeamInfiniteQueryOptions(
    { userId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetUserInvitationsToTeamQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserInvitationsToTeamQueryKey({ userId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserInvitationsToTeam>>
  > = ({ signal }) =>
    getUserInvitationsToTeam({ userId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserInvitationsToTeamQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserInvitationsToTeam>>
>;
export type GetUserInvitationsToTeamQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserInvitationsToTeam<
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserInvitationsToTeamPathParameters,
  params: undefined | GetUserInvitationsToTeamParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
          TError,
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserInvitationsToTeam<
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
          TError,
          Awaited<ReturnType<typeof getUserInvitationsToTeam>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserInvitationsToTeam<
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [Teams] Get User Invitations To Team
 */

export function useGetUserInvitationsToTeam<
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserInvitationsToTeamQueryOptions(
    { userId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary [Teams] Get User Invitations To Team
 */
export const prefetchGetUserInvitationsToTeamQuery = async <
  TData = Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserInvitationsToTeamPathParameters,
  params?: GetUserInvitationsToTeamParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserInvitationsToTeam>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserInvitationsToTeamQueryOptions(
    { userId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
