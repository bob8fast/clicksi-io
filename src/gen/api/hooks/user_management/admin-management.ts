/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UserManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonModelsResponsesPagedResponse1UserManagementDomainAdminHelpersAdminDto,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetAdminByIdPathParameters,
  GetAllAdminsParams,
  GetPermissionsPathParameters,
  GrantPermissionsPathParameters,
  PromoteAdminPathParameters,
  ResetPermissionsPathParameters,
  RevokePermissionsPathParameters,
  SearchAdminsParams,
  UserManagementAPIModelsRequestsGrantAdminPermissionsRequest,
  UserManagementAPIModelsRequestsPromoteAdminRequest,
  UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest,
  UserManagementDomainAdminHelpersAdminDto,
  UserManagementDomainAdminHelpersAdminPermissionsResponse,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Gets all admins with optional filtering
 */
export const getGetAllAdminsUrl = (params?: GetAllAdminsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/admin-management?${stringifiedParams}`
    : `/user-management/api/v1/admin-management`;
};

export const getAllAdmins = async (
  params?: GetAllAdminsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResponse1UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResponse1UserManagementDomainAdminHelpersAdminDto>(
    getGetAllAdminsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetAllAdminsQueryKey = (params?: GetAllAdminsParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "admin-management",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetAllAdminsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAllAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllAdminsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAdmins>>> = ({
    signal,
  }) => getAllAdmins(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllAdmins>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllAdminsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAdmins>>
>;
export type GetAllAdminsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAllAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetAllAdminsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllAdmins>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdmins>>,
          TError,
          Awaited<ReturnType<typeof getAllAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllAdmins>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdmins>>,
          TError,
          Awaited<ReturnType<typeof getAllAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all admins with optional filtering
 */

export function useGetAllAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAllAdminsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets all admins with optional filtering
 */
export const prefetchGetAllAdminsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAllAdminsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetAllAdminsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllAdminsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAdmins>>> = ({
    signal,
  }) => getAllAdmins(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getAllAdmins>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllAdminsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAdmins>>
>;
export type GetAllAdminsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAllAdmins<
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetAllAdminsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdmins>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdmins>>,
          TError,
          Awaited<ReturnType<typeof getAllAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllAdmins<
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdmins>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdmins>>,
          TError,
          Awaited<ReturnType<typeof getAllAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllAdmins<
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all admins with optional filtering
 */

export function useGetAllAdmins<
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAllAdminsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets all admins with optional filtering
 */
export const prefetchGetAllAdminsQuery = async <
  TData = Awaited<ReturnType<typeof getAllAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetAllAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAllAdminsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Gets an admin by ID
 */
export const getGetAdminByIdUrl = ({ adminId }: GetAdminByIdPathParameters) => {
  return `/user-management/api/v1/admin-management/${adminId}`;
};

export const getAdminById = async (
  { adminId }: GetAdminByIdPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainAdminHelpersAdminDto>(
    getGetAdminByIdUrl({ adminId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetAdminByIdQueryKey = ({
  adminId,
}: GetAdminByIdPathParameters) => {
  return ["user-management", "api", "v1", "admin-management", adminId] as const;
};

export const useGetAdminByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAdminById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAdminById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdminByIdQueryKey({ adminId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminById>>> = ({
    signal,
  }) => getAdminById({ adminId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAdminById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAdminByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminById>>
>;
export type GetAdminByIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAdminByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAdminById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAdminByIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAdminById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminById>>,
          TError,
          Awaited<ReturnType<typeof getAdminById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdminByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAdminById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAdminById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminById>>,
          TError,
          Awaited<ReturnType<typeof getAdminById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdminByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAdminById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAdminById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets an admin by ID
 */

export function useGetAdminByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAdminById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAdminById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAdminByIdInfiniteQueryOptions(
    { adminId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets an admin by ID
 */
export const prefetchGetAdminByIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { adminId }: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAdminById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAdminByIdInfiniteQueryOptions(
    { adminId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetAdminByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdminByIdQueryKey({ adminId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminById>>> = ({
    signal,
  }) => getAdminById({ adminId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getAdminById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAdminByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminById>>
>;
export type GetAdminByIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAdminById<
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAdminByIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminById>>,
          TError,
          Awaited<ReturnType<typeof getAdminById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdminById<
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminById>>,
          TError,
          Awaited<ReturnType<typeof getAdminById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdminById<
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets an admin by ID
 */

export function useGetAdminById<
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAdminByIdQueryOptions({ adminId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets an admin by ID
 */
export const prefetchGetAdminByIdQuery = async <
  TData = Awaited<ReturnType<typeof getAdminById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { adminId }: GetAdminByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAdminByIdQueryOptions({ adminId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Gets an admin's current permissions
 */
export const getGetPermissionsUrl = ({
  adminId,
}: GetPermissionsPathParameters) => {
  return `/user-management/api/v1/admin-management/${adminId}/permissions`;
};

export const getPermissions = async (
  { adminId }: GetPermissionsPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainAdminHelpersAdminPermissionsResponse> => {
  return gatewayServiceCustomFetch<UserManagementDomainAdminHelpersAdminPermissionsResponse>(
    getGetPermissionsUrl({ adminId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetPermissionsQueryKey = ({
  adminId,
}: GetPermissionsPathParameters) => {
  return [
    "user-management",
    "api",
    "v1",
    "admin-management",
    adminId,
    "permissions",
  ] as const;
};

export const useGetPermissionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPermissionsQueryKey({ adminId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissions>>> = ({
    signal,
  }) => getPermissions({ adminId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPermissionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermissions>>
>;
export type GetPermissionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPermissionsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissions>>,
          TError,
          Awaited<ReturnType<typeof getPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissions>>,
          TError,
          Awaited<ReturnType<typeof getPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets an admin's current permissions
 */

export function useGetPermissionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPermissions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPermissionsInfiniteQueryOptions(
    { adminId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets an admin's current permissions
 */
export const prefetchGetPermissionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { adminId }: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPermissionsInfiniteQueryOptions(
    { adminId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPermissions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPermissionsQueryKey({ adminId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissions>>> = ({
    signal,
  }) => getPermissions({ adminId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermissions>>
>;
export type GetPermissionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetPermissions<
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPermissionsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPermissions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissions>>,
          TError,
          Awaited<ReturnType<typeof getPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPermissions<
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPermissions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissions>>,
          TError,
          Awaited<ReturnType<typeof getPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPermissions<
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPermissions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets an admin's current permissions
 */

export function useGetPermissions<
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { adminId }: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPermissions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetPermissionsQueryOptions({ adminId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets an admin's current permissions
 */
export const prefetchGetPermissionsQuery = async <
  TData = Awaited<ReturnType<typeof getPermissions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { adminId }: GetPermissionsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPermissions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetPermissionsQueryOptions({ adminId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Grants specific permissions to an admin
 */
export const getGrantPermissionsUrl = ({
  adminId,
}: GrantPermissionsPathParameters) => {
  return `/user-management/api/v1/admin-management/${adminId}/permissions/grant`;
};

export const grantPermissions = async (
  { adminId }: GrantPermissionsPathParameters,
  userManagementAPIModelsRequestsGrantAdminPermissionsRequest: UserManagementAPIModelsRequestsGrantAdminPermissionsRequest,
  options?: RequestInit,
): Promise<UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainAdminHelpersAdminDto>(
    getGrantPermissionsUrl({ adminId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsGrantAdminPermissionsRequest,
      ),
    },
  );
};

export const getGrantPermissionsMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof grantPermissions>>,
    TError,
    {
      pathParams: GrantPermissionsPathParameters;
      data: UserManagementAPIModelsRequestsGrantAdminPermissionsRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof grantPermissions>>,
  TError,
  {
    pathParams: GrantPermissionsPathParameters;
    data: UserManagementAPIModelsRequestsGrantAdminPermissionsRequest;
  },
  TContext
> => {
  const mutationKey = ["grantPermissions"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof grantPermissions>>,
    {
      pathParams: GrantPermissionsPathParameters;
      data: UserManagementAPIModelsRequestsGrantAdminPermissionsRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return grantPermissions(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GrantPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof grantPermissions>>
>;
export type GrantPermissionsMutationBody =
  UserManagementAPIModelsRequestsGrantAdminPermissionsRequest;
export type GrantPermissionsMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Grants specific permissions to an admin
 */
export const useGrantPermissions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof grantPermissions>>,
      TError,
      {
        pathParams: GrantPermissionsPathParameters;
        data: UserManagementAPIModelsRequestsGrantAdminPermissionsRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof grantPermissions>>,
  TError,
  {
    pathParams: GrantPermissionsPathParameters;
    data: UserManagementAPIModelsRequestsGrantAdminPermissionsRequest;
  },
  TContext
> => {
  const mutationOptions = getGrantPermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Resets an admin's permissions to defaults for their access level
 */
export const getResetPermissionsUrl = ({
  adminId,
}: ResetPermissionsPathParameters) => {
  return `/user-management/api/v1/admin-management/${adminId}/permissions/reset`;
};

export const resetPermissions = async (
  { adminId }: ResetPermissionsPathParameters,
  options?: RequestInit,
): Promise<UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainAdminHelpersAdminDto>(
    getResetPermissionsUrl({ adminId }),
    {
      ...options,
      method: "PUT",
    },
  );
};

export const getResetPermissionsMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPermissions>>,
    TError,
    { pathParams: ResetPermissionsPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPermissions>>,
  TError,
  { pathParams: ResetPermissionsPathParameters },
  TContext
> => {
  const mutationKey = ["resetPermissions"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPermissions>>,
    { pathParams: ResetPermissionsPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return resetPermissions(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetPermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetPermissions>>
>;

export type ResetPermissionsMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Resets an admin's permissions to defaults for their access level
 */
export const useResetPermissions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resetPermissions>>,
      TError,
      { pathParams: ResetPermissionsPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof resetPermissions>>,
  TError,
  { pathParams: ResetPermissionsPathParameters },
  TContext
> => {
  const mutationOptions = getResetPermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Revokes specific permissions from an admin
 */
export const getRevokePermissionsUrl = ({
  adminId,
}: RevokePermissionsPathParameters) => {
  return `/user-management/api/v1/admin-management/${adminId}/permissions/revoke`;
};

export const revokePermissions = async (
  { adminId }: RevokePermissionsPathParameters,
  userManagementAPIModelsRequestsRevokeAdminPermissionsRequest: UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest,
  options?: RequestInit,
): Promise<UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainAdminHelpersAdminDto>(
    getRevokePermissionsUrl({ adminId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        userManagementAPIModelsRequestsRevokeAdminPermissionsRequest,
      ),
    },
  );
};

export const getRevokePermissionsMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof revokePermissions>>,
    TError,
    {
      pathParams: RevokePermissionsPathParameters;
      data: UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof revokePermissions>>,
  TError,
  {
    pathParams: RevokePermissionsPathParameters;
    data: UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest;
  },
  TContext
> => {
  const mutationKey = ["revokePermissions"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof revokePermissions>>,
    {
      pathParams: RevokePermissionsPathParameters;
      data: UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return revokePermissions(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RevokePermissionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof revokePermissions>>
>;
export type RevokePermissionsMutationBody =
  UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest;
export type RevokePermissionsMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Revokes specific permissions from an admin
 */
export const useRevokePermissions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof revokePermissions>>,
      TError,
      {
        pathParams: RevokePermissionsPathParameters;
        data: UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof revokePermissions>>,
  TError,
  {
    pathParams: RevokePermissionsPathParameters;
    data: UserManagementAPIModelsRequestsRevokeAdminPermissionsRequest;
  },
  TContext
> => {
  const mutationOptions = getRevokePermissionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Promotes an admin to a higher access level
 */
export const getPromoteAdminUrl = ({ adminId }: PromoteAdminPathParameters) => {
  return `/user-management/api/v1/admin-management/${adminId}/promote`;
};

export const promoteAdmin = async (
  { adminId }: PromoteAdminPathParameters,
  userManagementAPIModelsRequestsPromoteAdminRequest: UserManagementAPIModelsRequestsPromoteAdminRequest,
  options?: RequestInit,
): Promise<UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<UserManagementDomainAdminHelpersAdminDto>(
    getPromoteAdminUrl({ adminId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(userManagementAPIModelsRequestsPromoteAdminRequest),
    },
  );
};

export const getPromoteAdminMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof promoteAdmin>>,
    TError,
    {
      pathParams: PromoteAdminPathParameters;
      data: UserManagementAPIModelsRequestsPromoteAdminRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof promoteAdmin>>,
  TError,
  {
    pathParams: PromoteAdminPathParameters;
    data: UserManagementAPIModelsRequestsPromoteAdminRequest;
  },
  TContext
> => {
  const mutationKey = ["promoteAdmin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof promoteAdmin>>,
    {
      pathParams: PromoteAdminPathParameters;
      data: UserManagementAPIModelsRequestsPromoteAdminRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return promoteAdmin(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PromoteAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof promoteAdmin>>
>;
export type PromoteAdminMutationBody =
  UserManagementAPIModelsRequestsPromoteAdminRequest;
export type PromoteAdminMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Promotes an admin to a higher access level
 */
export const usePromoteAdmin = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof promoteAdmin>>,
      TError,
      {
        pathParams: PromoteAdminPathParameters;
        data: UserManagementAPIModelsRequestsPromoteAdminRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof promoteAdmin>>,
  TError,
  {
    pathParams: PromoteAdminPathParameters;
    data: UserManagementAPIModelsRequestsPromoteAdminRequest;
  },
  TContext
> => {
  const mutationOptions = getPromoteAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Searches for admins based on criteria
 */
export const getSearchAdminsUrl = (params?: SearchAdminsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/user-management/api/v1/admin-management/search?${stringifiedParams}`
    : `/user-management/api/v1/admin-management/search`;
};

export const searchAdmins = async (
  params?: SearchAdminsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResponse1UserManagementDomainAdminHelpersAdminDto> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResponse1UserManagementDomainAdminHelpersAdminDto>(
    getSearchAdminsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSearchAdminsQueryKey = (params?: SearchAdminsParams) => {
  return [
    "user-management",
    "api",
    "v1",
    "admin-management",
    "search",
    ...(params ? [params] : []),
  ] as const;
};

export const useSearchAdminsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof searchAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchAdminsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchAdmins>>> = ({
    signal,
  }) => searchAdmins(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchAdmins>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchAdminsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchAdmins>>
>;
export type SearchAdminsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useSearchAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | SearchAdminsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchAdmins>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAdmins>>,
          TError,
          Awaited<ReturnType<typeof searchAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchAdmins>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAdmins>>,
          TError,
          Awaited<ReturnType<typeof searchAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Searches for admins based on criteria
 */

export function useSearchAdminsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchAdmins>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useSearchAdminsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Searches for admins based on criteria
 */
export const prefetchSearchAdminsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchAdmins>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useSearchAdminsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useSearchAdminsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchAdminsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchAdmins>>> = ({
    signal,
  }) => searchAdmins(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof searchAdmins>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchAdminsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchAdmins>>
>;
export type SearchAdminsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useSearchAdmins<
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | SearchAdminsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchAdmins>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAdmins>>,
          TError,
          Awaited<ReturnType<typeof searchAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchAdmins<
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchAdmins>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAdmins>>,
          TError,
          Awaited<ReturnType<typeof searchAdmins>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchAdmins<
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Searches for admins based on criteria
 */

export function useSearchAdmins<
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useSearchAdminsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Searches for admins based on criteria
 */
export const prefetchSearchAdminsQuery = async <
  TData = Awaited<ReturnType<typeof searchAdmins>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: SearchAdminsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchAdmins>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useSearchAdminsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
