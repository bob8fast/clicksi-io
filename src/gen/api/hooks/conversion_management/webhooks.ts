/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ConversionManagement.API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ConversionManagementAPIControllersConversionWebhookResponse,
  ConversionManagementAPIControllersSignatureResponse,
  ConversionManagementAPIControllersWebhookTestResponse,
  ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Receives conversion data from a webhook
 */
export const getReceiveConversionUrl = () => {
  return `/conversion-management/api/v1/webhooks/conversion`;
};

export const receiveConversion = async (
  conversionManagementAPIModelsRequestsWebhookConversionWebhookRequest: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
  options?: RequestInit,
): Promise<ConversionManagementAPIControllersConversionWebhookResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIControllersConversionWebhookResponse>(
    getReceiveConversionUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        conversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
      ),
    },
  );
};

export const getReceiveConversionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof receiveConversion>>,
    TError,
    {
      data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof receiveConversion>>,
  TError,
  {
    data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
  },
  TContext
> => {
  const mutationKey = ["receiveConversion"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof receiveConversion>>,
    {
      data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
    }
  > = (props) => {
    const { data } = props ?? {};

    return receiveConversion(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReceiveConversionMutationResult = NonNullable<
  Awaited<ReturnType<typeof receiveConversion>>
>;
export type ReceiveConversionMutationBody =
  ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
export type ReceiveConversionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Receives conversion data from a webhook
 */
export const useReceiveConversion = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof receiveConversion>>,
      TError,
      {
        data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof receiveConversion>>,
  TError,
  {
    data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
  },
  TContext
> => {
  const mutationOptions = getReceiveConversionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Generates a signature for a webhook payload
 */
export const getGenerateSignatureUrl = () => {
  return `/conversion-management/api/v1/webhooks/generate-signature`;
};

export const generateSignature = async (
  conversionManagementAPIModelsRequestsWebhookConversionWebhookRequest: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
  options?: RequestInit,
): Promise<ConversionManagementAPIControllersSignatureResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIControllersSignatureResponse>(
    getGenerateSignatureUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        conversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
      ),
    },
  );
};

export const getGenerateSignatureMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateSignature>>,
    TError,
    {
      data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateSignature>>,
  TError,
  {
    data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
  },
  TContext
> => {
  const mutationKey = ["generateSignature"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateSignature>>,
    {
      data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
    }
  > = (props) => {
    const { data } = props ?? {};

    return generateSignature(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateSignatureMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateSignature>>
>;
export type GenerateSignatureMutationBody =
  ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
export type GenerateSignatureMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Generates a signature for a webhook payload
 */
export const useGenerateSignature = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateSignature>>,
      TError,
      {
        data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof generateSignature>>,
  TError,
  {
    data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
  },
  TContext
> => {
  const mutationOptions = getGenerateSignatureMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Tests a webhook integration
 */
export const getTestWebhookUrl = () => {
  return `/conversion-management/api/v1/webhooks/test`;
};

export const testWebhook = async (
  conversionManagementAPIModelsRequestsWebhookConversionWebhookRequest: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
  options?: RequestInit,
): Promise<ConversionManagementAPIControllersWebhookTestResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIControllersWebhookTestResponse>(
    getTestWebhookUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        conversionManagementAPIModelsRequestsWebhookConversionWebhookRequest,
      ),
    },
  );
};

export const getTestWebhookMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof testWebhook>>,
    TError,
    {
      data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof testWebhook>>,
  TError,
  {
    data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
  },
  TContext
> => {
  const mutationKey = ["testWebhook"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof testWebhook>>,
    {
      data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
    }
  > = (props) => {
    const { data } = props ?? {};

    return testWebhook(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TestWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof testWebhook>>
>;
export type TestWebhookMutationBody =
  ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
export type TestWebhookMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Tests a webhook integration
 */
export const useTestWebhook = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof testWebhook>>,
      TError,
      {
        data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof testWebhook>>,
  TError,
  {
    data: ConversionManagementAPIModelsRequestsWebhookConversionWebhookRequest;
  },
  TContext
> => {
  const mutationOptions = getTestWebhookMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
