/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ConversionManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest,
  ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest,
  ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse,
  ConversionManagementAPIModelsResponsesApiKeyApiKeySecretResponse,
  GetByIdPathParameters,
  GetByRetailerIdPathParameters,
  RegenerateSecretPathParameters,
  UpdatePathParameters,
  _DeletePathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Gets all API keys (Admin only)
 */
export const getGetAllUrl = () => {
  return `/conversion-management/api/v1/api-keys`;
};

export const getAll = async (
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse[]> => {
  return gatewayServiceCustomFetch<
    ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse[]
  >(getGetAllUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetAllQueryKey = () => {
  return ["conversion-management", "api", "v1", "api-keys"] as const;
};

export const useGetAllInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({
    signal,
  }) => getAll({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAll>>
>;
export type GetAllInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all API keys (Admin only)
 */

export function useGetAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAllInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets all API keys (Admin only)
 */
export const prefetchGetAllInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAllInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({
    signal,
  }) => getAll({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllQueryResult = NonNullable<Awaited<ReturnType<typeof getAll>>>;
export type GetAllQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetAll<
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAll<
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAll>>,
          TError,
          Awaited<ReturnType<typeof getAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAll<
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets all API keys (Admin only)
 */

export function useGetAll<
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets all API keys (Admin only)
 */
export const prefetchGetAllQuery = async <
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetAllQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Creates a new API key
 */
export const getCreateUrl = () => {
  return `/conversion-management/api/v1/api-keys`;
};

export const create = async (
  conversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest: ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse>(
    getCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        conversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest,
      ),
    },
  );
};

export const getCreateMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest },
  TContext
> => {
  const mutationKey = ["create"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof create>>,
    { data: ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return create(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody =
  ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest;
export type CreateMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Creates a new API key
 */
export const useCreate = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof create>>,
      TError,
      { data: ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: ConversionManagementAPIModelsRequestsApiKeyCreateApiKeyRequest },
  TContext
> => {
  const mutationOptions = getCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Gets an API key by ID
 */
export const getGetByIdUrl = ({ id }: GetByIdPathParameters) => {
  return `/conversion-management/api/v1/api-keys/${id}`;
};

export const getById = async (
  { id }: GetByIdPathParameters,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse>(
    getGetByIdUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetByIdQueryKey = ({ id }: GetByIdPathParameters) => {
  return ["conversion-management", "api", "v1", "api-keys", id] as const;
};

export const useGetByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById>>> = ({
    signal,
  }) => getById({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getById>>
>;
export type GetByIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getById>>,
          TError,
          Awaited<ReturnType<typeof getById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getById>>,
          TError,
          Awaited<ReturnType<typeof getById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets an API key by ID
 */

export function useGetByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetByIdInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets an API key by ID
 */
export const prefetchGetByIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetByIdInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetByIdQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById>>> = ({
    signal,
  }) => getById({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getById>>
>;
export type GetByIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetById<
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getById>>,
          TError,
          Awaited<ReturnType<typeof getById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetById<
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getById>>,
          TError,
          Awaited<ReturnType<typeof getById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetById<
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets an API key by ID
 */

export function useGetById<
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetByIdQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets an API key by ID
 */
export const prefetchGetByIdQuery = async <
  TData = Awaited<ReturnType<typeof getById>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetByIdQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Updates an existing API key
 */
export const getUpdateUrl = ({ id }: UpdatePathParameters) => {
  return `/conversion-management/api/v1/api-keys/${id}`;
};

export const update = async (
  { id }: UpdatePathParameters,
  conversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest: ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse>(
    getUpdateUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        conversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest,
      ),
    },
  );
};

export const getUpdateMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof update>>,
    TError,
    {
      pathParams: UpdatePathParameters;
      data: ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof update>>,
  TError,
  {
    pathParams: UpdatePathParameters;
    data: ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest;
  },
  TContext
> => {
  const mutationKey = ["update"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof update>>,
    {
      pathParams: UpdatePathParameters;
      data: ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return update(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof update>>
>;
export type UpdateMutationBody =
  ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest;
export type UpdateMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Updates an existing API key
 */
export const useUpdate = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof update>>,
      TError,
      {
        pathParams: UpdatePathParameters;
        data: ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof update>>,
  TError,
  {
    pathParams: UpdatePathParameters;
    data: ConversionManagementAPIModelsRequestsApiKeyUpdateApiKeyRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Deletes an API key
 */
export const getDeleteUrl = ({ id }: _DeletePathParameters) => {
  return `/conversion-management/api/v1/api-keys/${id}`;
};

export const _delete = async (
  { id }: _DeletePathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteUrl({ id }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof _delete>>,
    TError,
    { pathParams: _DeletePathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof _delete>>,
  TError,
  { pathParams: _DeletePathParameters },
  TContext
> => {
  const mutationKey = ["_delete"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof _delete>>,
    { pathParams: _DeletePathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return _delete(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type _DeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof _delete>>
>;

export type _DeleteMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Deletes an API key
 */
export const useDelete = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof _delete>>,
      TError,
      { pathParams: _DeletePathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof _delete>>,
  TError,
  { pathParams: _DeletePathParameters },
  TContext
> => {
  const mutationOptions = getDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Regenerates the secret for an API key
 */
export const getRegenerateSecretUrl = ({
  id,
}: RegenerateSecretPathParameters) => {
  return `/conversion-management/api/v1/api-keys/${id}/regenerate-secret`;
};

export const regenerateSecret = async (
  { id }: RegenerateSecretPathParameters,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesApiKeyApiKeySecretResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIModelsResponsesApiKeyApiKeySecretResponse>(
    getRegenerateSecretUrl({ id }),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getRegenerateSecretMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof regenerateSecret>>,
    TError,
    { pathParams: RegenerateSecretPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof regenerateSecret>>,
  TError,
  { pathParams: RegenerateSecretPathParameters },
  TContext
> => {
  const mutationKey = ["regenerateSecret"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof regenerateSecret>>,
    { pathParams: RegenerateSecretPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return regenerateSecret(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegenerateSecretMutationResult = NonNullable<
  Awaited<ReturnType<typeof regenerateSecret>>
>;

export type RegenerateSecretMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Regenerates the secret for an API key
 */
export const useRegenerateSecret = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof regenerateSecret>>,
      TError,
      { pathParams: RegenerateSecretPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof regenerateSecret>>,
  TError,
  { pathParams: RegenerateSecretPathParameters },
  TContext
> => {
  const mutationOptions = getRegenerateSecretMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Gets API keys for a specific retailer (only accessible by the retailer or admin)
 */
export const getGetByRetailerIdUrl = ({
  retailerId,
}: GetByRetailerIdPathParameters) => {
  return `/conversion-management/api/v1/api-keys/retailer/${retailerId}`;
};

export const getByRetailerId = async (
  { retailerId }: GetByRetailerIdPathParameters,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse[]> => {
  return gatewayServiceCustomFetch<
    ConversionManagementAPIModelsResponsesApiKeyApiKeyResponse[]
  >(getGetByRetailerIdUrl({ retailerId }), {
    ...options,
    method: "GET",
  });
};

export const getGetByRetailerIdQueryKey = ({
  retailerId,
}: GetByRetailerIdPathParameters) => {
  return [
    "conversion-management",
    "api",
    "v1",
    "api-keys",
    "retailer",
    retailerId,
  ] as const;
};

export const useGetByRetailerIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getByRetailerId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetByRetailerIdQueryKey({ retailerId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByRetailerId>>> = ({
    signal,
  }) => getByRetailerId({ retailerId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getByRetailerId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetByRetailerIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getByRetailerId>>
>;
export type GetByRetailerIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetByRetailerIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getByRetailerId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByRetailerIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByRetailerId>>,
          TError,
          Awaited<ReturnType<typeof getByRetailerId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetByRetailerIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getByRetailerId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByRetailerId>>,
          TError,
          Awaited<ReturnType<typeof getByRetailerId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetByRetailerIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getByRetailerId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets API keys for a specific retailer (only accessible by the retailer or admin)
 */

export function useGetByRetailerIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getByRetailerId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetByRetailerIdInfiniteQueryOptions(
    { retailerId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets API keys for a specific retailer (only accessible by the retailer or admin)
 */
export const prefetchGetByRetailerIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { retailerId }: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetByRetailerIdInfiniteQueryOptions(
    { retailerId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetByRetailerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetByRetailerIdQueryKey({ retailerId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getByRetailerId>>> = ({
    signal,
  }) => getByRetailerId({ retailerId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getByRetailerId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetByRetailerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getByRetailerId>>
>;
export type GetByRetailerIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetByRetailerId<
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByRetailerIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByRetailerId>>,
          TError,
          Awaited<ReturnType<typeof getByRetailerId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetByRetailerId<
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByRetailerId>>,
          TError,
          Awaited<ReturnType<typeof getByRetailerId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetByRetailerId<
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets API keys for a specific retailer (only accessible by the retailer or admin)
 */

export function useGetByRetailerId<
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetByRetailerIdQueryOptions({ retailerId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets API keys for a specific retailer (only accessible by the retailer or admin)
 */
export const prefetchGetByRetailerIdQuery = async <
  TData = Awaited<ReturnType<typeof getByRetailerId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { retailerId }: GetByRetailerIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getByRetailerId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetByRetailerIdQueryOptions({ retailerId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
