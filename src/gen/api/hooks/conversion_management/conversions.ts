/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ConversionManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonModelsResponsesPagedResponse1ConversionManagementAPIModelsResponsesConversionResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ConversionManagementAPIModelsRequestsRecordConversionRequest,
  ConversionManagementAPIModelsResponsesConversionResponse,
  GetConversionPathParameters,
  GetConversionsParams,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Record a new conversion from a tracked link (BusinessUser/Admin only)
 */
export const getRecordConversionUrl = () => {
  return `/conversion-management/api/v1/conversions`;
};

export const recordConversion = async (
  conversionManagementAPIModelsRequestsRecordConversionRequest: ConversionManagementAPIModelsRequestsRecordConversionRequest,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesConversionResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIModelsResponsesConversionResponse>(
    getRecordConversionUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        conversionManagementAPIModelsRequestsRecordConversionRequest,
      ),
    },
  );
};

export const getRecordConversionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recordConversion>>,
    TError,
    { data: ConversionManagementAPIModelsRequestsRecordConversionRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recordConversion>>,
  TError,
  { data: ConversionManagementAPIModelsRequestsRecordConversionRequest },
  TContext
> => {
  const mutationKey = ["recordConversion"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recordConversion>>,
    { data: ConversionManagementAPIModelsRequestsRecordConversionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return recordConversion(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecordConversionMutationResult = NonNullable<
  Awaited<ReturnType<typeof recordConversion>>
>;
export type RecordConversionMutationBody =
  ConversionManagementAPIModelsRequestsRecordConversionRequest;
export type RecordConversionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Record a new conversion from a tracked link (BusinessUser/Admin only)
 */
export const useRecordConversion = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof recordConversion>>,
      TError,
      { data: ConversionManagementAPIModelsRequestsRecordConversionRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof recordConversion>>,
  TError,
  { data: ConversionManagementAPIModelsRequestsRecordConversionRequest },
  TContext
> => {
  const mutationOptions = getRecordConversionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get conversions for the current user/creator
 */
export const getGetConversionsUrl = (params?: GetConversionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/conversion-management/api/v1/conversions?${stringifiedParams}`
    : `/conversion-management/api/v1/conversions`;
};

export const getConversions = async (
  params?: GetConversionsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResponse1ConversionManagementAPIModelsResponsesConversionResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResponse1ConversionManagementAPIModelsResponsesConversionResponse>(
    getGetConversionsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetConversionsQueryKey = (params?: GetConversionsParams) => {
  return [
    "conversion-management",
    "api",
    "v1",
    "conversions",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetConversionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConversions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConversionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversions>>> = ({
    signal,
  }) => getConversions(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConversions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConversionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConversions>>
>;
export type GetConversionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConversionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetConversionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversions>>,
          TError,
          Awaited<ReturnType<typeof getConversions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversions>>,
          TError,
          Awaited<ReturnType<typeof getConversions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get conversions for the current user/creator
 */

export function useGetConversionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversions>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConversionsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get conversions for the current user/creator
 */
export const prefetchGetConversionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConversionsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConversionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConversionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversions>>> = ({
    signal,
  }) => getConversions(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConversions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConversionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConversions>>
>;
export type GetConversionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConversions<
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetConversionsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversions>>,
          TError,
          Awaited<ReturnType<typeof getConversions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversions<
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversions>>,
          TError,
          Awaited<ReturnType<typeof getConversions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversions<
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get conversions for the current user/creator
 */

export function useGetConversions<
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConversionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get conversions for the current user/creator
 */
export const prefetchGetConversionsQuery = async <
  TData = Awaited<ReturnType<typeof getConversions>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetConversionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversions>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConversionsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get a specific conversion by ID
 */
export const getGetConversionUrl = ({ id }: GetConversionPathParameters) => {
  return `/conversion-management/api/v1/conversions/${id}`;
};

export const getConversion = async (
  { id }: GetConversionPathParameters,
  options?: RequestInit,
): Promise<ConversionManagementAPIModelsResponsesConversionResponse> => {
  return gatewayServiceCustomFetch<ConversionManagementAPIModelsResponsesConversionResponse>(
    getGetConversionUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetConversionQueryKey = ({
  id,
}: GetConversionPathParameters) => {
  return ["conversion-management", "api", "v1", "conversions", id] as const;
};

export const useGetConversionInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConversion>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConversionQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversion>>> = ({
    signal,
  }) => getConversion({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConversion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConversionInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConversion>>
>;
export type GetConversionInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConversionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversion>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConversionPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversion>>,
          TError,
          Awaited<ReturnType<typeof getConversion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversion>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversion>>,
          TError,
          Awaited<ReturnType<typeof getConversion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversion>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific conversion by ID
 */

export function useGetConversionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConversion>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConversionInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific conversion by ID
 */
export const prefetchGetConversionInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConversion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConversionInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConversionQueryOptions = <
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversion>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConversionQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversion>>> = ({
    signal,
  }) => getConversion({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConversion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConversionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConversion>>
>;
export type GetConversionQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConversion<
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConversionPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversion>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversion>>,
          TError,
          Awaited<ReturnType<typeof getConversion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversion<
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversion>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConversion>>,
          TError,
          Awaited<ReturnType<typeof getConversion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConversion<
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversion>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific conversion by ID
 */

export function useGetConversion<
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversion>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConversionQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific conversion by ID
 */
export const prefetchGetConversionQuery = async <
  TData = Awaited<ReturnType<typeof getConversion>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetConversionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConversion>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConversionQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
