/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ConversionManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  ConversionManagementAPIControllersLinkStatisticsRequest,
  GetCreatorStatisticsPathParameters,
  GetLinkStatisticsPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get conversion statistics for a creator
 */
export const getGetCreatorStatisticsUrl = ({
  creatorId,
}: GetCreatorStatisticsPathParameters) => {
  return `/conversion-management/api/v1/statistics/creator/${creatorId}`;
};

export const getCreatorStatistics = async (
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getGetCreatorStatisticsUrl({ creatorId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCreatorStatisticsQueryKey = ({
  creatorId,
}: GetCreatorStatisticsPathParameters) => {
  return [
    "conversion-management",
    "api",
    "v1",
    "statistics",
    "creator",
    creatorId,
  ] as const;
};

export const useGetCreatorStatisticsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCreatorStatisticsQueryKey({ creatorId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorStatistics>>
  > = ({ signal }) =>
    getCreatorStatistics({ creatorId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCreatorStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorStatisticsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorStatistics>>
>;
export type GetCreatorStatisticsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorStatisticsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorStatistics>>,
          TError,
          Awaited<ReturnType<typeof getCreatorStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorStatistics>>,
          TError,
          Awaited<ReturnType<typeof getCreatorStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get conversion statistics for a creator
 */

export function useGetCreatorStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCreatorStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorStatisticsInfiniteQueryOptions(
    { creatorId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get conversion statistics for a creator
 */
export const prefetchGetCreatorStatisticsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorStatisticsInfiniteQueryOptions(
    { creatorId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCreatorStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCreatorStatisticsQueryKey({ creatorId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCreatorStatistics>>
  > = ({ signal }) =>
    getCreatorStatistics({ creatorId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCreatorStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCreatorStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCreatorStatistics>>
>;
export type GetCreatorStatisticsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCreatorStatistics<
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorStatisticsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorStatistics>>,
          TError,
          Awaited<ReturnType<typeof getCreatorStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorStatistics<
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreatorStatistics>>,
          TError,
          Awaited<ReturnType<typeof getCreatorStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCreatorStatistics<
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get conversion statistics for a creator
 */

export function useGetCreatorStatistics<
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCreatorStatisticsQueryOptions(
    { creatorId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get conversion statistics for a creator
 */
export const prefetchGetCreatorStatisticsQuery = async <
  TData = Awaited<ReturnType<typeof getCreatorStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { creatorId }: GetCreatorStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCreatorStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCreatorStatisticsQueryOptions(
    { creatorId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get conversion statistics for a specific link
 */
export const getGetLinkStatisticsUrl = ({
  linkId,
}: GetLinkStatisticsPathParameters) => {
  return `/conversion-management/api/v1/statistics/link/${linkId}`;
};

export const getLinkStatistics = async (
  { linkId }: GetLinkStatisticsPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getGetLinkStatisticsUrl({ linkId }), {
    ...options,
    method: "GET",
  });
};

export const getGetLinkStatisticsQueryKey = ({
  linkId,
}: GetLinkStatisticsPathParameters) => {
  return [
    "conversion-management",
    "api",
    "v1",
    "statistics",
    "link",
    linkId,
  ] as const;
};

export const useGetLinkStatisticsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLinkStatisticsQueryKey({ linkId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLinkStatistics>>
  > = ({ signal }) =>
    getLinkStatistics({ linkId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getLinkStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinkStatisticsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinkStatistics>>
>;
export type GetLinkStatisticsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get conversion statistics for a specific link
 */

export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinkStatisticsInfiniteQueryOptions(
    { linkId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get conversion statistics for a specific link
 */
export const prefetchGetLinkStatisticsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { linkId }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinkStatisticsInfiniteQueryOptions(
    { linkId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetLinkStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLinkStatisticsQueryKey({ linkId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLinkStatistics>>
  > = ({ signal }) =>
    getLinkStatistics({ linkId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getLinkStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinkStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinkStatistics>>
>;
export type GetLinkStatisticsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get conversion statistics for a specific link
 */

export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinkStatisticsQueryOptions({ linkId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get conversion statistics for a specific link
 */
export const prefetchGetLinkStatisticsQuery = async <
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { linkId }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinkStatisticsQueryOptions({ linkId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get conversion statistics for multiple links
 */
export const getGetLinksStatisticsUrl = () => {
  return `/conversion-management/api/v1/statistics/links`;
};

export const getLinksStatistics = async (
  conversionManagementAPIControllersLinkStatisticsRequest: ConversionManagementAPIControllersLinkStatisticsRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getGetLinksStatisticsUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(
      conversionManagementAPIControllersLinkStatisticsRequest,
    ),
  });
};

export const getGetLinksStatisticsMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLinksStatistics>>,
    TError,
    { data: ConversionManagementAPIControllersLinkStatisticsRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLinksStatistics>>,
  TError,
  { data: ConversionManagementAPIControllersLinkStatisticsRequest },
  TContext
> => {
  const mutationKey = ["getLinksStatistics"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLinksStatistics>>,
    { data: ConversionManagementAPIControllersLinkStatisticsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return getLinksStatistics(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetLinksStatisticsMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLinksStatistics>>
>;
export type GetLinksStatisticsMutationBody =
  ConversionManagementAPIControllersLinkStatisticsRequest;
export type GetLinksStatisticsMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Get conversion statistics for multiple links
 */
export const useGetLinksStatistics = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getLinksStatistics>>,
      TError,
      { data: ConversionManagementAPIControllersLinkStatisticsRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getLinksStatistics>>,
  TError,
  { data: ConversionManagementAPIControllersLinkStatisticsRequest },
  TContext
> => {
  const mutationOptions = getGetLinksStatisticsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
