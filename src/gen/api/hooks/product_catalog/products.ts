/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ProductCatalog.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteProductImagePathParameters,
  DeleteProductPathParameters,
  GetProductPathParameters,
  GetProductsByBrandParams,
  GetProductsByBrandPathParameters,
  GetProductsByCategoryParams,
  GetProductsByCategoryPathParameters,
  GetProductsParams,
  ProductCatalogAPIModelsResponsesProductImageUploadResponse,
  ProductCatalogDomainDTOsCreateProductRequest,
  ProductCatalogDomainDTOsProductDto,
  ProductCatalogDomainDTOsProductsResponse,
  ProductCatalogDomainDTOsUpdateProductRequest,
  SearchProductsParams,
  UpdateProductPathParameters,
  UploadProductImageBody,
  UploadProductImageParams,
  UploadProductImagePathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get products with filtering, sorting, and pagination
 */
export const getGetProductsUrl = (params?: GetProductsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/products?${stringifiedParams}`
    : `/product-catalog/api/v1/products`;
};

export const getProducts = async (
  params?: GetProductsParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductsResponse> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductsResponse>(
    getGetProductsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetProductsQueryKey = (params?: GetProductsParams) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "products",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetProductsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetProductsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get products with filtering, sorting, and pagination
 */

export function useGetProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get products with filtering, sorting, and pagination
 */
export const prefetchGetProductsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get products with filtering, sorting, and pagination
 */

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get products with filtering, sorting, and pagination
 */
export const prefetchGetProductsQuery = async <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new product
 */
export const getCreateProductUrl = () => {
  return `/product-catalog/api/v1/products`;
};

export const createProduct = async (
  productCatalogDomainDTOsCreateProductRequest: ProductCatalogDomainDTOsCreateProductRequest,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductDto> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductDto>(
    getCreateProductUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(productCatalogDomainDTOsCreateProductRequest),
    },
  );
};

export const getCreateProductMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createProduct>>,
    TError,
    { data: ProductCatalogDomainDTOsCreateProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createProduct>>,
  TError,
  { data: ProductCatalogDomainDTOsCreateProductRequest },
  TContext
> => {
  const mutationKey = ["createProduct"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createProduct>>,
    { data: ProductCatalogDomainDTOsCreateProductRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createProduct(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof createProduct>>
>;
export type CreateProductMutationBody =
  ProductCatalogDomainDTOsCreateProductRequest;
export type CreateProductMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create a new product
 */
export const useCreateProduct = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createProduct>>,
      TError,
      { data: ProductCatalogDomainDTOsCreateProductRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createProduct>>,
  TError,
  { data: ProductCatalogDomainDTOsCreateProductRequest },
  TContext
> => {
  const mutationOptions = getCreateProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a specific product by ID
 */
export const getGetProductUrl = ({ productId }: GetProductPathParameters) => {
  return `/product-catalog/api/v1/products/${productId}`;
};

export const getProduct = async (
  { productId }: GetProductPathParameters,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductDto> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductDto>(
    getGetProductUrl({ productId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetProductQueryKey = ({
  productId,
}: GetProductPathParameters) => {
  return ["product-catalog", "api", "v1", "products", productId] as const;
};

export const useGetProductInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getProduct>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { productId }: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductQueryKey({ productId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({
    signal,
  }) => getProduct({ productId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProduct>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProduct>>
>;
export type GetProductInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProductInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProduct>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProduct>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          Awaited<ReturnType<typeof getProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProduct>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProduct>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          Awaited<ReturnType<typeof getProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProduct>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific product by ID
 */

export function useGetProductInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProduct>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { productId }: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductInfiniteQueryOptions(
    { productId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific product by ID
 */
export const prefetchGetProductInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { productId }: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProduct>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductInfiniteQueryOptions(
    { productId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetProductQueryOptions = <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { productId }: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductQueryKey({ productId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({
    signal,
  }) => getProduct({ productId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getProduct>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProduct>>
>;
export type GetProductQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          Awaited<ReturnType<typeof getProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          Awaited<ReturnType<typeof getProduct>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific product by ID
 */

export function useGetProduct<
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { productId }: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductQueryOptions({ productId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific product by ID
 */
export const prefetchGetProductQuery = async <
  TData = Awaited<ReturnType<typeof getProduct>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { productId }: GetProductPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductQueryOptions({ productId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update an existing product
 */
export const getUpdateProductUrl = ({
  productId,
}: UpdateProductPathParameters) => {
  return `/product-catalog/api/v1/products/${productId}`;
};

export const updateProduct = async (
  { productId }: UpdateProductPathParameters,
  productCatalogDomainDTOsUpdateProductRequest: ProductCatalogDomainDTOsUpdateProductRequest,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductDto> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductDto>(
    getUpdateProductUrl({ productId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(productCatalogDomainDTOsUpdateProductRequest),
    },
  );
};

export const getUpdateProductMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProduct>>,
    TError,
    {
      pathParams: UpdateProductPathParameters;
      data: ProductCatalogDomainDTOsUpdateProductRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProduct>>,
  TError,
  {
    pathParams: UpdateProductPathParameters;
    data: ProductCatalogDomainDTOsUpdateProductRequest;
  },
  TContext
> => {
  const mutationKey = ["updateProduct"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProduct>>,
    {
      pathParams: UpdateProductPathParameters;
      data: ProductCatalogDomainDTOsUpdateProductRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateProduct(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProduct>>
>;
export type UpdateProductMutationBody =
  ProductCatalogDomainDTOsUpdateProductRequest;
export type UpdateProductMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update an existing product
 */
export const useUpdateProduct = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateProduct>>,
      TError,
      {
        pathParams: UpdateProductPathParameters;
        data: ProductCatalogDomainDTOsUpdateProductRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateProduct>>,
  TError,
  {
    pathParams: UpdateProductPathParameters;
    data: ProductCatalogDomainDTOsUpdateProductRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a product
 */
export const getDeleteProductUrl = ({
  productId,
}: DeleteProductPathParameters) => {
  return `/product-catalog/api/v1/products/${productId}`;
};

export const deleteProduct = async (
  { productId }: DeleteProductPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteProductUrl({ productId }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteProductMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProduct>>,
    TError,
    { pathParams: DeleteProductPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProduct>>,
  TError,
  { pathParams: DeleteProductPathParameters },
  TContext
> => {
  const mutationKey = ["deleteProduct"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProduct>>,
    { pathParams: DeleteProductPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteProduct(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProduct>>
>;

export type DeleteProductMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a product
 */
export const useDeleteProduct = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteProduct>>,
      TError,
      { pathParams: DeleteProductPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteProduct>>,
  TError,
  { pathParams: DeleteProductPathParameters },
  TContext
> => {
  const mutationOptions = getDeleteProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Upload product image
 */
export const getUploadProductImageUrl = (
  { productId }: UploadProductImagePathParameters,
  params?: UploadProductImageParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/products/${productId}/images?${stringifiedParams}`
    : `/product-catalog/api/v1/products/${productId}/images`;
};

export const uploadProductImage = async (
  { productId }: UploadProductImagePathParameters,
  uploadProductImageBody: UploadProductImageBody,
  params?: UploadProductImageParams,
  options?: RequestInit,
): Promise<ProductCatalogAPIModelsResponsesProductImageUploadResponse> => {
  const formData = new FormData();
  if (uploadProductImageBody.image !== undefined) {
    formData.append(`image`, uploadProductImageBody.image);
  }

  return gatewayServiceCustomFetch<ProductCatalogAPIModelsResponsesProductImageUploadResponse>(
    getUploadProductImageUrl({ productId }, params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getUploadProductImageMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadProductImage>>,
    TError,
    {
      pathParams: UploadProductImagePathParameters;
      data: UploadProductImageBody;
      params?: UploadProductImageParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadProductImage>>,
  TError,
  {
    pathParams: UploadProductImagePathParameters;
    data: UploadProductImageBody;
    params?: UploadProductImageParams;
  },
  TContext
> => {
  const mutationKey = ["uploadProductImage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadProductImage>>,
    {
      pathParams: UploadProductImagePathParameters;
      data: UploadProductImageBody;
      params?: UploadProductImageParams;
    }
  > = (props) => {
    const { pathParams, data, params } = props ?? {};

    return uploadProductImage(pathParams, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadProductImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadProductImage>>
>;
export type UploadProductImageMutationBody = UploadProductImageBody;
export type UploadProductImageMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Upload product image
 */
export const useUploadProductImage = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadProductImage>>,
      TError,
      {
        pathParams: UploadProductImagePathParameters;
        data: UploadProductImageBody;
        params?: UploadProductImageParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadProductImage>>,
  TError,
  {
    pathParams: UploadProductImagePathParameters;
    data: UploadProductImageBody;
    params?: UploadProductImageParams;
  },
  TContext
> => {
  const mutationOptions = getUploadProductImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete product image
 */
export const getDeleteProductImageUrl = ({
  productId,
  imageId,
}: DeleteProductImagePathParameters) => {
  return `/product-catalog/api/v1/products/${productId}/images/${imageId}`;
};

export const deleteProductImage = async (
  { productId, imageId }: DeleteProductImagePathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getDeleteProductImageUrl({ productId, imageId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteProductImageMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductImage>>,
    TError,
    { pathParams: DeleteProductImagePathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProductImage>>,
  TError,
  { pathParams: DeleteProductImagePathParameters },
  TContext
> => {
  const mutationKey = ["deleteProductImage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductImage>>,
    { pathParams: DeleteProductImagePathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteProductImage(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductImage>>
>;

export type DeleteProductImageMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete product image
 */
export const useDeleteProductImage = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteProductImage>>,
      TError,
      { pathParams: DeleteProductImagePathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteProductImage>>,
  TError,
  { pathParams: DeleteProductImagePathParameters },
  TContext
> => {
  const mutationOptions = getDeleteProductImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get products by brand
 */
export const getGetProductsByBrandUrl = (
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/products/brands/${brandId}?${stringifiedParams}`
    : `/product-catalog/api/v1/products/brands/${brandId}`;
};

export const getProductsByBrand = async (
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductsResponse> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductsResponse>(
    getGetProductsByBrandUrl({ brandId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetProductsByBrandQueryKey = (
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "products",
    "brands",
    brandId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetProductsByBrandInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsByBrandQueryKey({ brandId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsByBrand>>
  > = ({ signal }) =>
    getProductsByBrand({ brandId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProductsByBrand>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsByBrandInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsByBrand>>
>;
export type GetProductsByBrandInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProductsByBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByBrandPathParameters,
  params: undefined | GetProductsByBrandParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBrand>>,
          TError,
          Awaited<ReturnType<typeof getProductsByBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBrand>>,
          TError,
          Awaited<ReturnType<typeof getProductsByBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get products by brand
 */

export function useGetProductsByBrandInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByBrand>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductsByBrandInfiniteQueryOptions(
    { brandId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get products by brand
 */
export const prefetchGetProductsByBrandInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductsByBrandInfiniteQueryOptions(
    { brandId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetProductsByBrandQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsByBrandQueryKey({ brandId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsByBrand>>
  > = ({ signal }) =>
    getProductsByBrand({ brandId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsByBrand>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsByBrandQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsByBrand>>
>;
export type GetProductsByBrandQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProductsByBrand<
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByBrandPathParameters,
  params: undefined | GetProductsByBrandParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBrand>>,
          TError,
          Awaited<ReturnType<typeof getProductsByBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByBrand<
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBrand>>,
          TError,
          Awaited<ReturnType<typeof getProductsByBrand>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByBrand<
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get products by brand
 */

export function useGetProductsByBrand<
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductsByBrandQueryOptions(
    { brandId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get products by brand
 */
export const prefetchGetProductsByBrandQuery = async <
  TData = Awaited<ReturnType<typeof getProductsByBrand>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetProductsByBrandPathParameters,
  params?: GetProductsByBrandParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBrand>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductsByBrandQueryOptions(
    { brandId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get products by category
 */
export const getGetProductsByCategoryUrl = (
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/products/categories/${categoryId}?${stringifiedParams}`
    : `/product-catalog/api/v1/products/categories/${categoryId}`;
};

export const getProductsByCategory = async (
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductsResponse> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductsResponse>(
    getGetProductsByCategoryUrl({ categoryId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetProductsByCategoryQueryKey = (
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "products",
    "categories",
    categoryId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetProductsByCategoryInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByCategory>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsByCategoryQueryKey({ categoryId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsByCategory>>
  > = ({ signal }) =>
    getProductsByCategory({ categoryId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProductsByCategory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsByCategoryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsByCategory>>
>;
export type GetProductsByCategoryInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProductsByCategoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByCategory>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByCategoryPathParameters,
  params: undefined | GetProductsByCategoryParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductsByCategory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByCategoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByCategory>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductsByCategory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByCategoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByCategory>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get products by category
 */

export function useGetProductsByCategoryInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductsByCategory>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductsByCategoryInfiniteQueryOptions(
    { categoryId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get products by category
 */
export const prefetchGetProductsByCategoryInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductsByCategoryInfiniteQueryOptions(
    { categoryId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetProductsByCategoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsByCategoryQueryKey({ categoryId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsByCategory>>
  > = ({ signal }) =>
    getProductsByCategory({ categoryId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsByCategory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsByCategoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsByCategory>>
>;
export type GetProductsByCategoryQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetProductsByCategory<
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByCategoryPathParameters,
  params: undefined | GetProductsByCategoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductsByCategory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByCategory<
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductsByCategory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByCategory<
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get products by category
 */

export function useGetProductsByCategory<
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetProductsByCategoryQueryOptions(
    { categoryId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get products by category
 */
export const prefetchGetProductsByCategoryQuery = async <
  TData = Awaited<ReturnType<typeof getProductsByCategory>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { categoryId }: GetProductsByCategoryPathParameters,
  params?: GetProductsByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetProductsByCategoryQueryOptions(
    { categoryId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Search products
 */
export const getSearchProductsUrl = (params?: SearchProductsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/products/search?${stringifiedParams}`
    : `/product-catalog/api/v1/products/search`;
};

export const searchProducts = async (
  params?: SearchProductsParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductsResponse> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductsResponse>(
    getSearchProductsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSearchProductsQueryKey = (params?: SearchProductsParams) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "products",
    "search",
    ...(params ? [params] : []),
  ] as const;
};

export const useSearchProductsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof searchProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchProducts>>> = ({
    signal,
  }) => searchProducts(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchProductsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchProducts>>
>;
export type SearchProductsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useSearchProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | SearchProductsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProducts>>,
          TError,
          Awaited<ReturnType<typeof searchProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProducts>>,
          TError,
          Awaited<ReturnType<typeof searchProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search products
 */

export function useSearchProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useSearchProductsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search products
 */
export const prefetchSearchProductsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useSearchProductsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useSearchProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchProducts>>> = ({
    signal,
  }) => searchProducts(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof searchProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchProducts>>
>;
export type SearchProductsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useSearchProducts<
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | SearchProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProducts>>,
          TError,
          Awaited<ReturnType<typeof searchProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchProducts<
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProducts>>,
          TError,
          Awaited<ReturnType<typeof searchProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchProducts<
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search products
 */

export function useSearchProducts<
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useSearchProductsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search products
 */
export const prefetchSearchProductsQuery = async <
  TData = Awaited<ReturnType<typeof searchProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: SearchProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useSearchProductsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
