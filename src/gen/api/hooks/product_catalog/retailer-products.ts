/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ProductCatalog.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  CreateRetailerProductRequestPathParameters,
  GetRetailerProductRequestsParams,
  GetRetailerProductRequestsPathParameters,
  ProductCatalogDomainDTOsRetailerProductRequest,
  ProductCatalogDomainDTOsRetailerRequestDto,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create retailer product request
 */
export const getCreateRetailerProductRequestUrl = ({
  retailerId,
}: CreateRetailerProductRequestPathParameters) => {
  return `/product-catalog/api/v1/retailers/${retailerId}/product-requests`;
};

export const createRetailerProductRequest = async (
  { retailerId }: CreateRetailerProductRequestPathParameters,
  productCatalogDomainDTOsRetailerProductRequest: ProductCatalogDomainDTOsRetailerProductRequest,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsRetailerRequestDto> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsRetailerRequestDto>(
    getCreateRetailerProductRequestUrl({ retailerId }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(productCatalogDomainDTOsRetailerProductRequest),
    },
  );
};

export const getCreateRetailerProductRequestMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRetailerProductRequest>>,
    TError,
    {
      pathParams: CreateRetailerProductRequestPathParameters;
      data: ProductCatalogDomainDTOsRetailerProductRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRetailerProductRequest>>,
  TError,
  {
    pathParams: CreateRetailerProductRequestPathParameters;
    data: ProductCatalogDomainDTOsRetailerProductRequest;
  },
  TContext
> => {
  const mutationKey = ["createRetailerProductRequest"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRetailerProductRequest>>,
    {
      pathParams: CreateRetailerProductRequestPathParameters;
      data: ProductCatalogDomainDTOsRetailerProductRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return createRetailerProductRequest(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRetailerProductRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRetailerProductRequest>>
>;
export type CreateRetailerProductRequestMutationBody =
  ProductCatalogDomainDTOsRetailerProductRequest;
export type CreateRetailerProductRequestMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create retailer product request
 */
export const useCreateRetailerProductRequest = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRetailerProductRequest>>,
      TError,
      {
        pathParams: CreateRetailerProductRequestPathParameters;
        data: ProductCatalogDomainDTOsRetailerProductRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createRetailerProductRequest>>,
  TError,
  {
    pathParams: CreateRetailerProductRequestPathParameters;
    data: ProductCatalogDomainDTOsRetailerProductRequest;
  },
  TContext
> => {
  const mutationOptions =
    getCreateRetailerProductRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get retailer product requests
 */
export const getGetRetailerProductRequestsUrl = (
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/retailers/${retailerId}/product-requests?${stringifiedParams}`
    : `/product-catalog/api/v1/retailers/${retailerId}/product-requests`;
};

export const getRetailerProductRequests = async (
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsRetailerRequestDto[]> => {
  return gatewayServiceCustomFetch<
    ProductCatalogDomainDTOsRetailerRequestDto[]
  >(getGetRetailerProductRequestsUrl({ retailerId }, params), {
    ...options,
    method: "GET",
  });
};

export const getGetRetailerProductRequestsQueryKey = (
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "retailers",
    retailerId,
    "product-requests",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetRetailerProductRequestsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerProductRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetRetailerProductRequestsQueryKey({ retailerId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRetailerProductRequests>>
  > = ({ signal }) =>
    getRetailerProductRequests({ retailerId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRetailerProductRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerProductRequestsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailerProductRequests>>
>;
export type GetRetailerProductRequestsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerProductRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerProductRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerProductRequestsPathParameters,
  params: undefined | GetRetailerProductRequestsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerProductRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerProductRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerProductRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerProductRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerProductRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerProductRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerProductRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerProductRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get retailer product requests
 */

export function useGetRetailerProductRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerProductRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerProductRequestsInfiniteQueryOptions(
    { retailerId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get retailer product requests
 */
export const prefetchGetRetailerProductRequestsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerProductRequestsInfiniteQueryOptions(
    { retailerId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetRetailerProductRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetRetailerProductRequestsQueryKey({ retailerId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRetailerProductRequests>>
  > = ({ signal }) =>
    getRetailerProductRequests({ retailerId }, params, {
      signal,
      ...requestOptions,
    });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getRetailerProductRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerProductRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailerProductRequests>>
>;
export type GetRetailerProductRequestsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerProductRequests<
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerProductRequestsPathParameters,
  params: undefined | GetRetailerProductRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerProductRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerProductRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerProductRequests<
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerProductRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerProductRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerProductRequests<
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get retailer product requests
 */

export function useGetRetailerProductRequests<
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerProductRequestsQueryOptions(
    { retailerId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get retailer product requests
 */
export const prefetchGetRetailerProductRequestsQuery = async <
  TData = Awaited<ReturnType<typeof getRetailerProductRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { retailerId }: GetRetailerProductRequestsPathParameters,
  params?: GetRetailerProductRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerProductRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerProductRequestsQueryOptions(
    { retailerId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
