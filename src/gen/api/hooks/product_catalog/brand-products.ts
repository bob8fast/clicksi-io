/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ProductCatalog.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonEnumsRetailerProductStatus,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetBrandProductsParams,
  GetBrandProductsPathParameters,
  GetDashboardStatsPathParameters,
  GetRetailerRequestsParams,
  GetRetailerRequestsPathParameters,
  ProductCatalogDomainDTOsDashboardStatsDto,
  ProductCatalogDomainDTOsProductsResponse,
  ProductCatalogDomainDTOsRetailerRequestDto,
  UpdateRetailerRequestStatusPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get brand dashboard statistics - UPDATED to use custom attribute
 */
export const getGetDashboardStatsUrl = ({
  brandId,
}: GetDashboardStatsPathParameters) => {
  return `/product-catalog/api/v1/brands/${brandId}/dashboard/stats`;
};

export const getDashboardStats = async (
  { brandId }: GetDashboardStatsPathParameters,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsDashboardStatsDto> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsDashboardStatsDto>(
    getGetDashboardStatsUrl({ brandId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetDashboardStatsQueryKey = ({
  brandId,
}: GetDashboardStatsPathParameters) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "brands",
    brandId,
    "dashboard",
    "stats",
  ] as const;
};

export const useGetDashboardStatsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboardStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDashboardStatsQueryKey({ brandId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDashboardStats>>
  > = ({ signal }) =>
    getDashboardStats({ brandId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDashboardStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDashboardStatsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDashboardStats>>
>;
export type GetDashboardStatsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetDashboardStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboardStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetDashboardStatsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getDashboardStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboardStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getDashboardStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboardStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get brand dashboard statistics - UPDATED to use custom attribute
 */

export function useGetDashboardStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboardStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetDashboardStatsInfiniteQueryOptions(
    { brandId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get brand dashboard statistics - UPDATED to use custom attribute
 */
export const prefetchGetDashboardStatsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetDashboardStatsInfiniteQueryOptions(
    { brandId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetDashboardStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDashboardStatsQueryKey({ brandId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDashboardStats>>
  > = ({ signal }) =>
    getDashboardStats({ brandId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getDashboardStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDashboardStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDashboardStats>>
>;
export type GetDashboardStatsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetDashboardStats<
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetDashboardStatsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getDashboardStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardStats<
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboardStats>>,
          TError,
          Awaited<ReturnType<typeof getDashboardStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDashboardStats<
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get brand dashboard statistics - UPDATED to use custom attribute
 */

export function useGetDashboardStats<
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetDashboardStatsQueryOptions({ brandId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get brand dashboard statistics - UPDATED to use custom attribute
 */
export const prefetchGetDashboardStatsQuery = async <
  TData = Awaited<ReturnType<typeof getDashboardStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetDashboardStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDashboardStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetDashboardStatsQueryOptions({ brandId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get brand products - UPDATED to use custom attribute
 */
export const getGetBrandProductsUrl = (
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/brands/${brandId}/products?${stringifiedParams}`
    : `/product-catalog/api/v1/brands/${brandId}/products`;
};

export const getBrandProducts = async (
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsProductsResponse> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsProductsResponse>(
    getGetBrandProductsUrl({ brandId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetBrandProductsQueryKey = (
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "brands",
    brandId,
    "products",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetBrandProductsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetBrandProductsQueryKey({ brandId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBrandProducts>>
  > = ({ signal }) =>
    getBrandProducts({ brandId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getBrandProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandProductsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrandProducts>>
>;
export type GetBrandProductsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrandProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandProductsPathParameters,
  params: undefined | GetBrandProductsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandProducts>>,
          TError,
          Awaited<ReturnType<typeof getBrandProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandProducts>>,
          TError,
          Awaited<ReturnType<typeof getBrandProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get brand products - UPDATED to use custom attribute
 */

export function useGetBrandProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getBrandProducts>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandProductsInfiniteQueryOptions(
    { brandId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get brand products - UPDATED to use custom attribute
 */
export const prefetchGetBrandProductsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandProductsInfiniteQueryOptions(
    { brandId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetBrandProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetBrandProductsQueryKey({ brandId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBrandProducts>>
  > = ({ signal }) =>
    getBrandProducts({ brandId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getBrandProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBrandProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBrandProducts>>
>;
export type GetBrandProductsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetBrandProducts<
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandProductsPathParameters,
  params: undefined | GetBrandProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandProducts>>,
          TError,
          Awaited<ReturnType<typeof getBrandProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandProducts<
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBrandProducts>>,
          TError,
          Awaited<ReturnType<typeof getBrandProducts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBrandProducts<
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get brand products - UPDATED to use custom attribute
 */

export function useGetBrandProducts<
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetBrandProductsQueryOptions(
    { brandId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get brand products - UPDATED to use custom attribute
 */
export const prefetchGetBrandProductsQuery = async <
  TData = Awaited<ReturnType<typeof getBrandProducts>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetBrandProductsPathParameters,
  params?: GetBrandProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBrandProducts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetBrandProductsQueryOptions(
    { brandId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get retailer requests for brand - UPDATED to use custom attribute
 */
export const getGetRetailerRequestsUrl = (
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/product-catalog/api/v1/brands/${brandId}/retailer-requests?${stringifiedParams}`
    : `/product-catalog/api/v1/brands/${brandId}/retailer-requests`;
};

export const getRetailerRequests = async (
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsRetailerRequestDto[]> => {
  return gatewayServiceCustomFetch<
    ProductCatalogDomainDTOsRetailerRequestDto[]
  >(getGetRetailerRequestsUrl({ brandId }, params), {
    ...options,
    method: "GET",
  });
};

export const getGetRetailerRequestsQueryKey = (
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
) => {
  return [
    "product-catalog",
    "api",
    "v1",
    "brands",
    brandId,
    "retailer-requests",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetRetailerRequestsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetRetailerRequestsQueryKey({ brandId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRetailerRequests>>
  > = ({ signal }) =>
    getRetailerRequests({ brandId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRetailerRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerRequestsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailerRequests>>
>;
export type GetRetailerRequestsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerRequestsPathParameters,
  params: undefined | GetRetailerRequestsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get retailer requests for brand - UPDATED to use custom attribute
 */

export function useGetRetailerRequestsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getRetailerRequests>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerRequestsInfiniteQueryOptions(
    { brandId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get retailer requests for brand - UPDATED to use custom attribute
 */
export const prefetchGetRetailerRequestsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerRequestsInfiniteQueryOptions(
    { brandId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetRetailerRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetRetailerRequestsQueryKey({ brandId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRetailerRequests>>
  > = ({ signal }) =>
    getRetailerRequests({ brandId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getRetailerRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRetailerRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRetailerRequests>>
>;
export type GetRetailerRequestsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetRetailerRequests<
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerRequestsPathParameters,
  params: undefined | GetRetailerRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerRequests<
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRetailerRequests>>,
          TError,
          Awaited<ReturnType<typeof getRetailerRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRetailerRequests<
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get retailer requests for brand - UPDATED to use custom attribute
 */

export function useGetRetailerRequests<
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetRetailerRequestsQueryOptions(
    { brandId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get retailer requests for brand - UPDATED to use custom attribute
 */
export const prefetchGetRetailerRequestsQuery = async <
  TData = Awaited<ReturnType<typeof getRetailerRequests>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { brandId }: GetRetailerRequestsPathParameters,
  params?: GetRetailerRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRetailerRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetRetailerRequestsQueryOptions(
    { brandId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update retailer request status - UPDATED to use multi-resource authorization
 */
export const getUpdateRetailerRequestStatusUrl = ({
  brandId,
  productId,
  retailerId,
}: UpdateRetailerRequestStatusPathParameters) => {
  return `/product-catalog/api/v1/brands/${brandId}/retailer-requests/${productId}/retailers/${retailerId}/status`;
};

export const updateRetailerRequestStatus = async (
  { brandId, productId, retailerId }: UpdateRetailerRequestStatusPathParameters,
  clicksiDataContractsCommonEnumsRetailerProductStatus: ClicksiDataContractsCommonEnumsRetailerProductStatus,
  options?: RequestInit,
): Promise<ProductCatalogDomainDTOsRetailerRequestDto> => {
  return gatewayServiceCustomFetch<ProductCatalogDomainDTOsRetailerRequestDto>(
    getUpdateRetailerRequestStatusUrl({ brandId, productId, retailerId }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        clicksiDataContractsCommonEnumsRetailerProductStatus,
      ),
    },
  );
};

export const getUpdateRetailerRequestStatusMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRetailerRequestStatus>>,
    TError,
    {
      pathParams: UpdateRetailerRequestStatusPathParameters;
      data: ClicksiDataContractsCommonEnumsRetailerProductStatus;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRetailerRequestStatus>>,
  TError,
  {
    pathParams: UpdateRetailerRequestStatusPathParameters;
    data: ClicksiDataContractsCommonEnumsRetailerProductStatus;
  },
  TContext
> => {
  const mutationKey = ["updateRetailerRequestStatus"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRetailerRequestStatus>>,
    {
      pathParams: UpdateRetailerRequestStatusPathParameters;
      data: ClicksiDataContractsCommonEnumsRetailerProductStatus;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateRetailerRequestStatus(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRetailerRequestStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRetailerRequestStatus>>
>;
export type UpdateRetailerRequestStatusMutationBody =
  ClicksiDataContractsCommonEnumsRetailerProductStatus;
export type UpdateRetailerRequestStatusMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update retailer request status - UPDATED to use multi-resource authorization
 */
export const useUpdateRetailerRequestStatus = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateRetailerRequestStatus>>,
      TError,
      {
        pathParams: UpdateRetailerRequestStatusPathParameters;
        data: ClicksiDataContractsCommonEnumsRetailerProductStatus;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateRetailerRequestStatus>>,
  TError,
  {
    pathParams: UpdateRetailerRequestStatusPathParameters;
    data: ClicksiDataContractsCommonEnumsRetailerProductStatus;
  },
  TContext
> => {
  const mutationOptions =
    getUpdateRetailerRequestStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
