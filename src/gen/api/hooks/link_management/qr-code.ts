/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * LinkManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteQrCodePathParameters,
  GetQrCodeByLinkIdPathParameters,
  GetQrCodePathParameters,
  LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest,
  LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest,
  LinkManagementAPIModelsResponsesQrCodeResponse,
  UpdateQrCodePathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Generate a new QR code for a link
 */
export const getGenerateQrCodeUrl = () => {
  return `/link-management/api/v1/qr-code`;
};

export const generateQrCode = async (
  linkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest: LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesQrCodeResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesQrCodeResponse>(
    getGenerateQrCodeUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        linkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest,
      ),
    },
  );
};

export const getGenerateQrCodeMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateQrCode>>,
    TError,
    { data: LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateQrCode>>,
  TError,
  { data: LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest },
  TContext
> => {
  const mutationKey = ["generateQrCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateQrCode>>,
    { data: LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return generateQrCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateQrCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateQrCode>>
>;
export type GenerateQrCodeMutationBody =
  LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest;
export type GenerateQrCodeMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Generate a new QR code for a link
 */
export const useGenerateQrCode = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateQrCode>>,
      TError,
      { data: LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof generateQrCode>>,
  TError,
  { data: LinkManagementAPIModelsRequestsQrCodesGenerateQrCodeRequest },
  TContext
> => {
  const mutationOptions = getGenerateQrCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a QR code by ID
 */
export const getGetQrCodeUrl = ({ id }: GetQrCodePathParameters) => {
  return `/link-management/api/v1/qr-code/${id}`;
};

export const getQrCode = async (
  { id }: GetQrCodePathParameters,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesQrCodeResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesQrCodeResponse>(
    getGetQrCodeUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetQrCodeQueryKey = ({ id }: GetQrCodePathParameters) => {
  return ["link-management", "api", "v1", "qr-code", id] as const;
};

export const useGetQrCodeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCode>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQrCodeQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQrCode>>> = ({
    signal,
  }) => getQrCode({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getQrCode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQrCodeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getQrCode>>
>;
export type GetQrCodeInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetQrCodeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCode>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodePathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCode>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCode>>,
          TError,
          Awaited<ReturnType<typeof getQrCode>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCodeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCode>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCode>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCode>>,
          TError,
          Awaited<ReturnType<typeof getQrCode>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCodeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCode>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a QR code by ID
 */

export function useGetQrCodeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCode>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetQrCodeInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a QR code by ID
 */
export const prefetchGetQrCodeInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetQrCodeInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetQrCodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQrCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQrCodeQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQrCode>>> = ({
    signal,
  }) => getQrCode({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getQrCode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQrCodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getQrCode>>
>;
export type GetQrCodeQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetQrCode<
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodePathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQrCode>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCode>>,
          TError,
          Awaited<ReturnType<typeof getQrCode>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCode<
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQrCode>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCode>>,
          TError,
          Awaited<ReturnType<typeof getQrCode>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCode<
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQrCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a QR code by ID
 */

export function useGetQrCode<
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQrCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetQrCodeQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a QR code by ID
 */
export const prefetchGetQrCodeQuery = async <
  TData = Awaited<ReturnType<typeof getQrCode>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetQrCodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getQrCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetQrCodeQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update an existing QR code
 */
export const getUpdateQrCodeUrl = ({ id }: UpdateQrCodePathParameters) => {
  return `/link-management/api/v1/qr-code/${id}`;
};

export const updateQrCode = async (
  { id }: UpdateQrCodePathParameters,
  linkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest: LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesQrCodeResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesQrCodeResponse>(
    getUpdateQrCodeUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        linkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest,
      ),
    },
  );
};

export const getUpdateQrCodeMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateQrCode>>,
    TError,
    {
      pathParams: UpdateQrCodePathParameters;
      data: LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateQrCode>>,
  TError,
  {
    pathParams: UpdateQrCodePathParameters;
    data: LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest;
  },
  TContext
> => {
  const mutationKey = ["updateQrCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateQrCode>>,
    {
      pathParams: UpdateQrCodePathParameters;
      data: LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateQrCode(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateQrCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateQrCode>>
>;
export type UpdateQrCodeMutationBody =
  LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest;
export type UpdateQrCodeMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update an existing QR code
 */
export const useUpdateQrCode = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateQrCode>>,
      TError,
      {
        pathParams: UpdateQrCodePathParameters;
        data: LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateQrCode>>,
  TError,
  {
    pathParams: UpdateQrCodePathParameters;
    data: LinkManagementAPIModelsRequestsQrCodesUpdateQrCodeRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateQrCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a QR code
 */
export const getDeleteQrCodeUrl = ({ id }: DeleteQrCodePathParameters) => {
  return `/link-management/api/v1/qr-code/${id}`;
};

export const deleteQrCode = async (
  { id }: DeleteQrCodePathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteQrCodeUrl({ id }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteQrCodeMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQrCode>>,
    TError,
    { pathParams: DeleteQrCodePathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteQrCode>>,
  TError,
  { pathParams: DeleteQrCodePathParameters },
  TContext
> => {
  const mutationKey = ["deleteQrCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteQrCode>>,
    { pathParams: DeleteQrCodePathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteQrCode(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteQrCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteQrCode>>
>;

export type DeleteQrCodeMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a QR code
 */
export const useDeleteQrCode = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteQrCode>>,
      TError,
      { pathParams: DeleteQrCodePathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteQrCode>>,
  TError,
  { pathParams: DeleteQrCodePathParameters },
  TContext
> => {
  const mutationOptions = getDeleteQrCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a QR code by link ID
 */
export const getGetQrCodeByLinkIdUrl = ({
  linkId,
}: GetQrCodeByLinkIdPathParameters) => {
  return `/link-management/api/v1/qr-code/by-link/${linkId}`;
};

export const getQrCodeByLinkId = async (
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesQrCodeResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesQrCodeResponse>(
    getGetQrCodeByLinkIdUrl({ linkId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetQrCodeByLinkIdQueryKey = ({
  linkId,
}: GetQrCodeByLinkIdPathParameters) => {
  return [
    "link-management",
    "api",
    "v1",
    "qr-code",
    "by-link",
    linkId,
  ] as const;
};

export const useGetQrCodeByLinkIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCodeByLinkId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetQrCodeByLinkIdQueryKey({ linkId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getQrCodeByLinkId>>
  > = ({ signal }) =>
    getQrCodeByLinkId({ linkId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getQrCodeByLinkId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQrCodeByLinkIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getQrCodeByLinkId>>
>;
export type GetQrCodeByLinkIdInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetQrCodeByLinkIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCodeByLinkId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodeByLinkIdPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCodeByLinkId>>,
          TError,
          Awaited<ReturnType<typeof getQrCodeByLinkId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCodeByLinkIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCodeByLinkId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCodeByLinkId>>,
          TError,
          Awaited<ReturnType<typeof getQrCodeByLinkId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCodeByLinkIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCodeByLinkId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a QR code by link ID
 */

export function useGetQrCodeByLinkIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getQrCodeByLinkId>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetQrCodeByLinkIdInfiniteQueryOptions(
    { linkId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a QR code by link ID
 */
export const prefetchGetQrCodeByLinkIdInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetQrCodeByLinkIdInfiniteQueryOptions(
    { linkId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetQrCodeByLinkIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetQrCodeByLinkIdQueryKey({ linkId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getQrCodeByLinkId>>
  > = ({ signal }) =>
    getQrCodeByLinkId({ linkId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getQrCodeByLinkId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQrCodeByLinkIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getQrCodeByLinkId>>
>;
export type GetQrCodeByLinkIdQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetQrCodeByLinkId<
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodeByLinkIdPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCodeByLinkId>>,
          TError,
          Awaited<ReturnType<typeof getQrCodeByLinkId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCodeByLinkId<
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQrCodeByLinkId>>,
          TError,
          Awaited<ReturnType<typeof getQrCodeByLinkId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetQrCodeByLinkId<
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a QR code by link ID
 */

export function useGetQrCodeByLinkId<
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetQrCodeByLinkIdQueryOptions({ linkId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a QR code by link ID
 */
export const prefetchGetQrCodeByLinkIdQuery = async <
  TData = Awaited<ReturnType<typeof getQrCodeByLinkId>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { linkId }: GetQrCodeByLinkIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getQrCodeByLinkId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetQrCodeByLinkIdQueryOptions({ linkId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
