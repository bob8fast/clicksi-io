/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * LinkManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonModelsResponsesPagedResponse1LinkManagementAPIModelsResponsesLinkResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteLinkPathParameters,
  GetLinkPathParameters,
  GetLinkStatisticsPathParameters,
  GetLinksParams,
  LinkManagementAPICQRSLinksQueriesLinkStatisticsResponse,
  LinkManagementAPIModelsRequestsBatchCreateLinksRequest,
  LinkManagementAPIModelsRequestsCreateLinkRequest,
  LinkManagementAPIModelsRequestsUpdateLinkRequest,
  LinkManagementAPIModelsResponsesLinkResponse,
  UpdateLinkPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Creates a new affiliate link
 */
export const getCreateLinkUrl = () => {
  return `/link-management/api/v1/links`;
};

export const createLink = async (
  linkManagementAPIModelsRequestsCreateLinkRequest: LinkManagementAPIModelsRequestsCreateLinkRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesLinkResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesLinkResponse>(
    getCreateLinkUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(linkManagementAPIModelsRequestsCreateLinkRequest),
    },
  );
};

export const getCreateLinkMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createLink>>,
    TError,
    { data: LinkManagementAPIModelsRequestsCreateLinkRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createLink>>,
  TError,
  { data: LinkManagementAPIModelsRequestsCreateLinkRequest },
  TContext
> => {
  const mutationKey = ["createLink"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createLink>>,
    { data: LinkManagementAPIModelsRequestsCreateLinkRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createLink(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof createLink>>
>;
export type CreateLinkMutationBody =
  LinkManagementAPIModelsRequestsCreateLinkRequest;
export type CreateLinkMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Creates a new affiliate link
 */
export const useCreateLink = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createLink>>,
      TError,
      { data: LinkManagementAPIModelsRequestsCreateLinkRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createLink>>,
  TError,
  { data: LinkManagementAPIModelsRequestsCreateLinkRequest },
  TContext
> => {
  const mutationOptions = getCreateLinkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Gets links with filtering and pagination
 */
export const getGetLinksUrl = (params?: GetLinksParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/link-management/api/v1/links?${stringifiedParams}`
    : `/link-management/api/v1/links`;
};

export const getLinks = async (
  params?: GetLinksParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResponse1LinkManagementAPIModelsResponsesLinkResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResponse1LinkManagementAPIModelsResponsesLinkResponse>(
    getGetLinksUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetLinksQueryKey = (params?: GetLinksParams) => {
  return [
    "link-management",
    "api",
    "v1",
    "links",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetLinksInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getLinks>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLinksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLinks>>> = ({
    signal,
  }) => getLinks(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getLinks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinks>>
>;
export type GetLinksInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinks>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetLinksParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinks>>,
          TError,
          Awaited<ReturnType<typeof getLinks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinks>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinks>>,
          TError,
          Awaited<ReturnType<typeof getLinks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinks>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets links with filtering and pagination
 */

export function useGetLinksInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinks>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinksInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets links with filtering and pagination
 */
export const prefetchGetLinksInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinksInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetLinksQueryOptions = <
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLinks>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLinksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLinks>>> = ({
    signal,
  }) => getLinks(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getLinks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinks>>
>;
export type GetLinksQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinks<
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetLinksParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLinks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinks>>,
          TError,
          Awaited<ReturnType<typeof getLinks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinks<
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLinks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinks>>,
          TError,
          Awaited<ReturnType<typeof getLinks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinks<
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLinks>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets links with filtering and pagination
 */

export function useGetLinks<
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLinks>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinksQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets links with filtering and pagination
 */
export const prefetchGetLinksQuery = async <
  TData = Awaited<ReturnType<typeof getLinks>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetLinksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLinks>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinksQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Gets a link by ID
 */
export const getGetLinkUrl = ({ id }: GetLinkPathParameters) => {
  return `/link-management/api/v1/links/${id}`;
};

export const getLink = async (
  { id }: GetLinkPathParameters,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesLinkResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesLinkResponse>(
    getGetLinkUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetLinkQueryKey = ({ id }: GetLinkPathParameters) => {
  return ["link-management", "api", "v1", "links", id] as const;
};

export const useGetLinkInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getLink>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLinkQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLink>>> = ({
    signal,
  }) => getLink({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getLink>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinkInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLink>>
>;
export type GetLinkInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinkInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLink>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLink>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLink>>,
          TError,
          Awaited<ReturnType<typeof getLink>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLink>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLink>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLink>>,
          TError,
          Awaited<ReturnType<typeof getLink>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLink>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets a link by ID
 */

export function useGetLinkInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLink>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinkInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets a link by ID
 */
export const prefetchGetLinkInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLink>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinkInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetLinkQueryOptions = <
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLink>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLinkQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLink>>> = ({
    signal,
  }) => getLink({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getLink>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinkQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLink>>
>;
export type GetLinkQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLink<
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLink>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLink>>,
          TError,
          Awaited<ReturnType<typeof getLink>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLink<
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLink>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLink>>,
          TError,
          Awaited<ReturnType<typeof getLink>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLink<
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLink>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets a link by ID
 */

export function useGetLink<
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLink>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinkQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets a link by ID
 */
export const prefetchGetLinkQuery = async <
  TData = Awaited<ReturnType<typeof getLink>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetLinkPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getLink>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinkQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Updates a link
 */
export const getUpdateLinkUrl = ({ id }: UpdateLinkPathParameters) => {
  return `/link-management/api/v1/links/${id}`;
};

export const updateLink = async (
  { id }: UpdateLinkPathParameters,
  linkManagementAPIModelsRequestsUpdateLinkRequest: LinkManagementAPIModelsRequestsUpdateLinkRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesLinkResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesLinkResponse>(
    getUpdateLinkUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(linkManagementAPIModelsRequestsUpdateLinkRequest),
    },
  );
};

export const getUpdateLinkMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateLink>>,
    TError,
    {
      pathParams: UpdateLinkPathParameters;
      data: LinkManagementAPIModelsRequestsUpdateLinkRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateLink>>,
  TError,
  {
    pathParams: UpdateLinkPathParameters;
    data: LinkManagementAPIModelsRequestsUpdateLinkRequest;
  },
  TContext
> => {
  const mutationKey = ["updateLink"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateLink>>,
    {
      pathParams: UpdateLinkPathParameters;
      data: LinkManagementAPIModelsRequestsUpdateLinkRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateLink(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateLink>>
>;
export type UpdateLinkMutationBody =
  LinkManagementAPIModelsRequestsUpdateLinkRequest;
export type UpdateLinkMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Updates a link
 */
export const useUpdateLink = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateLink>>,
      TError,
      {
        pathParams: UpdateLinkPathParameters;
        data: LinkManagementAPIModelsRequestsUpdateLinkRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateLink>>,
  TError,
  {
    pathParams: UpdateLinkPathParameters;
    data: LinkManagementAPIModelsRequestsUpdateLinkRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateLinkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Deletes a link
 */
export const getDeleteLinkUrl = ({ id }: DeleteLinkPathParameters) => {
  return `/link-management/api/v1/links/${id}`;
};

export const deleteLink = async (
  { id }: DeleteLinkPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteLinkUrl({ id }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteLinkMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLink>>,
    TError,
    { pathParams: DeleteLinkPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLink>>,
  TError,
  { pathParams: DeleteLinkPathParameters },
  TContext
> => {
  const mutationKey = ["deleteLink"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLink>>,
    { pathParams: DeleteLinkPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteLink(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLink>>
>;

export type DeleteLinkMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Deletes a link
 */
export const useDeleteLink = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteLink>>,
      TError,
      { pathParams: DeleteLinkPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteLink>>,
  TError,
  { pathParams: DeleteLinkPathParameters },
  TContext
> => {
  const mutationOptions = getDeleteLinkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Gets link statistics
 */
export const getGetLinkStatisticsUrl = ({
  id,
}: GetLinkStatisticsPathParameters) => {
  return `/link-management/api/v1/links/${id}/statistics`;
};

export const getLinkStatistics = async (
  { id }: GetLinkStatisticsPathParameters,
  options?: RequestInit,
): Promise<LinkManagementAPICQRSLinksQueriesLinkStatisticsResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPICQRSLinksQueriesLinkStatisticsResponse>(
    getGetLinkStatisticsUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetLinkStatisticsQueryKey = ({
  id,
}: GetLinkStatisticsPathParameters) => {
  return ["link-management", "api", "v1", "links", id, "statistics"] as const;
};

export const useGetLinkStatisticsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLinkStatisticsQueryKey({ id });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLinkStatistics>>
  > = ({ signal }) => getLinkStatistics({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getLinkStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinkStatisticsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinkStatistics>>
>;
export type GetLinkStatisticsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets link statistics
 */

export function useGetLinkStatisticsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getLinkStatistics>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinkStatisticsInfiniteQueryOptions(
    { id },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets link statistics
 */
export const prefetchGetLinkStatisticsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinkStatisticsInfiniteQueryOptions(
    { id },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetLinkStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLinkStatisticsQueryKey({ id });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLinkStatistics>>
  > = ({ signal }) => getLinkStatistics({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getLinkStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLinkStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinkStatistics>>
>;
export type GetLinkStatisticsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLinkStatistics>>,
          TError,
          Awaited<ReturnType<typeof getLinkStatistics>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Gets link statistics
 */

export function useGetLinkStatistics<
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetLinkStatisticsQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Gets link statistics
 */
export const prefetchGetLinkStatisticsQuery = async <
  TData = Awaited<ReturnType<typeof getLinkStatistics>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetLinkStatisticsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLinkStatistics>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetLinkStatisticsQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Creates multiple links in batch
 */
export const getBatchCreateLinksUrl = () => {
  return `/link-management/api/v1/links/batch`;
};

export const batchCreateLinks = async (
  linkManagementAPIModelsRequestsBatchCreateLinksRequest: LinkManagementAPIModelsRequestsBatchCreateLinksRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesLinkResponse[]> => {
  return gatewayServiceCustomFetch<
    LinkManagementAPIModelsResponsesLinkResponse[]
  >(getBatchCreateLinksUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(
      linkManagementAPIModelsRequestsBatchCreateLinksRequest,
    ),
  });
};

export const getBatchCreateLinksMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof batchCreateLinks>>,
    TError,
    { data: LinkManagementAPIModelsRequestsBatchCreateLinksRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof batchCreateLinks>>,
  TError,
  { data: LinkManagementAPIModelsRequestsBatchCreateLinksRequest },
  TContext
> => {
  const mutationKey = ["batchCreateLinks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof batchCreateLinks>>,
    { data: LinkManagementAPIModelsRequestsBatchCreateLinksRequest }
  > = (props) => {
    const { data } = props ?? {};

    return batchCreateLinks(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BatchCreateLinksMutationResult = NonNullable<
  Awaited<ReturnType<typeof batchCreateLinks>>
>;
export type BatchCreateLinksMutationBody =
  LinkManagementAPIModelsRequestsBatchCreateLinksRequest;
export type BatchCreateLinksMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Creates multiple links in batch
 */
export const useBatchCreateLinks = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof batchCreateLinks>>,
      TError,
      { data: LinkManagementAPIModelsRequestsBatchCreateLinksRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof batchCreateLinks>>,
  TError,
  { data: LinkManagementAPIModelsRequestsBatchCreateLinksRequest },
  TContext
> => {
  const mutationOptions = getBatchCreateLinksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
