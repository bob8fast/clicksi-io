/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * LinkManagement.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AddLinkToCollectionPathParameters,
  ClicksiDataContractsCommonModelsResponsesPagedResponse1LinkManagementAPIModelsResponsesCollectionResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteCollectionPathParameters,
  GetCollectionPathParameters,
  GetCollectionsParams,
  LinkManagementAPIControllersCollectionOperationResponse,
  LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest,
  LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest,
  LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest,
  LinkManagementAPIModelsResponsesCollectionResponse,
  RemoveLinkFromCollectionPathParameters,
  UpdateCollectionPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get collections for the current user
 */
export const getGetCollectionsUrl = (params?: GetCollectionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/link-management/api/v1/collections?${stringifiedParams}`
    : `/link-management/api/v1/collections`;
};

export const getCollections = async (
  params?: GetCollectionsParams,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonModelsResponsesPagedResponse1LinkManagementAPIModelsResponsesCollectionResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonModelsResponsesPagedResponse1LinkManagementAPIModelsResponsesCollectionResponse>(
    getGetCollectionsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCollectionsQueryKey = (params?: GetCollectionsParams) => {
  return [
    "link-management",
    "api",
    "v1",
    "collections",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetCollectionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollections>>> = ({
    signal,
  }) => getCollections(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCollections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollections>>
>;
export type GetCollectionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetCollectionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get collections for the current user
 */

export function useGetCollectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get collections for the current user
 */
export const prefetchGetCollectionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionsInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCollectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollections>>> = ({
    signal,
  }) => getCollections(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCollections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollections>>
>;
export type GetCollectionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetCollectionsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollections>>,
          TError,
          Awaited<ReturnType<typeof getCollections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get collections for the current user
 */

export function useGetCollections<
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get collections for the current user
 */
export const prefetchGetCollectionsQuery = async <
  TData = Awaited<ReturnType<typeof getCollections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetCollectionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new collection
 */
export const getCreateCollectionUrl = () => {
  return `/link-management/api/v1/collections`;
};

export const createCollection = async (
  linkManagementAPIModelsRequestsCollectionsCreateCollectionRequest: LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesCollectionResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesCollectionResponse>(
    getCreateCollectionUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        linkManagementAPIModelsRequestsCollectionsCreateCollectionRequest,
      ),
    },
  );
};

export const getCreateCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCollection>>,
    TError,
    { data: LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCollection>>,
  TError,
  { data: LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest },
  TContext
> => {
  const mutationKey = ["createCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCollection>>,
    { data: LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createCollection(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCollection>>
>;
export type CreateCollectionMutationBody =
  LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest;
export type CreateCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create a new collection
 */
export const useCreateCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCollection>>,
      TError,
      {
        data: LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCollection>>,
  TError,
  { data: LinkManagementAPIModelsRequestsCollectionsCreateCollectionRequest },
  TContext
> => {
  const mutationOptions = getCreateCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Remove a link from a collection
 */
export const getRemoveLinkFromCollectionUrl = ({
  collectionId,
  linkId,
}: RemoveLinkFromCollectionPathParameters) => {
  return `/link-management/api/v1/collections/${collectionId}/links/${linkId}`;
};

export const removeLinkFromCollection = async (
  { collectionId, linkId }: RemoveLinkFromCollectionPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getRemoveLinkFromCollectionUrl({ collectionId, linkId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRemoveLinkFromCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeLinkFromCollection>>,
    TError,
    { pathParams: RemoveLinkFromCollectionPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeLinkFromCollection>>,
  TError,
  { pathParams: RemoveLinkFromCollectionPathParameters },
  TContext
> => {
  const mutationKey = ["removeLinkFromCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeLinkFromCollection>>,
    { pathParams: RemoveLinkFromCollectionPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return removeLinkFromCollection(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveLinkFromCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeLinkFromCollection>>
>;

export type RemoveLinkFromCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Remove a link from a collection
 */
export const useRemoveLinkFromCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeLinkFromCollection>>,
      TError,
      { pathParams: RemoveLinkFromCollectionPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeLinkFromCollection>>,
  TError,
  { pathParams: RemoveLinkFromCollectionPathParameters },
  TContext
> => {
  const mutationOptions = getRemoveLinkFromCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a specific collection by ID
 */
export const getGetCollectionUrl = ({ id }: GetCollectionPathParameters) => {
  return `/link-management/api/v1/collections/${id}`;
};

export const getCollection = async (
  { id }: GetCollectionPathParameters,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesCollectionResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesCollectionResponse>(
    getGetCollectionUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCollectionQueryKey = ({
  id,
}: GetCollectionPathParameters) => {
  return ["link-management", "api", "v1", "collections", id] as const;
};

export const useGetCollectionInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCollection>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollection>>> = ({
    signal,
  }) => getCollection({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollection>>
>;
export type GetCollectionInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollectionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollection>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollection>>,
          TError,
          Awaited<ReturnType<typeof getCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollection>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollection>>,
          TError,
          Awaited<ReturnType<typeof getCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollectionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollection>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific collection by ID
 */

export function useGetCollectionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCollection>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionInfiniteQueryOptions({ id }, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific collection by ID
 */
export const prefetchGetCollectionInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCollection>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionInfiniteQueryOptions({ id }, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetCollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCollectionQueryKey({ id });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollection>>> = ({
    signal,
  }) => getCollection({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getCollection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCollection>>
>;
export type GetCollectionQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetCollection<
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollection>>,
          TError,
          Awaited<ReturnType<typeof getCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollection<
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollection>>,
          TError,
          Awaited<ReturnType<typeof getCollection>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCollection<
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific collection by ID
 */

export function useGetCollection<
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetCollectionQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific collection by ID
 */
export const prefetchGetCollectionQuery = async <
  TData = Awaited<ReturnType<typeof getCollection>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetCollectionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetCollectionQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update an existing collection
 */
export const getUpdateCollectionUrl = ({
  id,
}: UpdateCollectionPathParameters) => {
  return `/link-management/api/v1/collections/${id}`;
};

export const updateCollection = async (
  { id }: UpdateCollectionPathParameters,
  linkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest: LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIModelsResponsesCollectionResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIModelsResponsesCollectionResponse>(
    getUpdateCollectionUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        linkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest,
      ),
    },
  );
};

export const getUpdateCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCollection>>,
    TError,
    {
      pathParams: UpdateCollectionPathParameters;
      data: LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCollection>>,
  TError,
  {
    pathParams: UpdateCollectionPathParameters;
    data: LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest;
  },
  TContext
> => {
  const mutationKey = ["updateCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCollection>>,
    {
      pathParams: UpdateCollectionPathParameters;
      data: LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateCollection(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCollection>>
>;
export type UpdateCollectionMutationBody =
  LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest;
export type UpdateCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update an existing collection
 */
export const useUpdateCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCollection>>,
      TError,
      {
        pathParams: UpdateCollectionPathParameters;
        data: LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateCollection>>,
  TError,
  {
    pathParams: UpdateCollectionPathParameters;
    data: LinkManagementAPIModelsRequestsCollectionsUpdateCollectionRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a collection
 */
export const getDeleteCollectionUrl = ({
  id,
}: DeleteCollectionPathParameters) => {
  return `/link-management/api/v1/collections/${id}`;
};

export const deleteCollection = async (
  { id }: DeleteCollectionPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDeleteCollectionUrl({ id }), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCollection>>,
    TError,
    { pathParams: DeleteCollectionPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCollection>>,
  TError,
  { pathParams: DeleteCollectionPathParameters },
  TContext
> => {
  const mutationKey = ["deleteCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCollection>>,
    { pathParams: DeleteCollectionPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteCollection(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCollection>>
>;

export type DeleteCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a collection
 */
export const useDeleteCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCollection>>,
      TError,
      { pathParams: DeleteCollectionPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCollection>>,
  TError,
  { pathParams: DeleteCollectionPathParameters },
  TContext
> => {
  const mutationOptions = getDeleteCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Add a link to a collection
 */
export const getAddLinkToCollectionUrl = ({
  id,
}: AddLinkToCollectionPathParameters) => {
  return `/link-management/api/v1/collections/${id}/links`;
};

export const addLinkToCollection = async (
  { id }: AddLinkToCollectionPathParameters,
  linkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest: LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest,
  options?: RequestInit,
): Promise<LinkManagementAPIControllersCollectionOperationResponse> => {
  return gatewayServiceCustomFetch<LinkManagementAPIControllersCollectionOperationResponse>(
    getAddLinkToCollectionUrl({ id }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        linkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest,
      ),
    },
  );
};

export const getAddLinkToCollectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addLinkToCollection>>,
    TError,
    {
      pathParams: AddLinkToCollectionPathParameters;
      data: LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addLinkToCollection>>,
  TError,
  {
    pathParams: AddLinkToCollectionPathParameters;
    data: LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest;
  },
  TContext
> => {
  const mutationKey = ["addLinkToCollection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addLinkToCollection>>,
    {
      pathParams: AddLinkToCollectionPathParameters;
      data: LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return addLinkToCollection(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddLinkToCollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof addLinkToCollection>>
>;
export type AddLinkToCollectionMutationBody =
  LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest;
export type AddLinkToCollectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Add a link to a collection
 */
export const useAddLinkToCollection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addLinkToCollection>>,
      TError,
      {
        pathParams: AddLinkToCollectionPathParameters;
        data: LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addLinkToCollection>>,
  TError,
  {
    pathParams: AddLinkToCollectionPathParameters;
    data: LinkManagementAPIModelsRequestsCollectionsAddLinkToCollectionRequest;
  },
  TContext
> => {
  const mutationOptions = getAddLinkToCollectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
