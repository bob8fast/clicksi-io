/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Notifications.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DeleteNotificationTemplatePathParameters,
  GetNotificationTemplatePathParameters,
  GetNotificationTemplatesParams,
  GetTemplateVariablesPathParameters,
  NotificationsAPIControllersNotificationTemplateResponse,
  NotificationsAPIControllersTemplateRenderResponse,
  NotificationsAPIControllersTemplateVariableInfo,
  NotificationsAPIDTOsCreateNotificationTemplateRequest,
  NotificationsAPIDTOsRenderTemplateRequest,
  NotificationsAPIDTOsUpdateNotificationTemplateRequest,
  RenderTemplatePathParameters,
  UpdateNotificationTemplatePathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all notification templates with optional filtering
 */
export const getGetNotificationTemplatesUrl = (
  params?: GetNotificationTemplatesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/notifications/api/v1/notification-templates?${stringifiedParams}`
    : `/notifications/api/v1/notification-templates`;
};

export const getNotificationTemplates = async (
  params?: GetNotificationTemplatesParams,
  options?: RequestInit,
): Promise<NotificationsAPIControllersNotificationTemplateResponse[]> => {
  return gatewayServiceCustomFetch<
    NotificationsAPIControllersNotificationTemplateResponse[]
  >(getGetNotificationTemplatesUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetNotificationTemplatesQueryKey = (
  params?: GetNotificationTemplatesParams,
) => {
  return [
    "notifications",
    "api",
    "v1",
    "notification-templates",
    ...(params ? [params] : []),
  ] as const;
};

export const useGetNotificationTemplatesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplates>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationTemplatesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationTemplates>>
  > = ({ signal }) =>
    getNotificationTemplates(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNotificationTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationTemplatesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationTemplates>>
>;
export type GetNotificationTemplatesInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplates>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetNotificationTemplatesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplates>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplates>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplates>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplates>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all notification templates with optional filtering
 */

export function useGetNotificationTemplatesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplates>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationTemplatesInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all notification templates with optional filtering
 */
export const prefetchGetNotificationTemplatesInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationTemplatesInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetNotificationTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationTemplatesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationTemplates>>
  > = ({ signal }) =>
    getNotificationTemplates(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getNotificationTemplates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationTemplatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationTemplates>>
>;
export type GetNotificationTemplatesQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationTemplates<
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | GetNotificationTemplatesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplates>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplates<
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplates>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplates>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplates<
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all notification templates with optional filtering
 */

export function useGetNotificationTemplates<
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationTemplatesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all notification templates with optional filtering
 */
export const prefetchGetNotificationTemplatesQuery = async <
  TData = Awaited<ReturnType<typeof getNotificationTemplates>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: GetNotificationTemplatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplates>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationTemplatesQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new notification template
 */
export const getCreateNotificationTemplateUrl = () => {
  return `/notifications/api/v1/notification-templates`;
};

export const createNotificationTemplate = async (
  notificationsAPIDTOsCreateNotificationTemplateRequest: NotificationsAPIDTOsCreateNotificationTemplateRequest,
  options?: RequestInit,
): Promise<NotificationsAPIControllersNotificationTemplateResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIControllersNotificationTemplateResponse>(
    getCreateNotificationTemplateUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        notificationsAPIDTOsCreateNotificationTemplateRequest,
      ),
    },
  );
};

export const getCreateNotificationTemplateMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNotificationTemplate>>,
    TError,
    { data: NotificationsAPIDTOsCreateNotificationTemplateRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNotificationTemplate>>,
  TError,
  { data: NotificationsAPIDTOsCreateNotificationTemplateRequest },
  TContext
> => {
  const mutationKey = ["createNotificationTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNotificationTemplate>>,
    { data: NotificationsAPIDTOsCreateNotificationTemplateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createNotificationTemplate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNotificationTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNotificationTemplate>>
>;
export type CreateNotificationTemplateMutationBody =
  NotificationsAPIDTOsCreateNotificationTemplateRequest;
export type CreateNotificationTemplateMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Create a new notification template
 */
export const useCreateNotificationTemplate = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createNotificationTemplate>>,
      TError,
      { data: NotificationsAPIDTOsCreateNotificationTemplateRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createNotificationTemplate>>,
  TError,
  { data: NotificationsAPIDTOsCreateNotificationTemplateRequest },
  TContext
> => {
  const mutationOptions = getCreateNotificationTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a specific notification template by ID
 */
export const getGetNotificationTemplateUrl = ({
  id,
}: GetNotificationTemplatePathParameters) => {
  return `/notifications/api/v1/notification-templates/${id}`;
};

export const getNotificationTemplate = async (
  { id }: GetNotificationTemplatePathParameters,
  options?: RequestInit,
): Promise<NotificationsAPIControllersNotificationTemplateResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIControllersNotificationTemplateResponse>(
    getGetNotificationTemplateUrl({ id }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetNotificationTemplateQueryKey = ({
  id,
}: GetNotificationTemplatePathParameters) => {
  return ["notifications", "api", "v1", "notification-templates", id] as const;
};

export const useGetNotificationTemplateInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplate>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationTemplateQueryKey({ id });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationTemplate>>
  > = ({ signal }) =>
    getNotificationTemplate({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNotificationTemplate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationTemplateInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationTemplate>>
>;
export type GetNotificationTemplateInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplate>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationTemplatePathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplate>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplate>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplate>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplate>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific notification template by ID
 */

export function useGetNotificationTemplateInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationTemplate>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationTemplateInfiniteQueryOptions(
    { id },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific notification template by ID
 */
export const prefetchGetNotificationTemplateInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationTemplateInfiniteQueryOptions(
    { id },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetNotificationTemplateQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationTemplateQueryKey({ id });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationTemplate>>
  > = ({ signal }) =>
    getNotificationTemplate({ id }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getNotificationTemplate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationTemplateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationTemplate>>
>;
export type GetNotificationTemplateQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationTemplate<
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationTemplatePathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplate>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplate<
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationTemplate>>,
          TError,
          Awaited<ReturnType<typeof getNotificationTemplate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationTemplate<
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific notification template by ID
 */

export function useGetNotificationTemplate<
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { id }: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationTemplateQueryOptions({ id }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific notification template by ID
 */
export const prefetchGetNotificationTemplateQuery = async <
  TData = Awaited<ReturnType<typeof getNotificationTemplate>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { id }: GetNotificationTemplatePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationTemplate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationTemplateQueryOptions({ id }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Update an existing notification template
 */
export const getUpdateNotificationTemplateUrl = ({
  id,
}: UpdateNotificationTemplatePathParameters) => {
  return `/notifications/api/v1/notification-templates/${id}`;
};

export const updateNotificationTemplate = async (
  { id }: UpdateNotificationTemplatePathParameters,
  notificationsAPIDTOsUpdateNotificationTemplateRequest: NotificationsAPIDTOsUpdateNotificationTemplateRequest,
  options?: RequestInit,
): Promise<NotificationsAPIControllersNotificationTemplateResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIControllersNotificationTemplateResponse>(
    getUpdateNotificationTemplateUrl({ id }),
    {
      ...options,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        notificationsAPIDTOsUpdateNotificationTemplateRequest,
      ),
    },
  );
};

export const getUpdateNotificationTemplateMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNotificationTemplate>>,
    TError,
    {
      pathParams: UpdateNotificationTemplatePathParameters;
      data: NotificationsAPIDTOsUpdateNotificationTemplateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateNotificationTemplate>>,
  TError,
  {
    pathParams: UpdateNotificationTemplatePathParameters;
    data: NotificationsAPIDTOsUpdateNotificationTemplateRequest;
  },
  TContext
> => {
  const mutationKey = ["updateNotificationTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateNotificationTemplate>>,
    {
      pathParams: UpdateNotificationTemplatePathParameters;
      data: NotificationsAPIDTOsUpdateNotificationTemplateRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateNotificationTemplate(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateNotificationTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateNotificationTemplate>>
>;
export type UpdateNotificationTemplateMutationBody =
  NotificationsAPIDTOsUpdateNotificationTemplateRequest;
export type UpdateNotificationTemplateMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Update an existing notification template
 */
export const useUpdateNotificationTemplate = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateNotificationTemplate>>,
      TError,
      {
        pathParams: UpdateNotificationTemplatePathParameters;
        data: NotificationsAPIDTOsUpdateNotificationTemplateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateNotificationTemplate>>,
  TError,
  {
    pathParams: UpdateNotificationTemplatePathParameters;
    data: NotificationsAPIDTOsUpdateNotificationTemplateRequest;
  },
  TContext
> => {
  const mutationOptions = getUpdateNotificationTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a notification template
 */
export const getDeleteNotificationTemplateUrl = ({
  id,
}: DeleteNotificationTemplatePathParameters) => {
  return `/notifications/api/v1/notification-templates/${id}`;
};

export const deleteNotificationTemplate = async (
  { id }: DeleteNotificationTemplatePathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getDeleteNotificationTemplateUrl({ id }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteNotificationTemplateMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNotificationTemplate>>,
    TError,
    { pathParams: DeleteNotificationTemplatePathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNotificationTemplate>>,
  TError,
  { pathParams: DeleteNotificationTemplatePathParameters },
  TContext
> => {
  const mutationKey = ["deleteNotificationTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNotificationTemplate>>,
    { pathParams: DeleteNotificationTemplatePathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteNotificationTemplate(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNotificationTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNotificationTemplate>>
>;

export type DeleteNotificationTemplateMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Delete a notification template
 */
export const useDeleteNotificationTemplate = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteNotificationTemplate>>,
      TError,
      { pathParams: DeleteNotificationTemplatePathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteNotificationTemplate>>,
  TError,
  { pathParams: DeleteNotificationTemplatePathParameters },
  TContext
> => {
  const mutationOptions = getDeleteNotificationTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Test render a notification template with provided data
 */
export const getRenderTemplateUrl = ({ id }: RenderTemplatePathParameters) => {
  return `/notifications/api/v1/notification-templates/${id}/render`;
};

export const renderTemplate = async (
  { id }: RenderTemplatePathParameters,
  notificationsAPIDTOsRenderTemplateRequest: NotificationsAPIDTOsRenderTemplateRequest,
  options?: RequestInit,
): Promise<NotificationsAPIControllersTemplateRenderResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIControllersTemplateRenderResponse>(
    getRenderTemplateUrl({ id }),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(notificationsAPIDTOsRenderTemplateRequest),
    },
  );
};

export const getRenderTemplateMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof renderTemplate>>,
    TError,
    {
      pathParams: RenderTemplatePathParameters;
      data: NotificationsAPIDTOsRenderTemplateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof renderTemplate>>,
  TError,
  {
    pathParams: RenderTemplatePathParameters;
    data: NotificationsAPIDTOsRenderTemplateRequest;
  },
  TContext
> => {
  const mutationKey = ["renderTemplate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof renderTemplate>>,
    {
      pathParams: RenderTemplatePathParameters;
      data: NotificationsAPIDTOsRenderTemplateRequest;
    }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return renderTemplate(pathParams, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RenderTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof renderTemplate>>
>;
export type RenderTemplateMutationBody =
  NotificationsAPIDTOsRenderTemplateRequest;
export type RenderTemplateMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Test render a notification template with provided data
 */
export const useRenderTemplate = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof renderTemplate>>,
      TError,
      {
        pathParams: RenderTemplatePathParameters;
        data: NotificationsAPIDTOsRenderTemplateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof renderTemplate>>,
  TError,
  {
    pathParams: RenderTemplatePathParameters;
    data: NotificationsAPIDTOsRenderTemplateRequest;
  },
  TContext
> => {
  const mutationOptions = getRenderTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get available template variables for a notification type
 */
export const getGetTemplateVariablesUrl = ({
  type,
}: GetTemplateVariablesPathParameters) => {
  return `/notifications/api/v1/notification-templates/variables/${type}`;
};

export const getTemplateVariables = async (
  { type }: GetTemplateVariablesPathParameters,
  options?: RequestInit,
): Promise<NotificationsAPIControllersTemplateVariableInfo[]> => {
  return gatewayServiceCustomFetch<
    NotificationsAPIControllersTemplateVariableInfo[]
  >(getGetTemplateVariablesUrl({ type }), {
    ...options,
    method: "GET",
  });
};

export const getGetTemplateVariablesQueryKey = ({
  type,
}: GetTemplateVariablesPathParameters) => {
  return [
    "notifications",
    "api",
    "v1",
    "notification-templates",
    "variables",
    type,
  ] as const;
};

export const useGetTemplateVariablesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getTemplateVariables>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { type }: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTemplateVariablesQueryKey({ type });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTemplateVariables>>
  > = ({ signal }) =>
    getTemplateVariables({ type }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTemplateVariables>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTemplateVariablesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTemplateVariables>>
>;
export type GetTemplateVariablesInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTemplateVariablesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTemplateVariables>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTemplateVariablesPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplateVariables>>,
          TError,
          Awaited<ReturnType<typeof getTemplateVariables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTemplateVariablesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTemplateVariables>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplateVariables>>,
          TError,
          Awaited<ReturnType<typeof getTemplateVariables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTemplateVariablesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTemplateVariables>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get available template variables for a notification type
 */

export function useGetTemplateVariablesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getTemplateVariables>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { type }: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTemplateVariablesInfiniteQueryOptions(
    { type },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get available template variables for a notification type
 */
export const prefetchGetTemplateVariablesInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { type }: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTemplateVariablesInfiniteQueryOptions(
    { type },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetTemplateVariablesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { type }: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTemplateVariablesQueryKey({ type });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTemplateVariables>>
  > = ({ signal }) =>
    getTemplateVariables({ type }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getTemplateVariables>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTemplateVariablesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTemplateVariables>>
>;
export type GetTemplateVariablesQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetTemplateVariables<
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTemplateVariablesPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplateVariables>>,
          TError,
          Awaited<ReturnType<typeof getTemplateVariables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTemplateVariables<
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplateVariables>>,
          TError,
          Awaited<ReturnType<typeof getTemplateVariables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTemplateVariables<
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get available template variables for a notification type
 */

export function useGetTemplateVariables<
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { type }: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetTemplateVariablesQueryOptions({ type }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get available template variables for a notification type
 */
export const prefetchGetTemplateVariablesQuery = async <
  TData = Awaited<ReturnType<typeof getTemplateVariables>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { type }: GetTemplateVariablesPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateVariables>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetTemplateVariablesQueryOptions({ type }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
