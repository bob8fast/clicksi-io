/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Notifications.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CancelNotificationPathParameters,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  GetNotificationPathParameters,
  GetNotificationStatsPathParameters,
  GetUserNotificationsParams,
  GetUserNotificationsPathParameters,
  NotificationsAPIDTOsNotificationResponse,
  NotificationsAPIDTOsNotificationStatsResponse,
  NotificationsAPIDTOsScheduleNotificationRequest,
  NotificationsAPIDTOsScheduleTeamNotificationRequest,
  NotificationsAPIDTOsScheduleTemplatedNotificationRequest,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get a specific notification by ID
 */
export const getGetNotificationUrl = ({
  notificationId,
}: GetNotificationPathParameters) => {
  return `/notifications/api/v1/notifications/${notificationId}`;
};

export const getNotification = async (
  { notificationId }: GetNotificationPathParameters,
  options?: RequestInit,
): Promise<NotificationsAPIDTOsNotificationResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsNotificationResponse>(
    getGetNotificationUrl({ notificationId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetNotificationQueryKey = ({
  notificationId,
}: GetNotificationPathParameters) => {
  return [
    "notifications",
    "api",
    "v1",
    "notifications",
    notificationId,
  ] as const;
};

export const useGetNotificationInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getNotification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { notificationId }: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationQueryKey({ notificationId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotification>>> = ({
    signal,
  }) => getNotification({ notificationId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNotification>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotification>>
>;
export type GetNotificationInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotification>>,
          TError,
          Awaited<ReturnType<typeof getNotification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotification>>,
          TError,
          Awaited<ReturnType<typeof getNotification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific notification by ID
 */

export function useGetNotificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { notificationId }: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationInfiniteQueryOptions(
    { notificationId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific notification by ID
 */
export const prefetchGetNotificationInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { notificationId }: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationInfiniteQueryOptions(
    { notificationId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetNotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { notificationId }: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationQueryKey({ notificationId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotification>>> = ({
    signal,
  }) => getNotification({ notificationId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getNotification>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotification>>
>;
export type GetNotificationQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotification<
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotification>>,
          TError,
          Awaited<ReturnType<typeof getNotification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotification<
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotification>>,
          TError,
          Awaited<ReturnType<typeof getNotification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotification<
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific notification by ID
 */

export function useGetNotification<
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { notificationId }: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationQueryOptions(
    { notificationId },
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a specific notification by ID
 */
export const prefetchGetNotificationQuery = async <
  TData = Awaited<ReturnType<typeof getNotification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { notificationId }: GetNotificationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationQueryOptions(
    { notificationId },
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Cancel a pending notification
 */
export const getCancelNotificationUrl = ({
  notificationId,
}: CancelNotificationPathParameters) => {
  return `/notifications/api/v1/notifications/${notificationId}`;
};

export const cancelNotification = async (
  { notificationId }: CancelNotificationPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(
    getCancelNotificationUrl({ notificationId }),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getCancelNotificationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelNotification>>,
    TError,
    { pathParams: CancelNotificationPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelNotification>>,
  TError,
  { pathParams: CancelNotificationPathParameters },
  TContext
> => {
  const mutationKey = ["cancelNotification"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelNotification>>,
    { pathParams: CancelNotificationPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return cancelNotification(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelNotification>>
>;

export type CancelNotificationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Cancel a pending notification
 */
export const useCancelNotification = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof cancelNotification>>,
      TError,
      { pathParams: CancelNotificationPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof cancelNotification>>,
  TError,
  { pathParams: CancelNotificationPathParameters },
  TContext
> => {
  const mutationOptions = getCancelNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Schedule a notification for a specific user
 */
export const getScheduleNotificationUrl = () => {
  return `/notifications/api/v1/notifications/schedule`;
};

export const scheduleNotification = async (
  notificationsAPIDTOsScheduleNotificationRequest: NotificationsAPIDTOsScheduleNotificationRequest,
  options?: RequestInit,
): Promise<NotificationsAPIDTOsNotificationResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsNotificationResponse>(
    getScheduleNotificationUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(notificationsAPIDTOsScheduleNotificationRequest),
    },
  );
};

export const getScheduleNotificationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleNotification>>,
    TError,
    { data: NotificationsAPIDTOsScheduleNotificationRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleNotification>>,
  TError,
  { data: NotificationsAPIDTOsScheduleNotificationRequest },
  TContext
> => {
  const mutationKey = ["scheduleNotification"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleNotification>>,
    { data: NotificationsAPIDTOsScheduleNotificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return scheduleNotification(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleNotification>>
>;
export type ScheduleNotificationMutationBody =
  NotificationsAPIDTOsScheduleNotificationRequest;
export type ScheduleNotificationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Schedule a notification for a specific user
 */
export const useScheduleNotification = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scheduleNotification>>,
      TError,
      { data: NotificationsAPIDTOsScheduleNotificationRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scheduleNotification>>,
  TError,
  { data: NotificationsAPIDTOsScheduleNotificationRequest },
  TContext
> => {
  const mutationOptions = getScheduleNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Schedule a notification for all members of a team
 */
export const getScheduleTeamNotificationUrl = () => {
  return `/notifications/api/v1/notifications/schedule-team`;
};

export const scheduleTeamNotification = async (
  notificationsAPIDTOsScheduleTeamNotificationRequest: NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest>,
  options?: RequestInit,
): Promise<NotificationsAPIDTOsNotificationResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsNotificationResponse>(
    getScheduleTeamNotificationUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(notificationsAPIDTOsScheduleTeamNotificationRequest),
    },
  );
};

export const getScheduleTeamNotificationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleTeamNotification>>,
    TError,
    { data: NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleTeamNotification>>,
  TError,
  { data: NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest> },
  TContext
> => {
  const mutationKey = ["scheduleTeamNotification"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleTeamNotification>>,
    { data: NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return scheduleTeamNotification(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleTeamNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleTeamNotification>>
>;
export type ScheduleTeamNotificationMutationBody =
  NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest>;
export type ScheduleTeamNotificationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Schedule a notification for all members of a team
 */
export const useScheduleTeamNotification = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scheduleTeamNotification>>,
      TError,
      {
        data: NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest>;
      },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scheduleTeamNotification>>,
  TError,
  { data: NonReadonly<NotificationsAPIDTOsScheduleTeamNotificationRequest> },
  TContext
> => {
  const mutationOptions = getScheduleTeamNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Schedule a templated notification for a specific user
 */
export const getScheduleTemplatedNotificationUrl = () => {
  return `/notifications/api/v1/notifications/schedule-templated`;
};

export const scheduleTemplatedNotification = async (
  notificationsAPIDTOsScheduleTemplatedNotificationRequest: NotificationsAPIDTOsScheduleTemplatedNotificationRequest,
  options?: RequestInit,
): Promise<NotificationsAPIDTOsNotificationResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsNotificationResponse>(
    getScheduleTemplatedNotificationUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        notificationsAPIDTOsScheduleTemplatedNotificationRequest,
      ),
    },
  );
};

export const getScheduleTemplatedNotificationMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleTemplatedNotification>>,
    TError,
    { data: NotificationsAPIDTOsScheduleTemplatedNotificationRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleTemplatedNotification>>,
  TError,
  { data: NotificationsAPIDTOsScheduleTemplatedNotificationRequest },
  TContext
> => {
  const mutationKey = ["scheduleTemplatedNotification"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleTemplatedNotification>>,
    { data: NotificationsAPIDTOsScheduleTemplatedNotificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return scheduleTemplatedNotification(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleTemplatedNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleTemplatedNotification>>
>;
export type ScheduleTemplatedNotificationMutationBody =
  NotificationsAPIDTOsScheduleTemplatedNotificationRequest;
export type ScheduleTemplatedNotificationMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Schedule a templated notification for a specific user
 */
export const useScheduleTemplatedNotification = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scheduleTemplatedNotification>>,
      TError,
      { data: NotificationsAPIDTOsScheduleTemplatedNotificationRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scheduleTemplatedNotification>>,
  TError,
  { data: NotificationsAPIDTOsScheduleTemplatedNotificationRequest },
  TContext
> => {
  const mutationOptions =
    getScheduleTemplatedNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get notifications for a specific user
 */
export const getGetUserNotificationsUrl = (
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/notifications/api/v1/notifications/user/${userId}?${stringifiedParams}`
    : `/notifications/api/v1/notifications/user/${userId}`;
};

export const getUserNotifications = async (
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: RequestInit,
): Promise<NotificationsAPIDTOsNotificationResponse[]> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsNotificationResponse[]>(
    getGetUserNotificationsUrl({ userId }, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetUserNotificationsQueryKey = (
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
) => {
  return [
    "notifications",
    "api",
    "v1",
    "notifications",
    "user",
    userId,
    ...(params ? [params] : []),
  ] as const;
};

export const useGetUserNotificationsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUserNotifications>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserNotificationsQueryKey({ userId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserNotifications>>
  > = ({ signal }) =>
    getUserNotifications({ userId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserNotifications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserNotificationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserNotifications>>
>;
export type GetUserNotificationsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserNotificationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserNotifications>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationsPathParameters,
  params: undefined | GetUserNotificationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotifications>>,
          TError,
          Awaited<ReturnType<typeof getUserNotifications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotificationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserNotifications>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotifications>>,
          TError,
          Awaited<ReturnType<typeof getUserNotifications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotificationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserNotifications>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get notifications for a specific user
 */

export function useGetUserNotificationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUserNotifications>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserNotificationsInfiniteQueryOptions(
    { userId },
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get notifications for a specific user
 */
export const prefetchGetUserNotificationsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserNotificationsInfiniteQueryOptions(
    { userId },
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetUserNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserNotificationsQueryKey({ userId }, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserNotifications>>
  > = ({ signal }) =>
    getUserNotifications({ userId }, params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getUserNotifications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserNotifications>>
>;
export type GetUserNotificationsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetUserNotifications<
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationsPathParameters,
  params: undefined | GetUserNotificationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotifications>>,
          TError,
          Awaited<ReturnType<typeof getUserNotifications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotifications<
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotifications>>,
          TError,
          Awaited<ReturnType<typeof getUserNotifications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserNotifications<
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get notifications for a specific user
 */

export function useGetUserNotifications<
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetUserNotificationsQueryOptions(
    { userId },
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get notifications for a specific user
 */
export const prefetchGetUserNotificationsQuery = async <
  TData = Awaited<ReturnType<typeof getUserNotifications>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetUserNotificationsPathParameters,
  params?: GetUserNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetUserNotificationsQueryOptions(
    { userId },
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Get notification statistics for a user
 */
export const getGetNotificationStatsUrl = ({
  userId,
}: GetNotificationStatsPathParameters) => {
  return `/notifications/api/v1/notifications/user/${userId}/stats`;
};

export const getNotificationStats = async (
  { userId }: GetNotificationStatsPathParameters,
  options?: RequestInit,
): Promise<NotificationsAPIDTOsNotificationStatsResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsNotificationStatsResponse>(
    getGetNotificationStatsUrl({ userId }),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetNotificationStatsQueryKey = ({
  userId,
}: GetNotificationStatsPathParameters) => {
  return [
    "notifications",
    "api",
    "v1",
    "notifications",
    "user",
    userId,
    "stats",
  ] as const;
};

export const useGetNotificationStatsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationStatsQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationStats>>
  > = ({ signal }) =>
    getNotificationStats({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNotificationStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationStatsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationStats>>
>;
export type GetNotificationStatsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationStatsPathParameters,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationStats>>,
          TError,
          Awaited<ReturnType<typeof getNotificationStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationStats>>,
          TError,
          Awaited<ReturnType<typeof getNotificationStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get notification statistics for a user
 */

export function useGetNotificationStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getNotificationStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationStatsInfiniteQueryOptions(
    { userId },
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get notification statistics for a user
 */
export const prefetchGetNotificationStatsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationStatsInfiniteQueryOptions(
    { userId },
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetNotificationStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationStatsQueryKey({ userId });

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationStats>>
  > = ({ signal }) =>
    getNotificationStats({ userId }, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getNotificationStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotificationStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationStats>>
>;
export type GetNotificationStatsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetNotificationStats<
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationStatsPathParameters,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationStats>>,
          TError,
          Awaited<ReturnType<typeof getNotificationStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationStats<
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationStats>>,
          TError,
          Awaited<ReturnType<typeof getNotificationStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotificationStats<
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  pathParams: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get notification statistics for a user
 */

export function useGetNotificationStats<
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  { userId }: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetNotificationStatsQueryOptions({ userId }, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get notification statistics for a user
 */
export const prefetchGetNotificationStatsQuery = async <
  TData = Awaited<ReturnType<typeof getNotificationStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  { userId }: GetNotificationStatsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetNotificationStatsQueryOptions({ userId }, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
