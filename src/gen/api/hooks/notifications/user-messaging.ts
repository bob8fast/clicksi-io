/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Notifications.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsCommonDtoApiResponse,
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  DisconnectPathParameters,
  NotificationsAPIDTOsMessagingConnectionResponse,
  NotificationsAPIDTOsMessagingConnectionStatsResponse,
  NotificationsAPIDTOsMessagingConnectionTokenResponse,
  NotificationsAPIDTOsSendWhatsAppOtpRequest,
  NotificationsAPIDTOsTelegramConnectRequest,
  NotificationsAPIDTOsVerifyWhatsAppRequest,
  TestConnectionPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get user's messaging connections
 */
export const getGetConnectionsUrl = () => {
  return `/notifications/api/v1/user-messaging/connections`;
};

export const getConnections = async (
  options?: RequestInit,
): Promise<NotificationsAPIDTOsMessagingConnectionResponse[]> => {
  return gatewayServiceCustomFetch<
    NotificationsAPIDTOsMessagingConnectionResponse[]
  >(getGetConnectionsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetConnectionsQueryKey = () => {
  return [
    "notifications",
    "api",
    "v1",
    "user-messaging",
    "connections",
  ] as const;
};

export const useGetConnectionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConnections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getConnections>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConnectionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnections>>> = ({
    signal,
  }) => getConnections({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConnections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConnectionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConnections>>
>;
export type GetConnectionsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConnectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnections>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnections>>,
          TError,
          Awaited<ReturnType<typeof getConnections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnections>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnections>>,
          TError,
          Awaited<ReturnType<typeof getConnections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's messaging connections
 */

export function useGetConnectionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnections>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConnectionsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user's messaging connections
 */
export const prefetchGetConnectionsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnections>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConnectionsInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConnectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConnectionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnections>>> = ({
    signal,
  }) => getConnections({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConnections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConnectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConnections>>
>;
export type GetConnectionsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConnections<
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnections>>,
          TError,
          Awaited<ReturnType<typeof getConnections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnections<
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnections>>,
          TError,
          Awaited<ReturnType<typeof getConnections>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnections<
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's messaging connections
 */

export function useGetConnections<
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConnectionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user's messaging connections
 */
export const prefetchGetConnectionsQuery = async <
  TData = Awaited<ReturnType<typeof getConnections>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getConnections>>, TError, TData>
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConnectionsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Disconnect messaging service
 */
export const getDisconnectUrl = ({
  connectionType,
}: DisconnectPathParameters) => {
  return `/notifications/api/v1/user-messaging/connections/${connectionType}`;
};

export const disconnect = async (
  { connectionType }: DisconnectPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getDisconnectUrl({ connectionType }), {
    ...options,
    method: "DELETE",
  });
};

export const getDisconnectMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof disconnect>>,
    TError,
    { pathParams: DisconnectPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof disconnect>>,
  TError,
  { pathParams: DisconnectPathParameters },
  TContext
> => {
  const mutationKey = ["disconnect"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof disconnect>>,
    { pathParams: DisconnectPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return disconnect(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DisconnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof disconnect>>
>;

export type DisconnectMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Disconnect messaging service
 */
export const useDisconnect = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof disconnect>>,
      TError,
      { pathParams: DisconnectPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof disconnect>>,
  TError,
  { pathParams: DisconnectPathParameters },
  TContext
> => {
  const mutationOptions = getDisconnectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get user's messaging connection statistics
 */
export const getGetConnectionStatsUrl = () => {
  return `/notifications/api/v1/user-messaging/stats`;
};

export const getConnectionStats = async (
  options?: RequestInit,
): Promise<NotificationsAPIDTOsMessagingConnectionStatsResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsMessagingConnectionStatsResponse>(
    getGetConnectionStatsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetConnectionStatsQueryKey = () => {
  return ["notifications", "api", "v1", "user-messaging", "stats"] as const;
};

export const useGetConnectionStatsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectionStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getConnectionStats>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConnectionStatsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConnectionStats>>
  > = ({ signal }) => getConnectionStats({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getConnectionStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConnectionStatsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConnectionStats>>
>;
export type GetConnectionStatsInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConnectionStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectionStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectionStats>>,
          TError,
          Awaited<ReturnType<typeof getConnectionStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectionStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectionStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectionStats>>,
          TError,
          Awaited<ReturnType<typeof getConnectionStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectionStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectionStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's messaging connection statistics
 */

export function useGetConnectionStatsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getConnectionStats>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConnectionStatsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user's messaging connection statistics
 */
export const prefetchGetConnectionStatsInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConnectionStatsInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetConnectionStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getConnectionStats>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetConnectionStatsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConnectionStats>>
  > = ({ signal }) => getConnectionStats({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getConnectionStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetConnectionStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConnectionStats>>
>;
export type GetConnectionStatsQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetConnectionStats<
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectionStats>>,
          TError,
          Awaited<ReturnType<typeof getConnectionStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectionStats<
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConnectionStats>>,
          TError,
          Awaited<ReturnType<typeof getConnectionStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetConnectionStats<
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's messaging connection statistics
 */

export function useGetConnectionStats<
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetConnectionStatsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user's messaging connection statistics
 */
export const prefetchGetConnectionStatsQuery = async <
  TData = Awaited<ReturnType<typeof getConnectionStats>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConnectionStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetConnectionStatsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Connect Telegram account (called by bot webhook)
 */
export const getConnectTelegramUrl = () => {
  return `/notifications/api/v1/user-messaging/telegram/connect`;
};

export const connectTelegram = async (
  notificationsAPIDTOsTelegramConnectRequest: NotificationsAPIDTOsTelegramConnectRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getConnectTelegramUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(notificationsAPIDTOsTelegramConnectRequest),
    },
  );
};

export const getConnectTelegramMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof connectTelegram>>,
    TError,
    { data: NotificationsAPIDTOsTelegramConnectRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof connectTelegram>>,
  TError,
  { data: NotificationsAPIDTOsTelegramConnectRequest },
  TContext
> => {
  const mutationKey = ["connectTelegram"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof connectTelegram>>,
    { data: NotificationsAPIDTOsTelegramConnectRequest }
  > = (props) => {
    const { data } = props ?? {};

    return connectTelegram(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConnectTelegramMutationResult = NonNullable<
  Awaited<ReturnType<typeof connectTelegram>>
>;
export type ConnectTelegramMutationBody =
  NotificationsAPIDTOsTelegramConnectRequest;
export type ConnectTelegramMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Connect Telegram account (called by bot webhook)
 */
export const useConnectTelegram = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof connectTelegram>>,
      TError,
      { data: NotificationsAPIDTOsTelegramConnectRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof connectTelegram>>,
  TError,
  { data: NotificationsAPIDTOsTelegramConnectRequest },
  TContext
> => {
  const mutationOptions = getConnectTelegramMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Generate connection token for Telegram
 */
export const getGenerateTelegramTokenUrl = () => {
  return `/notifications/api/v1/user-messaging/telegram/generate-token`;
};

export const generateTelegramToken = async (
  options?: RequestInit,
): Promise<NotificationsAPIDTOsMessagingConnectionTokenResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIDTOsMessagingConnectionTokenResponse>(
    getGenerateTelegramTokenUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getGenerateTelegramTokenMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateTelegramToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateTelegramToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["generateTelegramToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateTelegramToken>>,
    void
  > = () => {
    return generateTelegramToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateTelegramTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateTelegramToken>>
>;

export type GenerateTelegramTokenMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Generate connection token for Telegram
 */
export const useGenerateTelegramToken = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateTelegramToken>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof generateTelegramToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getGenerateTelegramTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Test messaging connection
 */
export const getTestConnectionUrl = ({
  connectionType,
}: TestConnectionPathParameters) => {
  return `/notifications/api/v1/user-messaging/test/${connectionType}`;
};

export const testConnection = async (
  { connectionType }: TestConnectionPathParameters,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getTestConnectionUrl({ connectionType }),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getTestConnectionMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof testConnection>>,
    TError,
    { pathParams: TestConnectionPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof testConnection>>,
  TError,
  { pathParams: TestConnectionPathParameters },
  TContext
> => {
  const mutationKey = ["testConnection"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof testConnection>>,
    { pathParams: TestConnectionPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return testConnection(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TestConnectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof testConnection>>
>;

export type TestConnectionMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Test messaging connection
 */
export const useTestConnection = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof testConnection>>,
      TError,
      { pathParams: TestConnectionPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof testConnection>>,
  TError,
  { pathParams: TestConnectionPathParameters },
  TContext
> => {
  const mutationOptions = getTestConnectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Send WhatsApp OTP for phone verification
 */
export const getSendWhatsAppOtpUrl = () => {
  return `/notifications/api/v1/user-messaging/whatsapp/send-otp`;
};

export const sendWhatsAppOtp = async (
  notificationsAPIDTOsSendWhatsAppOtpRequest: NotificationsAPIDTOsSendWhatsAppOtpRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getSendWhatsAppOtpUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(notificationsAPIDTOsSendWhatsAppOtpRequest),
    },
  );
};

export const getSendWhatsAppOtpMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendWhatsAppOtp>>,
    TError,
    { data: NotificationsAPIDTOsSendWhatsAppOtpRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendWhatsAppOtp>>,
  TError,
  { data: NotificationsAPIDTOsSendWhatsAppOtpRequest },
  TContext
> => {
  const mutationKey = ["sendWhatsAppOtp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendWhatsAppOtp>>,
    { data: NotificationsAPIDTOsSendWhatsAppOtpRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendWhatsAppOtp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendWhatsAppOtpMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendWhatsAppOtp>>
>;
export type SendWhatsAppOtpMutationBody =
  NotificationsAPIDTOsSendWhatsAppOtpRequest;
export type SendWhatsAppOtpMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Send WhatsApp OTP for phone verification
 */
export const useSendWhatsAppOtp = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendWhatsAppOtp>>,
      TError,
      { data: NotificationsAPIDTOsSendWhatsAppOtpRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendWhatsAppOtp>>,
  TError,
  { data: NotificationsAPIDTOsSendWhatsAppOtpRequest },
  TContext
> => {
  const mutationOptions = getSendWhatsAppOtpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Verify WhatsApp phone number with OTP
 */
export const getVerifyWhatsAppUrl = () => {
  return `/notifications/api/v1/user-messaging/whatsapp/verify`;
};

export const verifyWhatsApp = async (
  notificationsAPIDTOsVerifyWhatsAppRequest: NotificationsAPIDTOsVerifyWhatsAppRequest,
  options?: RequestInit,
): Promise<ClicksiDataContractsCommonDtoApiResponse> => {
  return gatewayServiceCustomFetch<ClicksiDataContractsCommonDtoApiResponse>(
    getVerifyWhatsAppUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(notificationsAPIDTOsVerifyWhatsAppRequest),
    },
  );
};

export const getVerifyWhatsAppMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyWhatsApp>>,
    TError,
    { data: NotificationsAPIDTOsVerifyWhatsAppRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyWhatsApp>>,
  TError,
  { data: NotificationsAPIDTOsVerifyWhatsAppRequest },
  TContext
> => {
  const mutationKey = ["verifyWhatsApp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyWhatsApp>>,
    { data: NotificationsAPIDTOsVerifyWhatsAppRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyWhatsApp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyWhatsAppMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyWhatsApp>>
>;
export type VerifyWhatsAppMutationBody =
  NotificationsAPIDTOsVerifyWhatsAppRequest;
export type VerifyWhatsAppMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Verify WhatsApp phone number with OTP
 */
export const useVerifyWhatsApp = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyWhatsApp>>,
      TError,
      { data: NotificationsAPIDTOsVerifyWhatsAppRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof verifyWhatsApp>>,
  TError,
  { data: NotificationsAPIDTOsVerifyWhatsAppRequest },
  TContext
> => {
  const mutationOptions = getVerifyWhatsAppMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
