/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Notifications.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  NotificationsAPIControllersTelegramUpdate,
  NotificationsAPIControllersWhatsAppWebhookData,
  WhatsAppWebhookVerificationParams,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Telegram webhook endpoint for receiving updates
 */
export const getTelegramWebhookUrl = () => {
  return `/notifications/api/v1/webhooks/telegram`;
};

export const telegramWebhook = async (
  notificationsAPIControllersTelegramUpdate: NotificationsAPIControllersTelegramUpdate,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getTelegramWebhookUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(notificationsAPIControllersTelegramUpdate),
  });
};

export const getTelegramWebhookMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof telegramWebhook>>,
    TError,
    { data: NotificationsAPIControllersTelegramUpdate },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof telegramWebhook>>,
  TError,
  { data: NotificationsAPIControllersTelegramUpdate },
  TContext
> => {
  const mutationKey = ["telegramWebhook"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof telegramWebhook>>,
    { data: NotificationsAPIControllersTelegramUpdate }
  > = (props) => {
    const { data } = props ?? {};

    return telegramWebhook(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TelegramWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof telegramWebhook>>
>;
export type TelegramWebhookMutationBody =
  NotificationsAPIControllersTelegramUpdate;
export type TelegramWebhookMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Telegram webhook endpoint for receiving updates
 */
export const useTelegramWebhook = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof telegramWebhook>>,
      TError,
      { data: NotificationsAPIControllersTelegramUpdate },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof telegramWebhook>>,
  TError,
  { data: NotificationsAPIControllersTelegramUpdate },
  TContext
> => {
  const mutationOptions = getTelegramWebhookMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary WhatsApp webhook endpoint for receiving updates
 */
export const getWhatsAppWebhookUrl = () => {
  return `/notifications/api/v1/webhooks/whatsapp`;
};

export const whatsAppWebhook = async (
  notificationsAPIControllersWhatsAppWebhookData: NotificationsAPIControllersWhatsAppWebhookData,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getWhatsAppWebhookUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(notificationsAPIControllersWhatsAppWebhookData),
  });
};

export const getWhatsAppWebhookMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof whatsAppWebhook>>,
    TError,
    { data: NotificationsAPIControllersWhatsAppWebhookData },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof whatsAppWebhook>>,
  TError,
  { data: NotificationsAPIControllersWhatsAppWebhookData },
  TContext
> => {
  const mutationKey = ["whatsAppWebhook"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof whatsAppWebhook>>,
    { data: NotificationsAPIControllersWhatsAppWebhookData }
  > = (props) => {
    const { data } = props ?? {};

    return whatsAppWebhook(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WhatsAppWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof whatsAppWebhook>>
>;
export type WhatsAppWebhookMutationBody =
  NotificationsAPIControllersWhatsAppWebhookData;
export type WhatsAppWebhookMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary WhatsApp webhook endpoint for receiving updates
 */
export const useWhatsAppWebhook = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof whatsAppWebhook>>,
      TError,
      { data: NotificationsAPIControllersWhatsAppWebhookData },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof whatsAppWebhook>>,
  TError,
  { data: NotificationsAPIControllersWhatsAppWebhookData },
  TContext
> => {
  const mutationOptions = getWhatsAppWebhookMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary WhatsApp webhook verification (for initial setup)
 */
export const getWhatsAppWebhookVerificationUrl = (
  params?: WhatsAppWebhookVerificationParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/notifications/api/v1/webhooks/whatsapp?${stringifiedParams}`
    : `/notifications/api/v1/webhooks/whatsapp`;
};

export const whatsAppWebhookVerification = async (
  params?: WhatsAppWebhookVerificationParams,
  options?: RequestInit,
): Promise<string> => {
  return gatewayServiceCustomFetch<string>(
    getWhatsAppWebhookVerificationUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getWhatsAppWebhookVerificationQueryKey = (
  params?: WhatsAppWebhookVerificationParams,
) => {
  return [
    "notifications",
    "api",
    "v1",
    "webhooks",
    "whatsapp",
    ...(params ? [params] : []),
  ] as const;
};

export const useWhatsAppWebhookVerificationInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof whatsAppWebhookVerification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWhatsAppWebhookVerificationQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof whatsAppWebhookVerification>>
  > = ({ signal }) =>
    whatsAppWebhookVerification(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WhatsAppWebhookVerificationInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof whatsAppWebhookVerification>>
>;
export type WhatsAppWebhookVerificationInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useWhatsAppWebhookVerificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof whatsAppWebhookVerification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | WhatsAppWebhookVerificationParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
          TError,
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWhatsAppWebhookVerificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof whatsAppWebhookVerification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
          TError,
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWhatsAppWebhookVerificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof whatsAppWebhookVerification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary WhatsApp webhook verification (for initial setup)
 */

export function useWhatsAppWebhookVerificationInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof whatsAppWebhookVerification>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useWhatsAppWebhookVerificationInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary WhatsApp webhook verification (for initial setup)
 */
export const prefetchWhatsAppWebhookVerificationInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useWhatsAppWebhookVerificationInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useWhatsAppWebhookVerificationQueryOptions = <
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWhatsAppWebhookVerificationQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof whatsAppWebhookVerification>>
  > = ({ signal }) =>
    whatsAppWebhookVerification(params, { signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WhatsAppWebhookVerificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof whatsAppWebhookVerification>>
>;
export type WhatsAppWebhookVerificationQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useWhatsAppWebhookVerification<
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params: undefined | WhatsAppWebhookVerificationParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
          TError,
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWhatsAppWebhookVerification<
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
          TError,
          Awaited<ReturnType<typeof whatsAppWebhookVerification>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWhatsAppWebhookVerification<
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary WhatsApp webhook verification (for initial setup)
 */

export function useWhatsAppWebhookVerification<
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useWhatsAppWebhookVerificationQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary WhatsApp webhook verification (for initial setup)
 */
export const prefetchWhatsAppWebhookVerificationQuery = async <
  TData = Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  params?: WhatsAppWebhookVerificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof whatsAppWebhookVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useWhatsAppWebhookVerificationQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
