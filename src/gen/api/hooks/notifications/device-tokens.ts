/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Notifications.API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  NotificationsAPIControllersDeviceTokenResponse,
  NotificationsAPIControllersRegisterDeviceTokenRequest,
  NotificationsAPIControllersRemoveDeviceTokenRequest,
  RemoveDeviceTokenPathParameters,
} from "../../types";

import { gatewayServiceCustomFetch } from "../../../../lib/orval/orval-fetch";
import { customQueryOptions } from "../../../../lib/orval/custom-query-options";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Register a new device token for the current user
 */
export const getRegisterDeviceTokenUrl = () => {
  return `/notifications/api/v1/device-tokens`;
};

export const registerDeviceToken = async (
  notificationsAPIControllersRegisterDeviceTokenRequest: NotificationsAPIControllersRegisterDeviceTokenRequest,
  options?: RequestInit,
): Promise<NotificationsAPIControllersDeviceTokenResponse> => {
  return gatewayServiceCustomFetch<NotificationsAPIControllersDeviceTokenResponse>(
    getRegisterDeviceTokenUrl(),
    {
      ...options,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        ...options?.headers,
      },
      body: JSON.stringify(
        notificationsAPIControllersRegisterDeviceTokenRequest,
      ),
    },
  );
};

export const getRegisterDeviceTokenMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerDeviceToken>>,
    TError,
    { data: NotificationsAPIControllersRegisterDeviceTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerDeviceToken>>,
  TError,
  { data: NotificationsAPIControllersRegisterDeviceTokenRequest },
  TContext
> => {
  const mutationKey = ["registerDeviceToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerDeviceToken>>,
    { data: NotificationsAPIControllersRegisterDeviceTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerDeviceToken(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterDeviceTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerDeviceToken>>
>;
export type RegisterDeviceTokenMutationBody =
  NotificationsAPIControllersRegisterDeviceTokenRequest;
export type RegisterDeviceTokenMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Register a new device token for the current user
 */
export const useRegisterDeviceToken = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerDeviceToken>>,
      TError,
      { data: NotificationsAPIControllersRegisterDeviceTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerDeviceToken>>,
  TError,
  { data: NotificationsAPIControllersRegisterDeviceTokenRequest },
  TContext
> => {
  const mutationOptions = getRegisterDeviceTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all active device tokens for the current user
 */
export const getGetDeviceTokensUrl = () => {
  return `/notifications/api/v1/device-tokens`;
};

export const getDeviceTokens = async (
  options?: RequestInit,
): Promise<NotificationsAPIControllersDeviceTokenResponse[]> => {
  return gatewayServiceCustomFetch<
    NotificationsAPIControllersDeviceTokenResponse[]
  >(getGetDeviceTokensUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetDeviceTokensQueryKey = () => {
  return ["notifications", "api", "v1", "device-tokens"] as const;
};

export const useGetDeviceTokensInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDeviceTokens>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getDeviceTokens>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeviceTokensQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceTokens>>> = ({
    signal,
  }) => getDeviceTokens({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDeviceTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDeviceTokensInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceTokens>>
>;
export type GetDeviceTokensInfiniteQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetDeviceTokensInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeviceTokens>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeviceTokens>>,
          TError,
          Awaited<ReturnType<typeof getDeviceTokens>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeviceTokensInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeviceTokens>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeviceTokens>>,
          TError,
          Awaited<ReturnType<typeof getDeviceTokens>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeviceTokensInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeviceTokens>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all active device tokens for the current user
 */

export function useGetDeviceTokensInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDeviceTokens>>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetDeviceTokensInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all active device tokens for the current user
 */
export const prefetchGetDeviceTokensInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetDeviceTokensInfiniteQueryOptions(options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const useGetDeviceTokensQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDeviceTokens>>, TError, TData>
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeviceTokensQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeviceTokens>>> = ({
    signal,
  }) => getDeviceTokens({ signal, ...requestOptions });

  const customOptions = customQueryOptions({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof getDeviceTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDeviceTokensQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeviceTokens>>
>;
export type GetDeviceTokensQueryError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

export function useGetDeviceTokens<
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeviceTokens>>,
          TError,
          Awaited<ReturnType<typeof getDeviceTokens>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeviceTokens<
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDeviceTokens>>,
          TError,
          Awaited<ReturnType<typeof getDeviceTokens>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDeviceTokens<
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all active device tokens for the current user
 */

export function useGetDeviceTokens<
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = useGetDeviceTokensQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all active device tokens for the current user
 */
export const prefetchGetDeviceTokensQuery = async <
  TData = Awaited<ReturnType<typeof getDeviceTokens>>,
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeviceTokens>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = useGetDeviceTokensQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Remove a specific device token
 */
export const getRemoveDeviceTokenUrl = ({
  tokenId,
}: RemoveDeviceTokenPathParameters) => {
  return `/notifications/api/v1/device-tokens/${tokenId}`;
};

export const removeDeviceToken = async (
  { tokenId }: RemoveDeviceTokenPathParameters,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getRemoveDeviceTokenUrl({ tokenId }), {
    ...options,
    method: "DELETE",
  });
};

export const getRemoveDeviceTokenMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeDeviceToken>>,
    TError,
    { pathParams: RemoveDeviceTokenPathParameters },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeDeviceToken>>,
  TError,
  { pathParams: RemoveDeviceTokenPathParameters },
  TContext
> => {
  const mutationKey = ["removeDeviceToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeDeviceToken>>,
    { pathParams: RemoveDeviceTokenPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return removeDeviceToken(pathParams, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveDeviceTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeDeviceToken>>
>;

export type RemoveDeviceTokenMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Remove a specific device token
 */
export const useRemoveDeviceToken = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeDeviceToken>>,
      TError,
      { pathParams: RemoveDeviceTokenPathParameters },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeDeviceToken>>,
  TError,
  { pathParams: RemoveDeviceTokenPathParameters },
  TContext
> => {
  const mutationOptions = getRemoveDeviceTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Remove a device token by device token string
 */
export const getRemoveDeviceTokenByStringUrl = () => {
  return `/notifications/api/v1/device-tokens/by-token`;
};

export const removeDeviceTokenByString = async (
  notificationsAPIControllersRemoveDeviceTokenRequest: NotificationsAPIControllersRemoveDeviceTokenRequest,
  options?: RequestInit,
): Promise<void> => {
  return gatewayServiceCustomFetch<void>(getRemoveDeviceTokenByStringUrl(), {
    ...options,
    method: "DELETE",
    headers: {
      "Content-Type": "application/json-patch+json",
      ...options?.headers,
    },
    body: JSON.stringify(notificationsAPIControllersRemoveDeviceTokenRequest),
  });
};

export const getRemoveDeviceTokenByStringMutationOptions = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeDeviceTokenByString>>,
    TError,
    { data: NotificationsAPIControllersRemoveDeviceTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof gatewayServiceCustomFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeDeviceTokenByString>>,
  TError,
  { data: NotificationsAPIControllersRemoveDeviceTokenRequest },
  TContext
> => {
  const mutationKey = ["removeDeviceTokenByString"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeDeviceTokenByString>>,
    { data: NotificationsAPIControllersRemoveDeviceTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return removeDeviceTokenByString(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveDeviceTokenByStringMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeDeviceTokenByString>>
>;
export type RemoveDeviceTokenByStringMutationBody =
  NotificationsAPIControllersRemoveDeviceTokenRequest;
export type RemoveDeviceTokenByStringMutationError =
  ClicksiDataContractsProblemDetailsRootProblemDetailsDto;

/**
 * @summary Remove a device token by device token string
 */
export const useRemoveDeviceTokenByString = <
  TError = ClicksiDataContractsProblemDetailsRootProblemDetailsDto,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeDeviceTokenByString>>,
      TError,
      { data: NotificationsAPIControllersRemoveDeviceTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof gatewayServiceCustomFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeDeviceTokenByString>>,
  TError,
  { data: NotificationsAPIControllersRemoveDeviceTokenRequest },
  TContext
> => {
  const mutationOptions = getRemoveDeviceTokenByStringMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
